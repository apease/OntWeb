;; This file is the source file for the SUMO (Standard Upper Merged Ontology), 
;; an ontology that was developed within the SUO Working Group by merging the
;; various SUO content sources.  The basis for the merge is John Sowa's upper 
;; ontology (as described at http://www.bestweb.net/~sowa/ontology/toplevel.htm 
;; and in Chapter 2 of his book _Knowledge Representation_, Brooks/Cole, 2000).  
;; The definitions and axioms of the other SUO sources have been aligned with 
;; this ontology.  

;; In addition to Sowa's ontology, the merge incorporates Russell and Norvig's 
;; ontology, PSL (Process Specification Language), Casati and Varzi's theory of 
;; holes, Allen's temporal axioms, the relatively noncontroversial elements of 
;; Smith's and Guarino's respective mereotopologies, the KIF formalization of the 
;; CPR (Core Plan Representation), the ontologies available on the Ontolingua 
;; server maintained by Stanford University's Knowledge Systems Laboratory, the 
;; ontologies developed by ITBM-CNR, some of the verb classes from the second 
;; part of Beth Levin's book "English Verb Classes and Alternations:  A 
;; Preliminary Investigation", some of the spatial relations from an unpublished 
;; paper by Iris Tommelein and Anil Gupta entitled "Conceptual Structures for 
;; Spatial Reasoning", and a "Structural Ontology" proposed by David Whitten and 
;; substantially revised and extended by Chris Menzel.

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                            ;;
;;                STRUCTURAL ONTOLOGY                         ;;
;;                                                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The Structural Ontology consists of definitions of certain syntactic 
;; abbreviations that can be both heuristically useful and computationally 
;; advantageous.

(instance instance AntisymmetricRelation)
(domain instance 1 Entity)
(domain instance 2 Class)
(documentation instance "An object is an &%instance a &%Class if 
it is a member of that &%Class.  An individual may be an instance of many 
classes, some of which may be subclasses of others.  Thus, there is no 
assumption in the meaning of &%instance about specificity or uniqueness.")

(instance subclass PartialOrderingRelation)
(domain subclass 1 Class)
(domain subclass 2 Class)
(documentation subclass "&%Class C is a subclass of &%Class P only if 
every instance of C is also an instance of P.  A class may have multiple 
superclasses and subclasses.")

(=> 
   (subclass ?SUBCLASS ?CLASS)
   (forall (?INST)
      (=> 
         (instance ?INST ?SUBCLASS)
         (instance ?INST ?CLASS))))

(instance subrelation PartialOrderingRelation)
(domain subrelation 1 Relation)
(domain subrelation 2 Relation)
(documentation subrelation "A &%Relation R is a &%subrelation 
&%Relation R' if R is a &%subclass R'.  This implies that every 
tuple of R is also a tuple of R'.  Again, if R holds for some arguments 
arg_1, arg_2, ... arg_n, then R' holds for the same arguments.  Thus, a 
&%Relation and its subrelation must have the same valence. In CycL, 
&%subrelation is called #$genlPreds.")

(=>
   (subrelation ?PRED1 ?PRED2)
   (exists (?NUMBER)
      (and
         (valence ?PRED1 ?NUMBER)
         (valence ?PRED2 ?NUMBER))))

(=>
   (and
      (subrelation ?PRED1 ?PRED2)
      (domain ?PRED2 ?NUMBER ?CLASS2)
      (domain ?PRED1 ?NUMBER ?CLASS1))
   (subclass ?CLASS1 ?CLASS2))

(=>
   (and
      (subrelation ?PRED1 ?PRED2)
      (instance ?PRED2 ?CLASS))
   (instance ?PRED1 ?CLASS))

(instance domain TernaryPredicate)
(domain domain 1 Relation)
(domain domain 2 PositiveInteger)
(domain domain 3 Class)
(documentation domain "Provides a computationally and heuristically
convenient mechanism for declaring the argument types of a given relation.  
The formula (&%domain ?REL 3 ?CLASS) says that the 3rd element of each 
tuple in the relation ?REL is an instance of ?CLASS.  Specifying argument
types is very helpful in maintaining ontologies.  Representation systems can 
use these specifications to classify terms and check integrity constraints.  
If the restriction on the argument type of a &%Relation is not captured by a 
&%Class already defined in the ontology, one can specify a Class compositionally 
with the functions &%UnionFn, &%IntersectionFn, &%KappaFn, etc.")

(=> 
    (domain ?REL 1 ?CLASS)
    (forall (?INST1 ?INST2)
            (=> 
                (holds ?REL ?INST1 ?INST2)
                (instance ?INST1 ?CLASS))))

(=> 
    (domain ?REL 2 ?CLASS)
    (forall (?INST1 ?INST2)
            (=> 
                (holds ?REL ?INST1 ?INST2)
                (instance ?INST2 ?CLASS))))

(=> 
    (domain ?REL 1 ?CLASS)
    (forall (?INST1 ?INST2 ?INST3)
            (=> 
                (holds ?REL ?INST1 ?INST2 ?INST3)
                (instance ?INST1 ?CLASS))))

(=> 
    (domain ?REL 2 ?CLASS)
    (forall (?INST1 ?INST2 ?INST3)
            (=> 
                (holds ?REL ?INST1 ?INST2 ?INST3)
                (instance ?INST2 ?CLASS))))

(=> 
    (domain ?REL 3 ?CLASS)
    (forall (?INST1 ?INST2 ?INST3)
            (=> 
                (holds ?REL ?INST1 ?INST2 ?INST3)
                (instance ?INST3 ?CLASS))))

(instance domainSubclass TernaryPredicate)
(domain domainSubclass 1 Relation)
(domain domainSubclass 2 PositiveInteger)
(domain domainSubclass 3 Class)
(documentation domainSubclass "&%Predicate used to specify argument 
type restrictions of &%Predicates.  The formula (&%domainSubclass 
?REL 3 ?CLASS) says that the 3rd element of each tuple in the relation 
?REL is a subclass of ?CLASS.")

(=> 
    (domainSubclass ?REL 1 ?CLASS)
    (forall (?INST1 ?INST2)
            (=> 
                (holds ?REL ?INST1 ?INST2)
                (subclass ?INST1 ?CLASS))))

(=> 
    (domainSubclass ?REL 2 ?CLASS)
    (forall (?INST1 ?INST2)
            (=> 
                (holds ?REL ?INST1 ?INST2)
                (subclass ?INST2 ?CLASS))))

(=> 
    (domainSubclass ?REL 1 ?CLASS)
    (forall (?INST1 ?INST2 ?INST3)
            (=> 
                (holds ?REL ?INST1 ?INST2 ?INST3)
                (subclass ?INST1 ?CLASS))))

(=> 
    (domainSubclass ?REL 2 ?CLASS)
    (forall (?INST1 ?INST2 ?INST3)
            (=> 
                (holds ?REL ?INST1 ?INST2 ?INST3)
                (subclass ?INST2 ?CLASS))))

(=> 
    (domainSubclass ?REL 3 ?CLASS)
    (forall (?INST1 ?INST2 ?INST3)
            (=> 
                (holds ?REL ?INST1 ?INST2 ?INST3)
                (subclass ?INST3 ?CLASS))))

(instance range AsymmetricRelation)
(domain range 1 Function)
(domain range 2 Class)
(documentation range "Gives the range of a function.  In other words, 
(&%range ?FUNCTION ?CLASS) means that all of the values assigned by 
?FUNCTION are elements of ?CLASS.") 

(instance valence AsymmetricRelation)
(domain valence 1 Relation)
(domain valence 2 PositiveInteger)
(singleValued valence 2)
(documentation valence "Specifies the number of arguments that a 
relation can take.  If a relation does not have a fixed number of 
arguments, it does not have a valence and it is an instance of 
&%VariableArityRelation.  For example, &%holds is a 
&%VariableArityRelation.")

(instance documentation AsymmetricRelation)
(domain documentation 1 Entity)
(domain documentation 2 SymbolicString)
(documentation documentation "A relation between objects in the domain 
of discourse and strings of natural language text.  The domain of 
&%documentation is not constants (names), but the objects themselves.  
This means that one does not quote the names when associating them with 
their documentation.")

(instance disjoint SymmetricRelation)
(domain disjoint 1 Class)
(domain disjoint 2 Class)
(documentation disjoint "&%Classes are &%disjoint only if they share no 
instances, i.e. just in case the result of applying &%IntersectionFn to
them is empty.")

(=>
   (disjoint ?CLASS1 ?CLASS2)
   (forall (?INST)
      (not
         (and 
	    (instance ?INST ?CLASS1)
          (instance ?INST ?CLASS2)))))

(instance contraryProperty SymmetricRelation)
(instance contraryProperty TransitiveRelation)
(instance contraryProperty IrreflexiveRelation)
(domain contraryProperty 1 Attribute)
(domain contraryProperty 2 Attribute)
(documentation contraryProperty "Means that the two arguments are 
properties that are opposed to one another, e.g. Cold verus Hot or 
Elastic versus Rigid.")

(=>
   (and
      (attribute ?OBJ ?ATTR1)
      (contraryProperty ?ATTR1 ?ATTR2))
   (not
      (attribute ?OBJ ?ATTR2)))

(instance exhaustiveDecomposition VariableArityRelation)
(domain exhaustiveDecomposition 1 Class)
(relatedInternalConcept exhaustiveDecomposition partition)
(documentation exhaustiveDecomposition "An &%exhaustiveDecomposition of a 
&%Class C is a set of subclasses of C such that every subclass of C either 
is an element of the set or is a subclass of an element of the set.  Note: 
this does not necessarily mean that the elements of the set are disjoint 
(see &%partition - a &%partition is a disjoint exhaustive decomposition.)")

(forall (?INT) (domain exhaustiveDecomposition ?INT Class))

(=>
   (exhaustiveDecomposition ?CLASS1 ?CLASS2 ?CLASS3)
   (forall (?OBJ)
      (=>
         (instance ?OBJ ?CLASS1)
         (or
            (instance ?OBJ ?CLASS2)
            (instance ?OBJ ?CLASS3)))))

(=>
   (exhaustiveDecomposition ?CLASS1 ?CLASS2 ?CLASS3 ?CLASS4)
   (forall (?OBJ)
      (=>
         (instance ?OBJ ?CLASS1)
         (or
            (instance ?OBJ ?CLASS2)
            (instance ?OBJ ?CLASS3)
		(instance ?OBJ ?CLASS4)))))

(=>
   (exhaustiveDecomposition ?CLASS1 ?CLASS2 ?CLASS3 ?CLASS4 ?CLASS5)
   (forall (?OBJ)
      (=>
         (instance ?OBJ ?CLASS1)
         (or
            (instance ?OBJ ?CLASS2)
            (instance ?OBJ ?CLASS3)
		(instance ?OBJ ?CLASS4)
		(instance ?OBJ ?CLASS5)))))

(instance disjointDecomposition VariableArityRelation)
(domain disjointDecomposition 1 Class)
(relatedInternalConcept disjointDecomposition exhaustiveDecomposition)
(relatedInternalConcept disjointDecomposition disjoint)
(documentation disjointDecomposition "A &%disjointDecomposition of a &%Class 
C is a set of subclasses of C that are mutually &%disjoint.")

(forall (?INT) (domain disjointDecomposition ?INT Class))

(=>
   (disjointDecomposition ?CLASS1 ?CLASS2 ?CLASS3)
   (and
      (subclass ?CLASS2 ?CLASS1)
      (subclass ?CLASS3 ?CLASS1)
      (disjoint ?CLASS2 ?CLASS3)))

(=>
   (disjointDecomposition ?CLASS1 ?CLASS2 ?CLASS3 ?CLASS4)
   (and
      (subclass ?CLASS2 ?CLASS1)
      (subclass ?CLASS3 ?CLASS1)
	(subclass ?CLASS4 ?CLASS1)
      (disjoint ?CLASS2 ?CLASS3)
	(disjoint ?CLASS3 ?CLASS4)
  	(disjoint ?CLASS2 ?CLASS4)))

(=>
   (disjointDecomposition ?CLASS1 ?CLASS2 ?CLASS3 ?CLASS4 ?CLASS5)
   (and
      (subclass ?CLASS2 ?CLASS1)
      (subclass ?CLASS3 ?CLASS1)
	(subclass ?CLASS4 ?CLASS1)
	(subclass ?CLASS5 ?CLASS1)
      (disjoint ?CLASS2 ?CLASS3)
	(disjoint ?CLASS3 ?CLASS4)
  	(disjoint ?CLASS2 ?CLASS4)
	(disjoint ?CLASS5 ?CLASS4)
	(disjoint ?CLASS5 ?CLASS3)
 	(disjoint ?CLASS5 ?CLASS2)))

(subrelation partition exhaustiveDecomposition)
(subrelation partition disjointDecomposition)
(documentation partition "A &%partition of a class C is a set of 
mutually &%disjoint classes (a subclass partition) which covers C.  
Every instance of C is an instance of exactly one of the subclasses 
in the partition.")

(instance singleValued AsymmetricRelation)
(domain singleValued 1 Predicate)
(domain singleValued 2 Integer)
(documentation singleValued "(&%singleValued ?REL ?INT) means 
that the argument position of ?REL corresponding to ?INT is 
single-valued, i.e. an assignment of values to the other argument 
positions determines a unique value for the argument position 
corresponding to ?INT.") 

(=>
   (and
      (singleValued ?PRED 1)
      (holds ?PRED ?INST1 ?INST2)
      (holds ?PRED ?INST3 ?INST2))
   (equal ?INST1 ?INST3))

(=>
   (and
      (singleValued ?PRED 2)
      (holds ?PRED ?INST2 ?INST1)
      (holds ?PRED ?INST2 ?INST3))
   (equal ?INST1 ?INST3))

(=>
   (and
      (singleValued ?PRED 1)
      (holds ?PRED ?INST1 ?INST2 ?INST3)
      (holds ?PRED ?INST4 ?INST2 ?INST3))
   (equal ?INST1 ?D))

(=>
   (and
      (singleValued ?PRED 2)
      (holds ?PRED ?INST1 ?INST2 ?INST4)
      (holds ?PRED ?INST1 ?INST3 ?INST4))
   (equal ?INST2 ?INST3))

(=>
   (and
      (singleValued ?PRED 3)
      (holds ?PRED ?INST1 ?INST2 ?INST3)
      (holds ?PRED ?INST1 ?INST2 ?INST4))
   (equal ?INST3 ?INST4))

(instance relatedInternalConcept EquivalenceRelation)
(domain relatedInternalConcept 1 Entity)
(domain relatedInternalConcept 2 Entity)
(documentation relatedInternalConcept "Means that the two arguments are 
related concepts within the SUMO, i.e. there is a significant similarity 
of meaning between them.  To indicate a meaning relation between a SUMO 
concept and a concept from another source, use the Predicate 
&%relatedExternalConcept.")

(subrelation synonymousInternalConcept relatedInternalConcept)
(documentation synonymousInternalConcept "(&%synonymousInternalConcept 
?ENTITY1 ?ENTITY2) means that the SUMO concepts ?ENTITY1 and ?ENTITY2 
are distinct and yet have the same meaning.")

(instance relatedExternalConcept TernaryPredicate)
(domain relatedExternalConcept 1 Entity)
(domain relatedExternalConcept 2 SymbolicString)
(domain relatedExternalConcept 3 Language)
(relatedInternalConcept relatedExternalConcept relatedInternalConcept)
(documentation relatedExternalConcept "Used to signify a three-place 
relation between a concept in the SUMO, a related concept in another 
knowledge source, and the name of the other knowledge source.")

(subrelation synonymousExternalConcept relatedExternalConcept)
(documentation synonymousExternalConcept "(&%synonymousExternalConcept 
?THING ?STRING ?LANGUAGE) means that the SUMO concept ?THING has the 
same meaning as ?STRING in ?LANGUAGE.")

(=>
   (synonymousExternalConcept ?THING ?STRING ?LANGUAGE)
   (not
      (or
         (subsumedExternalConcept ?THING ?STRING ?LANGUAGE)
	   (subsumingExternalConcept ?THING ?STRING ?LANGUAGE))))

(subrelation subsumingExternalConcept relatedExternalConcept)
(documentation subsumingExternalConcept "(&%subsumingExternalConcept 
?THING ?STRING ?LANGUAGE) means that the SUMO concept ?THING subsumes 
the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader 
in meaning than ?STRING.")

(=>
   (subsumingExternalConcept ?THING ?STRING ?LANGUAGE)
   (not
      (or
         (subsumedExternalConcept ?THING ?STRING ?LANGUAGE)
	   (synonymousExternalConcept ?THING ?STRING ?LANGUAGE))))

(subrelation subsumedExternalConcept relatedExternalConcept)
(documentation subsumedExternalConcept "(&%subsumedExternalConcept 
?THING ?STRING ?LANGUAGE) means that the SUMO concept ?THING is subsumed 
by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower 
in meaning than ?STRING.")

(=>
   (subsumedExternalConcept ?THING ?STRING ?LANGUAGE)
   (not
      (or
         (subsumingExternalConcept ?THING ?STRING ?LANGUAGE)
	   (synonymousExternalConcept ?THING ?STRING ?LANGUAGE))))

(instance subAttribute PartialOrderingRelation)
(domain subAttribute 1 Attribute)
(domain subAttribute 2 Attribute)
(documentation subAttribute "Means that the second argument can be 
ascribed to everything which has the first argument ascribed to it.")

(<=>
   (subAttribute ?ATTR1 ?ATT2)
   (forall (?OBJ)
      (=>
         (attribute ?OBJ ?ATTR1)
         (attribute ?OBJ ?ATTR2))))

(instance successorAttribute AsymmetricRelation)
(domain successorAttribute 1 Attribute)
(domain successorAttribute 2 Attribute)
(documentation successorAttribute "(&%successorAttribute ?ATTR1 ?ATTR2) 
means that ?ATTR2 is the attribute that comes immediately after ?ATTR1 
on the scale that they share.")

(instance successorAttributeClosure TransitiveRelation)
(instance successorAttributeClosure IrreflexiveRelation)
(domain successorAttributeClosure 1 Attribute)
(domain successorAttributeClosure 2 Attribute)
(relatedInternalConcept successorAttributeClosure successorAttribute)
(documentation successorAttributeClosure "The transitive closure of 
&%successorAttribute.  (&%successorAttributeClosure ?ATTR1 ?ATTR2) means 
that there is a chain of &%successorAttribute assertions connecting 
?ATTR1 and ?ATTR2.") 

(=>
   (successorAttribute ?ATTR1 ?ATTR2)
   (successorAttributeClosure ?ATTR1 ?ATTR2))

(instance KappaFn BinaryFunction)
(domain KappaFn 1 SymbolicString)
(domain KappaFn 2 Formula)
(range KappaFn Class)
(documentation KappaFn "A class-forming operator that takes two 
arguments:  a variable and a formula containing at least one unbound 
occurrence of the variable.  The result of applying &%KappaFn to a 
variable and a formula is the &%Class of things that satisfy the formula.  
For example, we can denote the &%Class of prime numbers that are less 
than 100 with the following expression:  (KappaFn ?NUMBER 
(and (instance ?NUMBER PrimeNumber) (lessThan ?NUMBER 100)))")

(instance TruthFn UnaryFunction)
(domain TruthFn 1 Sentence)
(domain TruthFn 2 TruthValue)
(documentation TruthFn "The function mapping &%Sentences to 
&%TruthValues.")

(instance and SententialOperator)
(domain and 1 Formula)
(domain and 2 Formula)
(documentation and "The truth-functional connective of conjunction.")

(instance or SententialOperator)
(domain or 1 Formula)
(domain or 2 Formula)
(documentation or "The truth-functional connective of disjunction.")

(instance => SententialOperator)
(domain => 1 Formula)
(domain => 2 Formula)
(documentation => "The truth-functional connective of implication.")

(instance <=> SententialOperator)
(domain <=> 1 Formula)
(domain <=> 2 Formula)
(documentation <=> "The truth-functional connective of bi-implication.")

(instance not SententialOperator)
(domain not 1 Formula)
(documentation not "The truth-functional connective of negation.")


;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                   ;;
;;                         ONTOLOGY PROPER                           ;;
;;                                                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;
;;   GENERAL CLASSES   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following hierarchy incorporates content from Sowa, Russell & Norvig, 
;; and the top-level ontology from ITBM-CNR. 

(documentation Entity "The universal class of individuals.  This is the root 
node of the ontology.")

;; Everything is an entity (due to Robert E. Kent).

(forall (?THING) (instance ?THING Entity))

;; There are entities.  (In standard FOPC, this axiom is redundant, since it is 
;; implied by the one above.  However, it is included here in case a "free 
;; logic" or similar, nonstandard interpretation of the ontology is adopted).

(exists (?THING) (instance ?THING Entity))

;; Every class is a subclass of Entity, and vice versa.

(<=> 
	(instance ?CLASS Class)
      (subclass ?CLASS Entity))

(subclass Physical Entity)
(documentation Physical "An entity that has a location in space-time.  
Note that locations are themselves understood to have a location in 
space-time")

;; Something is Physical just in case it exists at some location at some time.

(<=> 
	(instance ?PHYS Physical)
	(exists (?LOC ?TIME)
     		(and 
			(located ?PHYS ?LOC)
                  (existant ?PHYS ?TIME))))

(subclass Abstract Entity)
(documentation Abstract "Properties or qualities as distinguished from any 
particular embodiment of the properties/qualities in a physical medium.  
Instances of Abstract can be said to exist in the same sense as mathematical 
objects such as sets and relations, but they cannot exist at a particular 
place and time without some physical encoding or embodiment.")

;; Something is Abstract just in case it has neither a spatial nor temporal 
;; location.

(<=> 
	(instance ?ABS Abstract)
      	(not 
	      (exists (?POINT) 
                   (or 
		        (located ?ABS ?POINT)
                    (existant ?ABS ?POINT)))))

;; Abstract and Physical are disjoint. 

(disjoint Abstract Physical)

(subclass Object Physical)
(documentation Object "Corresponds roughly to the class of ordinary 
physical objects. An &%Object is thought of as continuing through time, 
but at any particular time is all there is at that time, in contrast to 
something that is thought of as being divided into stages (contrast &%Process). 
Examples include normal physical objects, geographical regions, and 
locations of &%Processes.  The formal definition is that all the parts of 
an &%Object are present at the same time that the &%Object is; in other 
words, an &%Object cannot have 'parts' which are separated in time, such 
as the first and second halves of a football game.  Note that the parts 
of an &%Object may change from time to time, and that every &%Object 
occupies exactly the same space and time as a &%Process (its lifespan).  
In a 4D ontology, an &%Object is something whose spatiotemporal extent 
is thought of as dividing into spatial parts roughly parallel to the 
time-axis.")

(subclass Process Physical)
(documentation Process "Intuitively, the class of things that happen 
rather than endure.  A &%Process is thought of as having temporal parts 
or stages, and so it cannot have all these parts together at one time 
(contrast &%Object).  Examples include extended 'events' such as a football 
match or a race, events and actions of various kinds, states of motion and 
lifespans of &%Objects, which occupy the same space and time but are thought 
of as having stages instead of parts. The formal definition is: anything 
that lasts for a time but is not an &%Object.  Note that a &%Process may 
have participants 'inside' it which are &%Objects, such as the players 
in a football match.  In a 4D ontology, a &%Process is something whose 
spatiotemporal extent is thought of as dividing into temporal stages 
roughly perpendicular to the time-axis.")

;; An Object exists (and, hence, retains its identity) over time, i.e., 
;; an object exists at every point over some interval of time.

(=> 
    (instance ?OBJ Object)
    (exists (?TIME1 ?TIME2)
       (and 
          (instance ?TIME1 TimePoint) 
          (instance ?TIME2 TimePoint) 
          (before ?TIME1 ?TIME2)
          (forall (?TIME)
             (=> 
	         (and 
		     (beforeEq ?TIME1 ?TIME) 
                 (beforeEq ?TIME ?TIME2))
               (existant ?OBJ ?TIME))))))

;; Object and Process are disjoint.

(disjoint Object Process)

;; Each temporal part of a Process exists at some timepoint.

(=> 
	(and 
            (instance ?PROC Process)
            (subProcess ?SUBPROC ?PROC))
     	(exists (?TIME)
      	    (existant ?SUBPROC ?TIME)))
        
;; Processes have temporal parts.

(=> 
      (instance ?PROC Process)
      (exists (?SUBPROC)
          (subProcess ?SUBPROC ?PROC)))
  
;; Objects have spatial parts.

(=> 
      (instance ?OBJ Object)
      (exists (?PART)
          (part ?PART ?OBJ)))

(subclass NaturalProcess Process)
(documentation NaturalProcess "A &%Process that occurs irrespective 
of the intentions of &%Humans or &%Animals.")

(subclass IntentionallyCausedProcess Process)
(disjoint IntentionallyCausedProcess NaturalProcess)
(documentation IntentionallyCausedProcess "A &%Process that is 
deliberately set in motion by a &%CognitiveAgent.") 

(=>
   (and
      (instance ?PROC IntentionallyCausedProcess)
      (agent ?PROC ?AGENT))
   (and
      (instance ?AGENT CognitiveAgent)
      (exists (?PURP)
         (hasPurposeForAgent ?PROC ?PURP ?AGENT))))

(=>
   (instance ?PROC IntentionallyCausedProcess)
   (exists (?AGENT)
      (and
         (instance ?AGENT CognitiveAgent)
         (agent ?PROC ?AGENT))))

(subclass Activity IntentionallyCausedProcess)
(documentation Activity "The class of &%IntentionallyCausedProcesses 
that are typically carried out for an extended time and in some way 
are 'institutionalized' or at least customary or conventional.")

(subclass RecreationalActivity Activity)
(documentation RecreationalActivity "An &%Activity that is carried out 
for the purpose of recreation.")

(subclass ExerciseActivity Activity)
(documentation ExerciseActivity "An &%Activity that is carried out for 
the purpose of exercise.")

(subclass TherapeuticActivity Activity)
(documentation TherapeuticActivity "An &%Activity that is carried out 
for the purpose of curing, improving or reducing the pain associated 
with a &%DiseaseOrSyndrome.") 

(subclass EducationalActivity Activity)
(documentation EducationalActivity "An &%Activity related to the 
organization and provision of education.")

(=>
   (instance ?ACT EducationalActivity)
   (exists (?PROC)
      (and
         (instance ?PROC Learning)
         (subProcess ?PROC ?ACT))))

(subclass OrganizationalActivity Activity)
(documentation OrganizationalActivity "An &%Activity that is carried out 
within an &%Organization.")

(=>
   (and
      (instance ?ACT OrganizationalActivity)
      (agent ?ACT ?AGENT))
   (exists (?ORG)
      (and
         (instance ?ORG Organization)
         (member ?AGENT ?ORG))))

(subclass Graduation OrganizationalActivity)
(documentation Graduation "The &%Activity of graduating from an 
&%EducationalOrganization.")

(subclass RegulatoryActivity OrganizationalActivity)
(documentation RegulatoryActivity "An &%OrganizationalActivity carried 
out by officially constituted governments, or an &%OrganizationalActivity 
related to the creation or enforcement of the rules or regulations 
governing some field of endeavor.")

(subclass Planning RegulatoryActivity)
(documentation Planning "Specifying a set of actions in order to meet a 
set of goals or objectives.")

(subclass OccupationalActivity OrganizationalActivity)
(documentation OccupationalActivity "An &%OrganizationalActivity carried 
out as part of an occupation or job.")

(=>
   (instance ?ACT OccupationalActivity)
   (exists (?ORG ?EMP)
      (and
         (instance ?ORG Organization)
         (employs ?ORG ?EMP)
         (agent ?ACT ?EMP))))

(subclass Increasing Process)
(disjoint Increasing Decreasing)
(relatedInternalConcept Increasing Putting)
(documentation Increasing "Any &%Process where a &%PhysicalQuantity associated 
with the &%patient is increased.")

(=>
   (and
      (instance ?INCREASE Increasing)
      (patient ?INCREASE ?OBJ))
   (exists (?UNIT ?QUANT1 ?QUANT2)
   	(and
         (holdsDuring (ImmediatePastFn (WhenFn ?INCREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
	   (holdsDuring (ImmediateFutureFn (WhenFn ?INCREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
	   (greaterThan ?QUANT2 ?QUANT1)))) 

(subclass Decreasing Process)
(relatedInternalConcept Decreasing Removing)
(documentation Increasing "Any &%Process where a &%PhysicalQuantity associated 
with the &%patient is decreased.")

(=>
   (and
      (instance ?DECREASE Decreasing)
      (patient ?DECREASE ?OBJ))
   (exists (?UNIT ?QUANT1 ?QUANT2)
   	(and
         (holdsDuring (ImmediatePastFn (WhenFn ?DECREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
	   (holdsDuring (ImmediateFutureFn (WhenFn ?DECREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
	   (lessThan ?QUANT2 ?QUANT1)))) 

(subclass Motion Process)
(documentation Motion "Any &%Process of movement.")

(=>
   (and
      (instance ?MOTION Motion)
      (patient ?MOTION ?OBJ)
      (origin ?MOTION ?PLACE))
   (holdsDuring (ImmediatePastFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE)))

(=>
   (and
      (instance ?MOTION Motion)
      (patient ?MOTION ?OBJ)
      (destination ?MOTION ?PLACE))
   (holdsDuring (ImmediateFutureFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE)))

(subclass BodyMotion Motion)
(documentation BodyMotion "Any &%Motion where the &%patient is a &%BodyPart.")

(=>
   (instance ?MOTION BodyMotion)
   (exists (?OBJ)
      (and
         (instance ?OBJ BodyPart)
         (patient ?MOTION ?OBJ))))

(subclass Walking BodyMotion)
(documentation Walking "Any &%BodyMotion which is accomplished by 
means of the legs of an &%Organism on land for the purpose of moving 
from one point to another.") 

(subclass Swimming BodyMotion)
(documentation Swimming "Any deliberate and controlled &%BodyMotion 
through water that is accomplished by an &%Organism.")

(subclass Dancing BodyMotion)
(documentation Dancing "Any &%BodyMotion of &%Humans which is 
deliberately coordinated with music.")

(subclass DirectionChange Motion)
(documentation DirectionChange "The act of changing the direction in 
which the &%patient of the act is oriented.")

(=>
   (instance ?PROC DirectionChange)
   (exists (?ATTR)
      (and
         (instance ?ATTR DirectionAttribute)
         (or
            (and
               (holdsDuring (ImmediatePastFn (WhenFn ?PROC)) (attribute ?PROC ?ATTR))
               (holdsDuring (ImmediateFutureFn (WhenFn ?PROC)) (not (attribute ?PROC ?ATTR))))
            (and
               (holdsDuring (ImmediateFutureFn (WhenFn ?PROC)) (attribute ?PROC ?ATTR))
               (holdsDuring (ImmediatePastFn (WhenFn ?PROC)) (not (attribute ?PROC ?ATTR))))))))

(subclass Transfer Motion)
(documentation Transfer "Any &%instance of &%Motion where the &%agent 
of the &%Motion and the &%patient of the &%Motion are not the same 
thing.")

(=>
   (and
      (instance ?TRANSFER Transfer)
      (agent ?TRANSFER ?AGENT)
      (patient ?TRANSFER ?PATIENT))
   (not
      (equal ?AGENT ?PATIENT)))

(subclass Removing Transfer)
(documentation Removing "The &%Class of &%Processes where something is 
taken away from a location.  Note that the thing removed and the location 
are specified with the &%CaseRoles &%patient and &%origin, respectively.")

(=>
   (and
      (instance ?REMOVE Removing)
      (origin ?REMOVE ?PLACE)
      (patient ?REMOVE ?OBJ))
   (and
      (holdsDuring (ImmediatePastFn (WhenFn ?REMOVE)) (located ?OBJ ?PLACE))
      (holdsDuring (ImmediateFutureFn (WhenFn ?REMOVE)) (not (located ?OBJ ?PLACE)))))

(subclass Cleaning Removing)
(documentation Cleaning "The &%Class of &%Processes where undesirable 
&%Substances and/or &%Microorganisms are removed from an &%Object.")

(subclass Putting Transfer)
(documentation Putting "The &%Class of &%Processes where something is put 
in a location.  Note that the location is specified with the &%CaseRole 
&%destination.")

(=>
   (and
      (instance ?PUT Putting)
      (destination ?PUT ?PLACE)
      (patient ?PUT ?OBJ))
   (and
      (holdsDuring (ImmediatePastFn (WhenFn ?PUT)) (not (located ?OBJ ?PLACE)))
      (holdsDuring (ImmediateFutureFn (WhenFn ?PUT)) (located ?OBJ ?PLACE))))

(subclass Impelling Transfer)
(documentation Impelling "The &%subclass of &%Transfer where the &%patient 
travels through space by means of a sudden, forceful event.  Some examples 
would be shooting, throwing, tossing, etc.")

(subclass Shooting Impelling)
(documentation Shooting "The &%subclass of &%Impelling where the &%patient 
is a projectile that is fired through the air by means of some sort of 
&%Device.")

(subclass Transportation Motion)
(relatedInternalConcept Transportation TransportationDevice)
(documentation Transportation "The &%Motion of something 
from one point to another by means of a &%TransportationDevice.")

(=>
   (instance ?TRANS Transportation)
   (exists (?DEVICE)
         (and
            (instance ?DEVICE TransportationDevice)
            (instrument ?TRANS ?DEVICE))))

(subclass ChangeOfPossession IntentionallyCausedProcess)
(relatedInternalConcept ChangeOfPossession possesses)
(documentation ChangeOfPossession "The &%Class of &%Processes where 
ownership of something is transferred from one &%Agent to another.")

(=>
   (and
      (instance ?CHANGE ChangeOfPossession)
      (patient ?CHANGE ?OBJ)
      (holdsDuring (ImmediatePastFn (WhenFn ?CHANGE)) (possesses ?AGENT1 ?OBJ))
      (holdsDuring (ImmediateFutureFn (WhenFn ?CHANGE)) (possesses ?AGENT2 ?OBJ)))
   (not
      (equal ?AGENT1 ?AGENT2)))

(subclass Giving ChangeOfPossession)
(documentation Giving "The &%subclass of &%ChangeOfPossession where the 
&%agent gives the &%destination something.")

(=>
   (and
      (instance ?GIVE Giving)
      (agent ?GIVE ?AGENT1)
      (destination ?GIVE ?AGENT2)
      (instance ?AGENT2 Agent)
      (patient ?GIVE ?OBJ))
   (and
      (holdsDuring (ImmediatePastFn (WhenFn ?GIVE)) (possesses ?AGENT1 ?OBJ))
      (holdsDuring (ImmediateFutureFn (WhenFn ?GIVE)) (possesses ?AGENT2 ?OBJ))))

(subclass Getting ChangeOfPossession)
(documentation Getting "The &%subclass of &%ChangeOfPossession where the
&%agent gets something.  Note that the source from which something is 
obtained is specified with the &%origin &%CaseRole.")

(=>
   (and
      (instance ?GET Getting)
      (agent ?GET ?AGENT1)
      (origin ?GET ?AGENT2)
      (instance ?AGENT2 Agent)
      (patient ?GET ?OBJ))
   (exists (?GIVE)
      (and
         (instance ?GIVE Giving)
         (agent ?GIVE ?AGENT2)
         (destination ?GIVE ?AGENT1)
         (patient ?GIVE ?OBJ))))

(subclass Transaction ChangeOfPossession)
(documentation Transaction "The &%subclass of &%ChangeOfPossession where 
something is exchanged for something else.")

(=>
   (instance ?TRANS Transaction)
   (exists (?AGENT1 ?AGENT2 ?GIVE1 ?GIVE2 ?OBJ1 ?OBJ2)
      (and
         (instance ?GIVE1 Giving)
         (instance ?GIVE2 Giving)
	 (subProcess ?GIVE1 ?TRANS)
   	 (subProcess ?GIVE2 ?TRANS)
         (agent ?GIVE1 ?AGENT1)
         (agent ?GIVE2 ?AGENT2)
         (patient ?GIVE1 ?OBJ1)
         (patient ?GIVE2 ?OBJ2)
         (destination ?GIVE1 ?AGENT2)
         (destination ?GIVE2 ?AGENT1)
         (not
            (equal ?AGENT1 ?AGENT2))
         (not
            (equal ?OBJ1 ?OBJ2)))))

(subclass FinancialTransaction Transaction)
(documentation FinancialTransaction "A &%Transaction where an instance 
of &%CurrencyMeasure is exchanged for something else.")

(subclass Betting FinancialTransaction)
(documentation Betting "A &%FinancialTransaction where an instance of 
&%CurrencyMeasure is exchanged for the possibility of winning a larger 
instance of &%CurrencyMeasure within the context of some sort of 
&%Game.")

(subclass Buying FinancialTransaction)
(relatedInternalConcept Buying Selling)
(documentation Buying "A &%FinancialTransaction in which an instance of 
&%CurrencyMeasure is exchanged for an instance of &%Physical.")

(subclass Selling FinancialTransaction)
(documentation Selling "A &%FinancialTransaction in which an instance of 
&%Physical is exchanged for an instance of &%CurrencyMeasure.")

(<=>
   (and
      (instance ?BUY Buying)
      (agent ?BUY ?AGENT1)
      (origin ?BUY ?AGENT2)
      (patient ?BUY ?OBJECT))
   (and 
      (instance ?SELL Selling)
      (agent ?SELL ?AGENT2)
      (destination ?SELL ?AGENT1)
      (patient ?SELL ?OBJECT)))

(subclass Learning MentalProcess)
(documentation Learning "The &%Class of &%Processes which relate to the 
acquisition of information.")

(=>
   (and
      (instance ?LEARN Learning)
      (agent ?LEARN ?AGENT))
   (instance ?AGENT CognitiveAgent))

(=>
   (holdsDuring ?TIME
      (exists (?LEARN)
         (and
            (instance ?LEARN Learning)
            (agent ?LEARN ?AGENT)
            (patient ?LEARN ?PROP))))
   (holdsDuring (ImmediateFutureFn ?TIME)
      (believes ?AGENT ?PROP)))

(subclass Identifying Learning)
(documentation Identifying "The &%Class of &%Learning &%Processes which 
involve attaching a name or category to a thing or set of things.  
Note that &%Identifying is distinguished from &%Learning by the fact 
that the latter covers the acquisition by a &%CognitiveAgent of any 
&%Proposition, while the former covers only those cases involving the 
assignment of a label or category.")

(subclass Deducing Learning)
(documentation Deducing "The &%Class of &%Learning &%Processes which 
involve concluding, on the basis of either deductive or inductive evidence, 
that a particular &%Proposition or &%Sentence is true.")

(subclass Selecting MentalProcess)
(documentation Selecting "The &%Class of &%MentalProcesses which involve 
opting for one or more &%Entity out of a larger set of &%Entities.")

(subclass Comparing MentalProcess)
(documentation Comparing "The &%Class of &%MentalProcesses which 
involve comparing, relating, contrasting, etc. the properties of 
two or more &%Entities.")

(subclass Predicting MentalProcess)
(documentation Predicting "The &%Class of &%MentalProcesses which 
involve the formulation of a &%Proposition about a state of affairs 
which might be realized in the future.")

(subclass Arranging IntentionallyCausedProcess)
(documentation Arranging "The &%Class of &%IntentionallyCausedProcesses 
where the order of &%Objects in a &%Collection is altered.")

(subclass Opening Process)
(relatedInternalConcept Opening Closing)
(documentation Opening "The &%Class of &%Processes where an aperture is 
created in an &%Object.  Note that the aperture may be created intentionally, 
as when one opens a door, or unintentionally, as when the ground ruptures 
in a seismic event.")

(subclass Closing Process)
(documentation Closing "The &%Class of &%Processes where an aperture is 
closed in an &%Object.")

(subclass Keeping IntentionallyCausedProcess)
(documentation Keeping "The &%Class of &%Processes where the &%agent 
keeps something in a particular location for an extended period of time.")

(subclass Maintaining IntentionallyCausedProcess)
(documentation Maintaining "The &%Class of &%Processes where the &%agent 
cares for or maintains the &%Object.")

(subclass Repairing IntentionallyCausedProcess)
(relatedInternalConcept Repairing Maintaining)
(documentation Repairing "The &%Class of &%Processes where the &%agent 
makes a modification or series of modifications to an &%Object that is not 
functioning as intended so that it works properly.")

(subclass Concealing IntentionallyCausedProcess)
(documentation Concealing "The &%Class of &%Processes where something is 
moved out of view.")

(subclass Revealing IntentionallyCausedProcess)
(disjoint Revealing Concealing)
(documentation Revealing "The &%Class of &%Processes where something is 
moved into view.")

(subclass Impacting Process)
(documentation Impacting "The &%Class of &%Processes where something comes 
into sudden, forceful, physical contact with something else.  Some examples 
would be striking, knocking, whipping etc.")

(=>
   (and
      (instance ?IMPACT Impacting)
      (instrument ?IMPACT ?INST)
      (patient ?IMPACT ?PLACE))
   (holdsDuring (WhenFn ?IMPACT) (connected ?INST ?PLACE)))

(subclass Striking Impacting)
(subclass Striking IntentionallyCausedProcess)
(documentation Striking "The &%Class of &%Impactings that are 
intentionally caused by a &%CognitiveAgent.")

(subclass Poking IntentionallyCausedProcess)
(documentation Poking "The &%Class of &%Processes where the &%agent brings 
a something long and narrow into contact with an &%Object and, in some cases, 
pierces the surface of the &%Object.")

(=>
   (and
      (instance ?POKE Poking)
      (agent ?POKE ?AGENT)
      (patient ?POKE ?OBJ)
      (instrument ?POKE ?INST))
   (holdsDuring (WhenFn ?POKE) (connects ?INST ?AGENT ?OBJ)))

(subclass Touching IntentionallyCausedProcess)
(documentation Touching "The &%Class of &%Processes where there is immediate 
physical contact between an &%Organism and another &%Object.")

(=>
   (and
      (instance ?TOUCH Touching)
      (agent ?TOUCH ?AGENT)
      (patient ?TOUCH ?OBJ))
   (holdsDuring (WhenFn ?TOUCH) (connected ?AGENT ?OBJ)))

(subclass Holding Touching)
(documentation Holding "The &%Class of &%Processes where the &%agent 
maintains physical contact with something for an extended period of time.")

(subclass Attaching Process)
(disjoint Attaching Detaching)
(relatedInternalConcept Attaching Putting)
(documentation Attaching "A &%Process where the &%agent attaches one thing 
to something else.  Note that this is different from &%Putting in that two 
things which are attached may already be in the same location.")

(subclass Tying Attaching)
(documentation Tying "The &%Process of tying two things, or two strands 
of the same thing, together.")

(subclass Detaching Process)
(documentation Detaching "A &%Process where the &%agent detaches one thing 
from something else.  Note that this is different from &%Removing in that 
neither of the two things which are detached may be removed from the location 
where it was attached.")  

(subclass Untying Detaching)
(disjoint Untying Tying)
(documentation Untying "The &%Process of untying two things, or two strands 
of the same thing.")

(subclass Cutting Detaching)
(documentation Cutting "The &%subclass of &%Separating &%Processes which 
involve a relatively sharp &%instrument.") 

(subclass Combining Process)
(documentation Combining "A &%Process where two or more things are combined 
into a single thing.")

(subclass Separating Process)
(disjoint Separating Combining)
(documentation Separating "A &%Process where something is disassembled 
into (some of) its parts.")

(subclass Decorating IntentionallyCausedProcess)
(relatedInternalConcept Decorating SurfaceAlteration)
(documentation Decorating "The act of modifying or embellishing something 
with the aim of making it more aesthetically pleasing.")

(subclass ShapeAlteration Process)
(documentation ShapeAlteration "The act of changing the shape of an 
&%Object.")

(=>
   (and
      (instance ?ALT ShapeAlteration)
      (patient ?ALT ?OBJ))
   (exists (?PROPERTY)
      (and
         (instance ?PROPERTY ShapeProperty)
         (or
            (and
               (holdsDuring (ImmediatePastFn (WhenFn ?ALT)) (attribute ?OBJ ?PROPERTY))
               (holdsDuring (ImmediateFutureFn (WhenFn ?ALT)) (not (attribute ?OBJ ?PROPERTY))))
            (and
               (holdsDuring (ImmediatePastFn (WhenFn ?ALT)) (not (attribute ?OBJ ?PROPERTY)))
               (holdsDuring (ImmediateFutureFn (WhenFn ?ALT)) (attribute ?OBJ ?PROPERTY)))))))

(subclass SurfaceAlteration Process)
(documentation SurfaceAlteration "The act of changing the appearance of the 
surface of an &%Object.")

(subclass Coloring SurfaceAlteration)
(documentation Coloring "The &%subclass of &%SurfaceAlteration where a 
&%ColorProperty of the &%patient is altered.")

(=>
   (and
      (instance ?COLORING Coloring)
      (patient ?COLORING ?OBJ))
   (exists (?PROPERTY)
      (and
         (holdsDuring (ImmediatePastFn (WhenFn ?COLORING)) (attribute ?OBJ ?PROPERTY))
         (holdsDuring (ImmediateFutureFn (WhenFn ?COLORING)) (not (attribute ?OBJ ?PROPERTY)))))) 

(subclass Grooming IntentionallyCausedProcess)
(documentation Grooming "The &%subclass of &%Process where parts of an 
&%Organism are arranged in a socially pleasing manner.  Some examples are 
shaving, brushing, combing, etc.") 

(subclass ContentTransformation IntentionallyCausedProcess)
(documentation ContentTransformation "A &%subclass of 
&%IntentionallyCausedProcess in which content is transcribed or 
created anew.")

(subclass Wetting Process)
(documentation Wetting "The &%Class of &%Processes where &%Water is added to an &%Object.")

(=>
   (and
      (instance ?WET Wetting)
      (patient ?WET ?OBJ))
   (holdsDuring (ImmediateFutureFn (WhenFn ?WET))
      (or
         (attribute ?OBJ Wet)
         (attribute ?OBJ Damp))))

(subclass Drying Process)
(documentation Drying "The &%Class of &%Processes where water is removed 
from an &%Object.")

(=>
   (and
      (instance ?DRY Drying)
      (patient ?DRY ?OBJ))
   (holdsDuring (ImmediateFutureFn (WhenFn ?DRY))
      (or
         (attribute ?OBJ Anhydrous)
         (attribute ?OBJ Dry))))

(subclass Creation Process)
(documentation Creation "The &%subclass of &%Process in which 
something is created.  Note that the thing created is specified 
with the &%result &%CaseRole.")

(=>
   (instance ?ACTION Creation)
   (exists (?RESULT)
      (result ?ACTION ?RESULT)))

(<=>
   (instance ?PROCESS Creation)
   (exists (?PATIENT)
      (and 
         (patient ?PROCESS ?PATIENT)
         (existant ?PATIENT (ImmediateFutureFn(WhenFn ?PROCESS))) 
         (not 
            (existant ?PATIENT (ImmediatePastFn (WhenFn ?PROCESS)))))))

(subclass Making Creation)
(documentation Making "The &%subclass of &%Creation in which an 
&%Artifact is made.")

(=>
   (instance ?MAKE Making)
   (exists (?ARTIFACT)
      (and
         (instance ?ARTIFACT Artifact)
         (result ?MAKE ?ARTIFACT))))

(subclass Manufacture Making)
(documentation Manufacture "The &%Making of &%Artifacts on a mass 
scale.")

(subclass Cooking Making)
(documentation Cooking "The &%Making of an &%instance of &%Food.")
         
(subclass Destruction Process)
(documentation Destruction "The &%subclass of &%Process in which 
the &%patient (or an essential element of the &%patient) is destroyed.")

(<=>
   (instance ?PROCESS Destruction)
   (exists (?PATIENT)
      (and 
         (patient ?PROCESS ?PATIENT)
         (existant ?PATIENT (ImmediatePastFn(WhenFn ?PROCESS))) 
         (not 
            (existant ?PATIENT (ImmediateFutureFn (WhenFn ?PROCESS)))))))

(subclass Killing Destruction)
(documentation Killing "The &%subclass of &%Destruction in which the 
death of an &%Organism is caused by an &%Organism.  Note that in cases 
of suicide the &%Organism would be the same in both cases.")

(=>
   (and
      (instance ?KILL Killing)
      (agent ?KILL ?AGENT)
      (patient ?KILL ?PATIENT))
   (and
      (instance ?AGENT Organism)
      (instance ?PATIENT Organism)))

(=>
   (and
      (instance ?KILL Killing)
      (patient ?KILL ?PATIENT))
   (and
      (holdsDuring (ImmediatePastFn (WhenFn ?KILL)) (attribute ?PATIENT Living))
      (holdsDuring (ImmediateFutureFn (WhenFn ?KILL)) (attribute ?PATIENT Dead))))

(subclass Searching IntentionallyCausedProcess)
(documentation Searching "Any &%Process where the aim is to find 
something, whether it be information (i.e. a &%Proposition) or an 
&%Object.")

(=>
   (and
      (instance ?SEARCH Searching)
      (agent ?SEARCH ?AGENT)
      (patient ?SEARCH ?ENTITY))
   (inScopeOfInterest ?AGENT ?ENTITY))

(subclass Pursuing Searching)
(documentation Pursuing "The &%subclass of &%Searching where the thing 
sought is an &%Object.  Some examples would be hunting, shopping, 
trawling, and stalking.")

(=>
   (and
      (instance ?PURSUE Pursuing)
      (agent ?PURSUE ?AGENT)
      (patient ?PURSUE ?OBJ))
   (wants ?AGENT ?OBJ))

(subclass Investigating Searching)
(documentation Investigating "The &%subclass of &%Searching where the 
thing sought is a piece of information (i.e. a &%Proposition denoted by 
a &%Formula).") 

(=>
   (and
      (instance ?INVESTIGATE Investigating)
      (patient ?INVESTIGATE ?PROP))
   (instance ?PROP Formula))

(=>
   (and
      (instance ?INVESTIGATE Investigating)
      (agent ?INVESTIGATE ?AGENT)
      (patient ?INVESTIGATE ?PROP))
   (holdsDuring (WhenFn ?INVESTIGATE) (not (knows ?AGENT ?PROP))))

(subclass SocialInteraction IntentionallyCausedProcess)
(documentation SocialInteraction "The &%subclass of 
&%IntentionallyCausedProcess that involves interactions between 
&%CognitiveAgents.")

(=>
   (instance ?INTERACTION SocialInteraction)
   (exists (?AGENT1 ?AGENT2)
      (and
         (agent ?INTERACTION ?AGENT1)
         (agent ?INTERACTION ?AGENT2)
         (not
            (equal ?AGENT1 ?AGENT2)))))

(subclass Pretending SocialInteraction)
(documentation Pretending "Any &%SocialInteraction where a 
&%CognitiveAgent or &%Group of &%CognitiveAgents attempts to make 
another &%CognitiveAgent or &%Group of &%CognitiveAgents believe 
something that is false.  This covers deceit, affectation, 
impersonation, and entertainment productions, to give just a few 
examples.") 

(subclass Communication SocialInteraction)
(subclass Communication ContentBearingProcess)
(documentation Communication "A &%SocialInteraction that involves 
the transfer of information between two &%Agents via a 
&%ContentBearingObject.")

(=>
   (instance ?ACTION Communication)
   (exists (?OBJ)
      (and
         (instance ?OBJ ContentBearingObject)
         (patient ?ACTION ?OBJ))))

(subclass Stating Communication)
(documentation Stating "Instances of this &%Class commit a sender to some truth. 
Example: John concluded that Peter was not present, and predicted that he would 
arrive soon.")

(subclass Directing Communication)
(documentation Directing "Instances of this &%Class urge some further action 
among the receivers.  Example: The 5th Battalion requested air support from 
the 3rd Bomber Group.") 

(subclass Ordering Directing)
(documentation Ordering "A &%Directing in which the receiver is 
commanded to realize the content of a &%ContentBearingObject.  Orders 
are injunctions, the disobedience of which involves sanctions, or 
which express an obligation upon the part of the orderee.")

(subclass Requesting Directing)
(documentation Requesting "A request expresses a desire by the &%agent of the 
request that the &%destination of the request perform some future action.") 

(subclass Questioning Directing)
(documentation Questioning "A request for information.")

(subclass Committing Communication)
(documentation Committing "Instances of this &%Class commit the sender to some 
future course. Example: Bob promised Susan that he would be home by 11pm.") 

(subclass Expressing Communication)
(documentation Expressing "Instances of this &%Class express a state of the sender. 
Example: Jane thanked Barbara for the present she had given her.")

(subclass Declaring Communication)
(documentation Declaring "The &%Class of &%Communications that effect an 
institutional alteration when performed by competent authority.  Some 
examples are nominating, marrying, and excommunicating.")

(subclass Cooperation SocialInteraction)
(documentation Cooperation "The &%subclass of &%SocialInteraction where 
the participants involved work together for the achievement of a common 
goal.")

(=>
   (instance ?COOPERATE Cooperation)
   (exists (?PURP)
      (forall (?AGENT)
         (=>
            (agent ?COOPERATE ?AGENT)
            (hasPurposeForAgent ?COOPERATE ?PURP ?AGENT)))))

(subclass Meeting SocialInteraction)
(documentation Meeting "The coming together of two or more 
&%CognitiveAgents for the purpose of &%Communication, usually 
to reach a joint decision about some issue.")
      
(subclass Competition Process)
(documentation Competition "A &%Process where the &%agent and 
&%patient are &%Agents who are trying to defeat one another.  The &%Agents 
need not be &%CognitiveAgents.  For example, the struggle of plants for 
space or sunlight, or of bacteria for food resources in some environment 
would be instances of &%Competition.")

(subclass Contest Competition)
(subclass Contest SocialInteraction)
(documentation Contest "A &%Competition in which the &%Agents are 
&%CognitiveAgents.  More specifically, the &%Agents are aware at some 
level that there is a prize at stake in the &%Competition.")

(=>
   (instance ?CONTEST Contest)
   (exists (?AGENT1 ?AGENT2 ?PURP1 ?PURP2)
      (and
         (agent ?CONTEST ?AGENT1)
         (agent ?CONTEST ?AGENT2)
         (hasPurposeForAgent ?CONTEST ?PURP1 ?AGENT1)
         (hasPurposeForAgent ?CONTEST ?PURP2 ?AGENT2)
         (not
            (equal ?AGENT1 ?AGENT2))
         (not
            (equal ?PURP1 ?PURP2)))))

(subclass War Contest)
(documentation War "A military confrontation between two or more 
&%Nations or &%Organizations whose members are &%Nations.  As the 
corresponding axiom specifies, a &%War is made up of &%Battles.")

(=>
   (instance ?WAR War)
   (exists (?BATTLE)
      (and
         (instance ?BATTLE Battle)
         (subProcess ?BATTLE ?WAR))))

(=>
   (and
      (instance ?WAR War)
      (agent ?WAR ?AGENT))
   (or
      (instance ?AGENT Nation)
      (and
         (instance ?AGENT Organization)
         (forall (?MEMBER)
            (=>
               (member ?MEMBER ?AGENT)
               (instance ?MEMBER Nation))))))

(subclass Maneuver Contest)
(documentation Maneuver "An intentional move or play within a &%Contest.  
In many cases, a &%Maneuver is part of a strategy for winning the 
larger &%Contest of which the &%Maneuver is a part.")

(=>
   (instance ?MOVE Maneuver)
   (exists (?CONTEST)
      (and
         (instance ?CONTEST Contest)
         (subProcess ?MOVE ?CONTEST))))

(subclass Battle Contest)
(documentation Battle "A &%Competition between two or more military 
units within the context of a war.  Note that this does not cover the 
metaphorical sense of 'battle', which simply means a struggle of some 
sort.  This sense should be represented with the more general concept of 
&%Competition.")

(=>
   (instance ?BATTLE Battle)
   (exists (?WAR)
      (and
         (instance ?WAR War)
         (subProcess ?BATTLE ?WAR))))

(subclass Game Contest)
(subclass Game RecreationalActivity)
(documentation Game "A &%Contest whose purpose is the 
enjoyment/stimulation of the participants or spectators of the &%Game.")

(subclass Sport Game)
(subclass Sport ExerciseActivity)
(documentation Sport "A &%Game which requires some degree of physical 
exercion from the participants of the game.")

(subclass Perception MentalProcess)
(documentation Perception "Sensing some aspect of the material world.  
Note that the &%agent of this sensing is assumed to be an &%Animal.")

(=>
   (and
      (instance ?PERCEPT Perception)
      (agent ?PERCEPT ?AGENT))
   (instance ?AGENT Animal))

(subclass Seeing Perception)
(documentation Seeing "The &%subclass of &%Perception in which the 
sensing is done by an ocular &%Organ.")

(subclass Smelling Perception)
(documentation Smelling "The &%subclass of &%Perception in which the 
sensing is done by an olefactory &%Organ.")

(subclass Tasting Perception)
(documentation Tasting "The &%subclass of &%Perception in which the 
sensing is done by of an &%Organ which can discriminate various tastes.")

(subclass Hearing Perception)
(documentation Hearing "The &%subclass of &%Perception in which the 
sensing is done by an auditory &%Organ.")

(subclass Emitting Process)
(documentation Emitting "&%Processes in which something is given off by 
something else.")

(subclass EmittingLight Emitting)
(documentation EmittingLight "The &%subclass of &%Emitting in which 
light is given off.  Some examples include blinking, flashing, and 
glittering.")

(subclass EmittingSmell Emitting)
(documentation EmittingSmell "The &%subclass of &%Emitting in which 
smells are given off.  Some examples include reeking, smelling, and 
stinking.")

(subclass EmittingSound Emitting)
(documentation EmittingSound "The &%subclass of &%Emitting in which 
sound is given off.  Some examples include creaking, roaring, and 
whistling.")

(subclass Music EmittingSound)
(documentation Music "The &%subclass of &%EmittingSound where the 
sound is intended to be melodic and is produced deliberately.")  

(subclass SelfConnectedObject Object)
(documentation SelfConnectedObject "A &%SelfConnectedObject is any 
&%Object that does not consist of two or more disconnected parts.")

(<=> 
	(instance ?OBJ SelfConnectedObject)
	(forall (?PART1 ?PART2)
		(=> 
			(equal ?OBJ (MereologicalSumFn ?PART1 ?PART2))
			(connected ?PART1 ?PART2))))

(subclass Collection Object)
(documentation Collection "Collections have &%members like &%Classes, but, 
unlike &%Classes, they have a position in space-time and &%members can be 
added and subtracted without thereby changing the identity of the 
&%Collection.  Some examples are toolkits, football teams, and flocks 
of sheep.")

(=>
   (instance ?COLL Collection)
   (exists (?OBJ)
	(member ?OBJ ?COLL)))

(subclass Region SelfConnectedObject)
(documentation Region "A topographic location.  &%Regions encompass 
surfaces of &%Objects and &%GeographicAreas.  Note that a &%Region is 
the only kind of &%Object which can be located at itself.")

(subclass GeographicArea Region)
(documentation GeographicArea "A geographic location, generally having 
definite boundaries.  Note that this differs from its immediate superclass 
&%Region in that a &%GeographicArea is a &%Region of land of significant 
size.") 

(subclass Land GeographicArea)
(documentation Land "A &%Land is the &%GeographicArea associated with 
a nation.  For example, the &%Land of Australia is the &%Region making 
up the continent of Oceania.")

(subclass Address GeographicArea)
(documentation Address "A &%GeographicArea with definite boundaries 
and of relatively small size.  This concept represents the state of 
'being at an address'.")

(subclass Organic Object)
(documentation Organic "The &%Class of &%Objects that are living 
things, i.e. instances of &%Organism, or parts of &%Organisms.") 

(subclass Inorganic Object)
(disjoint Inorganic Organic)
(documentation Inorganic "The &%Class of &%Objects that are neither 
&%Organisms nor individual parts of &%Organisms.")

(equal Inorganic (ComplementFn Organic))

(subclass Substance SelfConnectedObject)
(documentation Substance "An &%Object in which every part is similar to 
every other in every relevant respect.  More precisely, something is a 
&%Substance when it has only arbitrary pieces as parts - any parts have 
properties which are similar to those of the whole.  Note that a &%Substance 
may nonetheless have physical properties that vary.  For example, the 
temperature, chemical constitution, density, etc. may change from one part 
to another.  An example would be a large body of water such as the ocean.")

(=>
   (and
      (subclass ?OBJECTTYPE Substance)
      (instance ?OBJECT ?OBJECTTYPE)
      (part ?PART ?OBJECT))
   (instance ?PART ?OBJECTTYPE))

(subclass OrganicSubstance Substance)
(subclass OrganicSubstance Organic)
(documentation OrganicSubstance "The &%Class of &%Substances which are 
instances of &%Organic.")

(subclass InorganicSubstance Substance)
(subclass InorganicSubstance Inorganic)
(documentation InorganicSubstance "The &%Class of &%Substances which are 
instances of &%Inorganic.")

(subclass Water InorganicSubstance)
(documentation Water "The &%Class of samples of the compound H20.  Note 
that this &%Class covers both pure and impure &%Water.")

(subclass CorpuscularObject SelfConnectedObject)
(disjoint CorpuscularObject Substance)
(documentation CorpuscularObject "A &%SelfConnectedObject whose parts have 
properties that are not shared by the whole.")

(=>
   (instance ?OBJ CorpuscularObject)
   (exists (?SUBSTANCETYPE1 ?SUBSTANCETYPE2 ?SUBSTANCE1 ?SUBSTANCE2)
      (and
         (subclass ?SUBSTANCETYPE1 Substance)
         (subclass ?SUBSTANCETYPE2 Substance)
         (instance ?SUBSTANCE1 ?SUBSTANCETYPE1)
         (instance ?SUBSTANCE2 ?SUBSTANCETYPE2)
         (material ?SUBSTANCE1 ?OBJ)
         (material ?SUBSTANCE2 ?OBJ)
         (not (equal ?SUBSTANCE1 ?SUBSTANCE2)))))

(subclass OrganicObject CorpuscularObject)
(subclass OrganicObject Organic)
(documentation OrganicObject "A &%CorpuscularObject such as a tree or 
flower that has parts that are not completely separable, even though 
there are discontinuities.")

(subclass Organism OrganicObject)
(subclass Organism Agent)
(documentation Organism "Generally, a living individual, including all 
&%Plants and &%Animals.")

(=>
   (instance ?ORGANISM Organism)
   (exists (?TIME1 ?TIME2)
      (and
         (birthTime ?ORGANISM ?TIME1)
         (deathTime ?ORGANISM ?TIME2))))

(subclass InorganicObject CorpuscularObject)
(subclass InorganicObject Inorganic)
(documentation InorganicObject "Instances of &%CorpuscularObject that are 
also instances of &%Inorganic.")

(subclass Icon ContentBearingObject)
(documentation Icon "This is the subclass of &%ContentBearingObjects 
which are not part of a &%Language and which have some sort of similarity 
with the &%Objects that they represent.  This &%Class would include symbolic 
roadway signs, 'icons' in a graphical computer operating system, etc.")

(subclass LinguisticExpression ContentBearingObject)
(disjoint LinguisticExpression Icon)
(documentation LinguisticExpression "This is the subclass of 
&%ContentBearingObjectss which are language-related.  Note that this &%Class 
encompasses both &%Language and the the elements of &%Languages, 
e.g. &%Words.")

(subclass Language LinguisticExpression)
(documentation Language "A system of signs for expressing thought.  The 
system can be either natural or artificial, i.e. something that emerges 
gradually as a cultural artifact or something that is intentionally created 
by a person or group of people.")

(subclass Word LinguisticExpression)
(partition Word Noun Verb Adjective Adverb Particle)
(documentation Word "A term of a &%Language that represents a concept.")

(=>
    (instance ?WORD Word)
    (exists (?PART)
        (and
            (part ?PART ?WORD)
            (instance ?PART Morpheme)))) 

(subclass SymbolicString LinguisticExpression)
(documentation SymbolicString "The &%Class of all &%LinguisticExpressions 
that are represented as strings.")

(subclass Noun Word)
(documentation Noun "One of the parts of speech.  The &%Class of &%Words 
that conventionally denote &%Objects.")

(subclass Verb Word)
(documentation Verb "One of the parts of speech.  The &%Class of &%Words 
that conventionally denote &%Processes.")

(subclass Adjective Word)
(documentation Adjective "One of the parts of speech.  The &%Class of 
&%Words that conventionally denote &%Attributes of &%Objects.")

(subclass Adverb Word)
(documentation Adverb "One of the parts of speech.  The &%Class of &%Words 
that conventionally denote &%Attributes of &%Processes.")

(subclass Particle Word)
(documentation Particle "An umbrella &%Class for any &%Word that does not 
fit into the other subclasses of &%Word.  A &%Particle is generally a small 
term that serves a grammatical or logical function, e.g. 'and', 'of', 
'since', etc.  At some point, this class might be broken up into the 
subclasses 'Connective', 'Preposition', etc.")

(subclass Character LinguisticExpression)
(documentation Character "The smallest unit of a writing system or any other representational system.")

(=>
    (instance ?STRING SymbolicString)
    (exists (?PART)
        (and
            (part ?PART ?STRING)
            (instance ?PART AlphabeticCharacter)))) 

(subclass Morpheme LinguisticExpression)
(documentation Morpheme "Part of a &%Word which cannot be subdivided 
and which expresses a meaning.")

(=>
   (instance ?MORPH Morpheme)
   (not
      (exists (?OTHERMORPH)
         (and
            (instance ?OTHERMORPH Morpheme)
            (part ?OTHERMORPH ?MORPH)
            (not (equal ?OTHERMORPH ?MORPH))))))

(=>
   (instance ?MORPH Morpheme)
   (exists (?WORD)
         (and
            (instance ?WORD Word)
            (part ?MORPH ?WORD))))

(subclass Phrase LinguisticExpression)
(disjointDecomposition Phrase VerbPhrase NounPhrase PrepositionalPhrase Sentence)
(documentation Phrase "A set of &%Words in a &%Language which form a unit, 
i.e. express a meaning in the &%Language.")

(=>
    (instance ?PHRASE Phrase)
    (exists (?PART1 ?PART2)
        (and
            (part ?PART1 ?PHRASE)
	    (part ?PART2 ?PHRASE)
            (instance ?PART1 Word)
	    (instance ?PART2 Word)
            (not (equal ?PART1 ?PART2)))))

(subclass VerbPhrase Phrase)
(documentation VerbPhrase "A &%Phrase that has the same function as a 
&%Verb.")

(subclass NounPhrase Phrase)
(disjoint NounPhrase VerbPhrase)
(documentation NounPhrase "A &%Phrase that has the same function as a 
&%Noun.")

(subclass PrepositionalPhrase Phrase)
(documentation PrepositionalPhrase "A &%Phrase that begins with a 
preposition and that functions as an &%Adjective or an &%Adverb.")

(subclass Sentence Phrase)
(subclass Sentence ContentBearingObject)
(documentation Sentence "A syntactically well-formed formula of a 
natural or artificial &%Language.  It expresses a complete thought, 
i.e., a &%Proposition.")

(=>
    (instance ?SENTENCE Sentence)
    (exists (?PROP)
        (and
            (instance ?PROP Proposition)
            (containsInformation ?SENTENCE ?PROP))))

(=>
    (instance ?SENTENCE Sentence)
    (exists (?PHRASE1 ?PHRASE2)
        (and
           (instance ?PHRASE1 NounPhrase)
           (instance ?PHRASE2 VerbPhrase)
           (part ?PHRASE1 ?SENTENCE)
           (part ?PHRASE2 ?SENTENCE))))

(subclass Question Sentence)
(documentation Question "The class of &%Sentences that ask a &%Question.")

(subclass Formula Sentence)
(documentation Formula "A syntactically well-formed formula in the 
SUO-KIF knowledge representation language.")

(subclass ContentBearingObject Object)
(relatedInternalConcept ContentBearingObject containsInformation)
(documentation ContentBearingObject "Any &%Object that expresses a 
&%Proposition.  It is important to distinguish &%Propositions from the 
&%ContentBearingObjects that express them.  A &%Proposition is a piece 
of information, e.g. that the cat is on the mat, but a &%ContentBearingObject 
is an &%Object that represents this information.  A &%Proposition is an 
abstraction that may have multiple representations: strings, sounds, icons, 
etc.  For example, the &%Proposition that the cat is on the mat is represented 
here as a string of graphical characters displayed on a monitor and/or 
printed on paper, but it can be represented by a sequence of sounds or by 
some non-latin alphabet or by some cryptographic form.")

(=>
   (instance ?OBJECT ContentBearingObject)
   (exists (?PROP)
      (containsInformation ?OBJECT ?PROP)))

(subclass Text ContentBearingObject)
(documentation Text "A set of &%Sentences that express a discourse on a 
subject of some sort.")

(=>
    (instance ?TEXT Text)
    (exists (?PART1 ?PART2)
        (and
            (part ?PART1 ?TEXT)
	      (part ?PART2 ?TEXT)
            (instance ?PART1 Sentence)
	      (instance ?PART2 Sentence)
            (not (equal ?PART1 ?PART2)))))

(subclass Book Text)
(documentation Book "A &%Text that has pages and is bound.")

(subclass SubmolecularObject InorganicObject)
(documentation SubmolecularObject "The &%Class of &%InorganicObjects 
that compose &%Molecules.")

(=>
   (instance ?SUBMOLE SubmolecularObject)
   (exists (?MOLE)
      (and
         (instance ?MOLE Molecule)
         (part ?SUBMOLE ?MOLE))))

(subclass Molecule InorganicObject)
(documentation Molecule "A &%Molecule is a set of &%Atoms that are 
chemically bonded together.")

(=>
   (instance ?MOLE Molecule)
   (exists (?ATOM1 ?ATOM2)
      (and
         (instance ?ATOM1 Atom)
         (instance ?ATOM2 Atom)
         (part ?ATOM1 ?MOLE)
         (part ?ATOM2 ?MOLE)
         (not
            (equal ?ATOM1 ?ATOM2)))))

(subclass Atom SubmolecularObject)
(documentation Atom "An extremely small unit of matter that retains its 
identity in Chemical reactions.  It consists of an &%AtomicNucleus and 
&%Electrons surrounding the &%AtomicNucleus.")

(=>
   (instance ?ATOM Atom)
   (exists (?PROTON ?ELECTRON)
      (and
         (component ?PROTON ?ATOM)
	   (component ?ELECTRON ?ATOM)
         (instance ?PROTON Proton)
         (instance ?ELECTRON Electron))))

(=>
   (instance ?ATOM Atom)
   (forall (?NUCLEUS1 ?NUCLEUS2)
      (=>
         (and
            (component ?NUCLEUS1 ?ATOM)
	      (component ?NUCLEUS2 ?ATOM)
            (instance ?NUCLEUS1 AtomicNucleus)
            (instance ?NUCLEUS2 AtomicNucleus))
	   (equal ?NUCLEUS1 ?NUCLEUS2))))

(subclass SubatomicParticle SubmolecularObject)
(documentation SubatomicParticle "The class of &%SubmolecularObjects that 
are smaller than &%Atoms and often compose &%Atoms.")

(subclass AtomicNucleus SubatomicParticle)
(documentation AtomicNucleus "The core of the &%Atom.  It is composed of 
&%Protons and &%Neutrons.")

(=>
   (instance ?NUCLEUS AtomicNucleus)
   (exists (?NEUTRON ?PROTON)
      (and
         (component ?NEUTRON ?NUCLEUS)
	   (component ?PROTON ?NUCLEUS)
         (instance ?NEUTRON Neutron)
         (instance ?PROTON Proton))))

(subclass Electron SubatomicParticle)
(documentation Electron "&%SubatomicParticles that surround the 
&%AtomicNucleus.  They have a negative charge.")

(subclass Proton SubatomicParticle)
(documentation Proton "Components of the &%AtomicNucleus.  They have a 
positive charge.")

(subclass Neutron SubatomicParticle)
(documentation Neutron "Components of the &%AtomicNucleus.  They have no 
charge.")

(subclass Artifact InorganicObject)
(documentation Artifact "An &%Object with separable parts that is 
the product of an &%IntentionallyCausedProcess.")

(=>
   (instance ?ARTIFACT Artifact)
   (exists (?PROCESS)
      (and
         (instance ?PROCESS Process)
         (result ?PROCESS ?ARTIFACT))))

;; The following ground facts incorporate the 'Agent' hierarchy from the 
;; corresponding ontology on the Ontolingua server.  It also includes 
;; predicates defined in the ITBM-CNR ontology "Actors".

(subclass Agent Object)
(documentation Agent "Something or someone that can act on its own and 
produce changes in the world.")

(<=>
	(instance ?AGENT Agent)
	(exists (?PROC)
		(agent ?PROC ?AGENT)))

(subclass Nation Agent)
(relatedInternalConcept Nation Land)
(documentation Nation "That aspect of a Nation which can act automonously 
and which is the same throughout the changes in population and borders.  
Compare the &%Class Land.")

(=>
   (instance ?NATION Nation)
   (exists (?GOV)
      (and
         (instance ?GOV Government)
         (subOrganizations ?GOV ?NATION))))

(subclass SentientAgent Agent)
(documentation SentientAgent "An &%Agent that has rights but may or may 
not have responsibilities and the ability to reason.  If the latter are 
present, then the &%Agent is also an instance of &%CognitiveAgent.  
Domesticated animals are an example of &%SentientAgents that are not 
also &%CognitiveAgents.")

(subclass CognitiveAgent SentientAgent)
(documentation CognitiveAgent "A &%SentientAgent with responsibilities 
and the ability to reason, deliberate, make plans, etc.  This is 
essentially the legal/ethical notion of a person.  Note that, although 
&%Human is a subclass of &%CognitiveAgent, there may be instances of 
&%CognitiveAgent which are not also instances of &%Human.  For example, 
chimpanzees, gorillas, dolphins, whales, and some extraterrestrials 
(if they exist) may be &%CognitiveAgents.")

(subclass PersonBySocialRole CognitiveAgent) 
(documentation PersonBySocialRole "The &%Class of all &%CognitiveAgents 
who are considered with respect to a social role that they have.")

(=>
   (instance ?PERSON PersonBySocialRole)
   (exists (?ACT)
      (and
         (instance ?ACT OrganizationalActivity)
         (agent ?ACT ?PERSON))))

(subclass PersonByOccupationalRole PersonBySocialRole)
(documentation PersonByOccupationalRole "The &%Class of all 
&%CognitiveAgents who are considered with respect to an occupational 
role that they have.")

(=>
   (instance ?PERSON PersonByOccupationalRole)
   (exists (?ACT)
      (and
         (instance ?ACT OccupationalActivity)
         (agent ?ACT ?PERSON))))

(subclass RetiredPerson PersonByOccupationalRole)
(documentation RetiredPerson "The &%Class of all &%CognitiveAgents who 
are retired.")

(=>
   (instance ?PERSON RetiredPerson)
   (not
      (exists (?ORG)
         (employs ?ORG ?PERSON))))

(subclass Class Abstract)
(documentation Class "&%Class generalizes &%Set.  &%Classes, like 
&%Sets, are collections of things.  Accordingly, the notion of membership 
is generalized as well - a member of a &%Class is an &%instance the 
&%Class.  &%Classes can differ from &%Sets in two important respects.  
First, &%Classes that are not explicitly identified as &%Sets are not assumed 
to be extensional.  That is, distinct &%Classes might well have exactly the 
same instances.  Second, &%Classes typically have an associated `condition' 
that determines the instances of the &%Class.  So, for example, the 
condition `human' determines the &%Class of &%Humans.  Note that some 
&%Classes might satisfy their own condition (e.g., the &%Class of &%Abstract 
things is &%Abstract) and hence be instances of themselves.")

(subclass Relation Class)
(documentation Relation "A Class of ordered tuples.") 

(subclass Set Class)
(documentation Set "A &%Class that satisfies extensionality as well as
other conditions specified by some choice of set theory.  Unlike 
&%Classes generally, &%Sets need not have an associated condition that 
determines their membership.  Rather, they are thought of metaphorically 
as `built up' from some initial stock of objects by means of certain
constructive operations (such as the pairing or power set operations).
Note that extensionality alone is not sufficient for identifying 
&%Classes with &%Sets, since some &%Classes (e.g. &%Entity) cannot be 
assumed to be &%Sets without contradiction.")

(subclass FiniteSet Set)
(documentation FiniteSet "A &%Set containing a finite number of elements.")

(=>
   (instance ?SET FiniteSet)
   (exists (?NUMBER)
      (and
         (instance ?NUMBER NonnegativeInteger)
         (cardinality ?SET ?NUMBER))))

(subclass Proposition Abstract)
(documentation Proposition "&%Propositions are &%Abstract entities that 
express a complete thought or a series of such thoughts.  As an example, 
the formula '(instance Yojo Cat)' expresses the &%Proposition that the 
entity named Yojo is an element of the &%Class of Cats.")

(subclass Procedure Proposition)
(documentation Procedure "A sequence-dependent specification.  Some 
examples are &%ComputerPrograms, finite-state machines, cooking recipes, 
musical scores, conference schedules, driving directions, and the scripts 
of plays and movies.")

(subclass ComputerProgram Procedure)
(documentation ComputerProgram "A set of instructions in a computer 
programming language that can be executed by a computer.")

(subclass Plan Procedure)
(documentation Plan "A sequence of &%Processes which is intended to 
satisfy a specified purpose at some future time.")

(=>
   (instance ?PLAN Plan)
   (exists (?PLANNING)
      (and
         (instance ?PLANNING Planning)
         (result ?PLANNING ?PLAN))))

(=>
    (instance ?PLAN Plan)
    (exists (?PURP)
        (hasPurpose ?PLAN ?PURP)))

(subclass NormativeProposition Proposition)
(documentation NormativeProposition "A &%Proposition with normative 
content, i.e. a &%Proposition that contains a judgement about the 
way things ought to be.")

(subclass Obligation NormativeProposition)
(documentation Obligation "&%Propositions that an &%Agent is required, 
by some authority, to make true.")

(subclass Law Obligation)
(documentation Law "A codified &%Obligation that is imposed by a government 
of some sort and that is enforced with penalties for noncompliance.")

(subclass Promise NormativeProposition)
(documentation Promise "The &%Class of &%NormativePropositions where 
an &%Agent promises to do something.  &%Promises may be implicit or 
explicit.  They may be expressed in a written or verbal or gestural 
manner.")

(subclass JudgementOfEtiquette NormativeProposition)
(documentation JudgementOfEtiquette "A &%Proposition expressing the 
proper manner of doing something.")

(subclass AestheticJudgement NormativeProposition)
(documentation AestheticJudgement "A &%Proposition expressing matters 
of taste, style, beauty, etc.")

(subclass Contract Promise)
(documentation Contract "A &%Promise where something is promised in return, 
i.e. a reciprocal promise.") 

(subclass PurchaseContract Contract)
(documentation PurchaseContract "A &%Contract between two &%Agents in 
which one &%Agent agrees to render the other some good or service in 
exchange for currency.")

(subclass ServiceContract Contract)
(documentation ServiceContract "A &%Contract where an &%Agent agrees to 
perform a service for another &%Agent (usually for a price).")

(subclass Warranty ServiceContract)
(documentation Warranty "A &%Contract that states the cirumstances 
under which defects in the product will be corrected for no charge.  
A &%Warranty is usually limited to a length of time that is specified 
in the &%Warranty itself.  A &%Warranty also includes information about 
what is not covered and actions that invalidate the &%Warranty.")

(subclass NakedPromise Promise)
(disjoint Promise Contract)
(documentation Promise "A &%Promise where nothing is promised in return, 
i.e. a nudum pactum.")

(subclass Quantity Abstract)
(documentation Quantity "Any specification of how many or how much of 
something there is.  Accordingly, there are two subclasses of &%Quantity:  
&%Number (how many) and &%PhysicalQuantity (how much).")

(subclass Attribute Abstract)
(disjoint Attribute Quantity)
(documentation Attribute "Qualities which we cannot or choose not to 
reify into subclasses of &%Object.")

(subclass DirectionAttribute Attribute)
(documentation DirectionAttribute "&%Attributes characterizing the 
orientation of an &%Object, e.g. &%Vertical versus &%Horizontal, the 
compass directions, etc.")

(instance Vertical DirectionAttribute)
(documentation Vertical "Attribute used to indicate that an &%Object 
is positioned height-wise with respect to another &%Object.")

(instance Horizontal DirectionAttribute)
(contraryProperty Horizontal Vertical)
(documentation Horizontal "Attribute used to indicate that an &%Object 
is positioned width-wise with respect to another &%Object.")

(instance North DirectionAttribute)
(documentation North "The compass direction of &%North.")

(instance South DirectionAttribute)
(documentation South "The compass direction of &%South.")

(instance East DirectionAttribute)
(documentation East "The compass direction of &%East.")

(instance West DirectionAttribute)
(documentation West "The compass direction of &%West.")

(subclass PhysicalState Attribute)
(documentation PhysicalState "The physical state of an &%Object.  There 
are three instances of this &%Class:  &%Solid, &%Liquid, and &%Gas.")

(instance Solid PhysicalState)
(documentation Solid "An &%Object has the &%Attribute of &%Solid if it 
has a fixed shape and a fixed volume.")

(instance Liquid PhysicalState)
(documentation Liquid "An &%Object has the &%Attribute of &%Liquid if 
it has a fixed volume but not a fixed shape.")

(instance Gas PhysicalState)
(documentation Gas "An &%Object has the &%Attribute of &%Gas if it has 
neither a fixed volume nor a fixed shape.")

(=>
   (and
      (instance ?STATE PhysicalState)
      (part ?PART ?OBJ)
      (holdsDuring ?TIME (attribute ?OBJ ?STATE)))
   (not
      (exists (?OTHERSTATE)
         (and
            (instance ?OTHERSTATE PhysicalState)
            (holdsDuring ?TIME (attribute ?PART ?OTHERSTATE))
            (not (equal ?STATE ?OTHERSTATE))))))

(subclass TasteProperty Attribute)
(documentation TasteProperty "The &%Class of &%Attributes relating to 
the taste of &%Objects.")

(=>
   (and
      (instance ?ATTR TasteProperty)
      (attribute ?OBJ ?ATTR))
   (instance ?OBJ Food))

(instance Sweet TasteProperty)
(contraryProperty Sweet Bitter)
(documentation Sweet "The &%Attribute of &%Objects that are 
sweet-tasting.")

(instance Bitter TasteProperty)
(documentation Bitter "The &%Attribute of &%Objects that are 
bitter-tasting.")

(subclass ColorProperty Attribute)
(documentation ColorProperty "The &%Class of &%Attributes relating to 
the color of &%Objects.")

(subclass PrimaryColor ColorProperty)
(disjointDecomposition PrimaryColor Red Blue Yellow)
(documentation PrimaryColor "Colors which can be blended to form any 
color and which cannot be derived from any other colors.")

(instance Red PrimaryColor)
(documentation Red "The &%Attribute of redness.")

(instance Blue PrimaryColor)
(documentation Blue "The &%Attribute of being blue in color.")

(instance Yellow PrimaryColor)
(documentation Yellow "The &%Attribute of being yellow in color.")

(instance Monochromatic ColorProperty)
(documentation Monochromatic "An &%Object with this &%Attribute has 
the same color on every part of its surface.")

(=>
   (and
      (attribute ?OBJ Monochromatic)
      (superficialPart ?PART ?OBJ)
      (attribute ?PART ?COLOR)
      (instance ?COLOR PrimaryColor))
   (forall (?ELEMENT)
      (=>
         (superficialPart ?ELEMENT ?OBJ)
         (attribute ?ELEMENT ?COLOR))))

(instance Polychromatic ColorProperty)
(contraryProperty Polychromatic Monochromatic)
(documentation Polychromatic "An &%Object with this &%Attribute has 
different colors on different parts of its surface.")

(=>
   (attribute ?OBJ Polychromatic)
   (exists (?PART1 ?PART2 ?COLOR1 ?COLOR2)
      (and
         (superficialPart ?PART1 ?OBJ)
         (superficialPart ?PART2 ?OBJ)
         (attribute ?PART1 ?COLOR1)
         (attribute ?PART2 ?COLOR2)
         (instance ?COLOR1 ColorProperty)
         (instance ?COLOR2 ColorProperty)
         (not (equal ?COLOR1 ?COLOR2)))))

(subclass TemperatureProperty Attribute)
(relatedInternalConcept TemperatureProperty ThermodynamicTemperatureMeasure)
(documentation TemperatureProperty "&%Attributes which characterize the 
temperatures of &%Objects in a qualitative manner.  For quantitative 
measures of temperatures, see &%ThermodynamicTemperatureMeasure.")  

(instance Cold TemperatureProperty)
(documentation Cold "The &%Attribute of being cold.")

(instance Hot TemperatureProperty)
(contraryProperty Hot Cold)
(documentation Hot "The &%Attribute of being hot.")

(subclass SizeProperty Attribute)
(relatedInternalConcept SizeProperty LengthMeasure)
(relatedInternalConcept SizeProperty MassMeasure)
(documentation SizeProperty "&%Attributes which characterize the 
sizes of &%Objects in a qualitative manner.  For quantitative 
measures of &%Objects, see &%LengthMeasure and &%MassMeasure.") 

(instance Tiny SizeProperty)
(successorAttribute Tiny Small)
(documentation Tiny "The first rung of a scale of five assessments 
of size.") 

(instance Small SizeProperty)
(successorAttribute Small Medium)
(documentation Small "The second rung of a scale of five assessments 
of size.") 

(instance Medium SizeProperty)
(successorAttribute Medium Large)
(documentation Medium "The third rung of a scale of five assessments 
of size.") 

(instance Large SizeProperty)
(successorAttribute Large Enormous)
(documentation Large "The fourth rung of a scale of five assessments 
of size.") 

(=>
   (and
      (instance ?SIZE1 SizeProperty)
      (instance ?SIZE2 SizeProperty)
	(attribute ?OBJ1 ?SIZE1)
	(attribute ?OBJ2 ?SIZE2)
	(successorAttributeClosure ?SIZE1 ?SIZE2))
   (exists (?UNIT ?MEASURE1 ?MEASURE2)
	(and
  	   (measure ?OBJ1 (MeasureFn ?MEASURE1 ?UNIT))
	   (measure ?OBJ2 (MeasureFn ?MEASURE2 ?UNIT))
         (greaterThan ?MEASURE1 ?MEASURE2))))

(instance Enormous SizeProperty)
(documentation Enormous "The fifth rung of a scale of five assessments 
of size.") 

(subclass ShapeProperty Attribute)
(documentation ShapeProperty "Any &%Attribute that characterizes the 
shape of an &%Object.")

(instance Elastic ShapeProperty)
(documentation Elastic "The shape of an &%Object with this &%Attribute 
can be easily altered.")

(instance Rigid ShapeProperty)
(contraryProperty Rigid Elastic)
(documentation Rigid "The shape of an &%Object with this &%Attribute 
cannot be easily altered.")

(subclass TextureProperty Attribute)
(documentation TextureProperty "Any &%Attribute that characterizes the 
texture of an &%Object.")

(=>
   (and
      (instance ?ATTRIBUTE TextureProperty)
      (attribute ?OBJ ?ATTRIBUTE)
      (surface ?SURFACE ?OBJ))
   (attribute ?SURFACE ?ATTRIBUTE))

(instance Smooth TextureProperty)
(documentation Smooth "An &%Object with this &%Attribute has a smooth 
surface.")

(instance Rough TextureProperty)
(contraryProperty Smooth Rough)
(documentation Rough "An &%Object with this &%Attribute has a rough 
surface.")

(subclass SoundProperty Attribute)
(documentation SoundProperty "Any &%Attribute that characterizes the 
sound made by an &%Object.")

(subclass SaturationProperty Attribute)
(documentation SaturationProperty "A &%Class of &%Attributes that specify, 
in qualitative terms, the amount of &%Water in a particular &%Object.")

(instance Dry SaturationProperty)
(contraryProperty Dry Damp)
(documentation Dry "An &%Attribute which indicates that the associated 
&%Object contains a relatively small amount of &%Water.")

(instance Anhydrous SaturationProperty)
(subAttribute Anhydrous Dry)
(documentation Anhydrous "An &%Attribute which indicates that the 
associated &%Object does not contain any &%Water.")

(=>
   (attribute ?OBJ Anhydrous)
   (not
      (exists (?WATER)
         (and
            (instance ?WATER Water)
            (part ?WATER ?OBJ)))))

(instance Damp SaturationProperty)
(documentation Damp "An &%Attribute which indicates that the associated 
&%Object contains a relatively large amount of &%Water.")

(instance Wet SaturationProperty)
(subAttribute Wet Damp)
(documentation Wet "An &%Attribute which indicates that the 
associated &%Object is fully saturated with &%Water.")

(=>
   (attribute ?OBJ Wet)
   (forall (?PART)
      (=>
         (part ?PART ?OBJ)
         (exists (?WATER)
            (and
               (instance ?WATER Water)
               (or
                  (overlapsSpatially ?WATER ?PART)
                  (meetsSpatially ?WATER ?PART))))))) 

(subclass BreakabilityProperty Attribute)
(documentation BreakabilityProperty "A &%subclass of &%Attributes for 
characterizing the breakability of &%CorpuscularObjects.")

(instance Fragile BreakabilityProperty)
(documentation Fragile "An &%Attribute which indicates that the 
associated &%Object is very breakable.")

(instance Unbreakable BreakabilityProperty)
(contraryProperty Unbreakable Fragile)
(documentation Unbreakable "An &%Attribute which indicates that the 
associated &%Object cannot be broken under ordinary circumstances.")

(subclass BiologicalProperty Attribute)
(documentation BiologicalProperty "&%Attributes that apply specifically 
to instances of &%Organic.")

(=>
    (and
        (attribute ?ORG ?ATT)
        (instance ?ATT BiologicalProperty))
    (instance ?ORG Organism))

(subclass AnimacyProperty BiologicalProperty)
(documentation AnimacyProperty "&%Attributes that indicate whether an 
&%Organism is animate or not.")

(instance Living AnimacyProperty)
(documentation Living "This &%Attribute applies to &%Organisms that are 
alive.")

(=>
   (exists (?PROCESS)
      (and
         (instance ?ORGANISM Organism)
         (agent ?PROCESS ?ORGANISM)))
   (attribute ?ORGANISM Living))

(instance Dead AnimacyProperty)
(contraryProperty Dead Living)
(documentation Dead "This &%Attribute applies to &%Organisms that are 
not alive.")

(subclass SexProperty BiologicalProperty)
(documentation SexProperty "&%Attributes that indicate the sex of an 
&%Organism.")

(instance Female SexProperty)
(documentation Female "An &%Attribute indicating that an &%Organism or 
other &%OrganicObject is female in nature.")

(instance Male SexProperty)
(contraryProperty Male Female)
(documentation Male "An &%Attribute indicating that an &%Organism or 
other &%OrganicObject is male in nature.")

(subclass PsychologicalProperty Attribute)
(documentation PsychologicalProperty "&%Attributes that characterize the mental or behavioral life of an &%Organism (and perhaps other &%Agents).")

(subclass EmotionalState PsychologicalProperty)
(disjoint EmotionalState TraitProperty)
(documentation EmotionalState "The &%Class of &%Attributes that denote emotional states of &%Organisms (and perhaps other &%Agents).  Note that &%EmotionalState is distinguished from &%TraitProperty in part by the fact that instances of the former are relatively transient while instances of the latter are persistent features of a creature's behavioral/psychological make-up.")

(subclass TraitProperty PsychologicalProperty)
(documentation TraitProperty "&%Attributes that indicate the the 
behavior/personality traits of an &%Organism.")

(instance Aggressive TraitProperty)
(contraryProperty Aggressive Docile)
(documentation Aggressive "The &%Attribute of having an aggressive 
disposition.")

(instance Docile TraitProperty)
(documentation Docile "The &%Attribute of having a docile disposition.")

(subclass CompetitionProperty Attribute)
(documentation CompetitionProperty "A &%Class containing all of the 
&%Attributes that are specific to participants in a &%Competition.  Some 
of these &%Attributes are winning, losing, won, lost, struggling, etc.")

(subclass NormativeProperty Attribute)
(documentation NormativeProperty "A &%Class containing all of the 
&%Attributes that are specific to judgements about morality, legality, 
aesthetics, etiquette, etc.")

(subclass TruthValue Attribute)
(documentation TruthValue "The &%Class of truth values, e.g. &%True and 
&%False.  These are &%Attributes of &%Sentences.")

(instance True TruthValue)
(documentation True "The &%TruthValue of being true.")

(instance False TruthValue)
(contraryProperty False True)
(documentation False "The &%TruthValue of being false.")

(subclass SubjectiveAssessmentProperty NormativeProperty)
(documentation SubjectiveAssessmentProperty "The &%Class of &%NormativeProperties
which lack an objective criterion for their attribution, i.e. the attribution of 
these &%Attributes varies from subject to subject and even with respect to the 
same subject over time.")

(instance AbstractionFn UnaryFunction)
(domain AbstractionFn 1 Class)
(range AbstractionFn Attribute)
(documentation AbstractionFn "A &%UnaryFunction that maps a &%Class into 
the instance of &%Attribute that specifies the condition(s) for membership 
in the &%Class.")

(<=>
   (equal (AbstractionFn ?CLASS) ?ATTR)
   (forall (?INST)
      (<=>
         (instance ?INST ?CLASS)
         (attribute ?INST ?ATTR))))

(instance ExtensionFn UnaryFunction)
(domain ExtensionFn 1 Attribute)
(range ExtensionFn Class)
(documentation ExtensionFn "A &%UnaryFunction that maps an &%Attribute 
into the &%Class whose condition for membership is the &%Attribute.")

(<=>
   (equal (ExtensionFn ?ATTRIBUTE) ?CLASS)
   (equal (AttributeFn ?CLASS) ?ATTRIBUTE))

;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     SET/CLASS THEORY      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following part of the ontology covers set-theoretic predicates 
;; and functions.  Most of the content here is taken from the kif-sets 
;; ontology (available on the Ontolingua server).

(subrelation subset subclass)
(domain subset 1 Set)
(domain subset 2 Set)
(documentation subset "(subset ?SET1 ?SET2) is true just in case the 
&%elements of the &%Set ?SET1 are also &%elements of the &%Set ?SET2.")

(=> 
   (subset ?SUBSET ?SET)
   (forall (?ELEMENT)
      (=> 
         (element ?ELEMENT ?SUBSET)
         (element ?ELEMENT ?SET))))

(instance element AsymmetricRelation)
(instance element IntransitiveRelation)
(subrelation element instance)
(domain element 1 Entity)
(domain element 2 Set)
(documentation element "(element ?ENTITY ?SET) is true just in case 
?ENTITY is contained in the &%Set ?SET.  An &%Entity can be an &%element 
of another &%Entity only if the latter is a &%Set.")

(=>
   (forall (?ELEMENT)
         (<=>
            (element ?ELEMENT ?SET1)
            (element ?ELEMENT ?SET2)))
   (equal ?SET1 ?SET2))

(instance UnionFn BinaryFunction)
(domain UnionFn 1 Class)
(domain UnionFn 2 Class)
(range UnionFn Class)
(documentation UnionFn "A &%BinaryFunction that maps two &%Classes to 
the union of these &%Classes.  An object is an instance of the union of 
two &%Classes just in case it is an instance of either &%Class.")

(<=> 
   (instance ?ENTITY (UnionFn ?CLASS1 ?CLASS2))
   (or 
      (instance ?ENTITY ?CLASS1)
      (instance ?ENTITY ?CLASS2)))

(instance IntersectionFn BinaryFunction)
(domain IntersectionFn 1 Class)
(domain IntersectionFn 2 Class)
(range IntersectionFn Class)
(documentation IntersectionFn "A &%BinaryFunction that maps two 
%Classes to the intersection of these &%Classes.  An object is an instance 
of the intersection of two &%Classes just in case it is an instance of 
both of those &%Classes.")

(<=> 
   (instance ?ENTITY (IntersectionFn ?CLASS1 ?CLASS2))
   (and 
      (instance ?ENTITY ?CLASS1)
      (instance ?ENTITY ?CLASS2)))

(instance RelativeComplementFn BinaryFunction)
(domain RelativeComplementFn 1 Class)
(domain RelativeComplementFn 2 Class)
(range RelativeComplementFn Class)
(documentation RelativeComplementFn "A &%BinaryFunction that maps two 
&%Classes to the difference between these &%Classes.  More precisely, 
the relative complement of one class C1 relative to another C2 consists 
of the instances of C1 that are instances of the &%ComplementFn of C2.")

(equal (RelativeComplementFn ?CLASS1 ?CLASS2)
       (IntersectionFn ?CLASS1 (ComplementFn ?CLASS2)))

(instance ComplementFn UnaryFunction)
(domain ComplementFn 1 Class)
(range ComplementFn Class)
(documentation ComplementFn "The complement of a given &%Class C is the 
&%Class of all things that are not instances of C.  In other words, an 
object is an instance of the complement of a &%Class C just in case it 
is not an instance of C.")

(<=> 
   (instance ?ENTITY (ComplementFn ?CLASS))
   (not 
      (instance ?ENTITY ?CLASS)))

(instance GeneralizedUnionFn UnaryFunction)
(domainSubclass GeneralizedUnionFn 1 Class)
(range GeneralizedUnionFn Class)
(documentation GeneralizedUnionFn "A &%UnaryFunction that takes a &%Class 
of &%Classes as its single argument and returns a &%Class which is the 
merge of all of the &%Classes in the original &%Class, i.e. the &%Class 
containing just those instances which are instances of an instance of the 
original &%Class.")

(<=> 
   (instance ?ENTITY (GeneralizedUnionFn ?SUPERCLASS))
   (exists (?CLASS)
      (and
         (instance ?CLASS ?SUPERCLASS)
         (instance ?ENTITY ?CLASS))))

(instance GeneralizedIntersectionFn UnaryFunction)
(domainSubclass GeneralizedIntersectionFn 1 Class)
(range GeneralizedIntersectionFn Class)
(documentation GeneralizedIntersectionFn "A &%UnaryFunction that takes a 
&%Class of &%Classes as its single argument and returns a &%Class which 
is the intersection of all of the &%Classes in the original &%Class, i.e. 
the &%Class containing just those instances which are instances of all 
instances of the original &%Class.")

(<=> 
   (instance ?ENTITY (GeneralizedIntersectionFn ?SUPERCLASS))
   (forall (?CLASS)
         (=>
            (instance ?CLASS ?SUPERCLASS)
            (instance ?ENTITY ?CLASS))))

(instance NullSet Set)
(documentation NullSet "The &%Set that contains no instances.")

(equal NullSet (ComplementFn Entity))

(subclass PairwiseDisjointClass Class)
(documentation PairwiseDisjointClass "A &%Class of &%Classes is a 
&%PairwiseDisjointClass just in case every instance of the &%Class 
is either &%equal to or &%disjoint from every other instance of the 
&%Class.")

(=>
   (instance ?SUPERCLASS PairwiseDisjointClass)
   (forall (?CLASS1 ?CLASS2)
      (=>
         (and
            (instance ?CLASS1 ?SUPERCLASS)
            (instance ?CLASS2 ?SUPERCLASS))
         (or
            (equal ?CLASS1 ?CLASS2)
            (disjoint ?CLASS1 ?CLASS2)))))

(subclass MutuallyDisjointClass Class)
(documentation MutuallyDisjointClass "A &%Class of &%Classes is a 
&%MutuallyDisjointClass just in case there exists no instance of an 
instance of the original &%Class which is an instance of all of the 
instances of the original &%Class.")

(=>
   (instance ?CLASS MutuallyDisjointClass)
   (equal (GeneralizedIntersectionFn ?CLASS) NullSet))

;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     RELATION TYPES      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following part of the ontology covers the various classes under 
;; 'Relation'.  Most of the content here is taken from frame-ontology, 
;; abstract-algebra, kif-relations, and kif-extensions (ontologies 
;; available on the Ontolingua server).

(subclass BinaryRelation Relation)
(documentation BinaryRelation "&%BinaryRelations map instances of a 
&%Class to instances of another &%Class.  &%BinaryRelations are 
represented as slots in frame systems.")

(subclass TernaryRelation Relation)
(documentation TernaryRelation "&%TernaryRelations relate three items.  
The two &%subclasses of &%TernaryRelation are &%TernaryPredicate and 
&%BinaryFunction.")

(subclass QuaternaryRelation Relation)
(documentation QuaternaryRelation "&%QuaternaryRelations relate four 
items.  The two &%subclasses of &%QuaternaryRelation are 
&%QuaternaryPredicate and &%TernaryFunction.")

(subclass QuintaryRelation Relation)
(documentation QuintaryRelation "&%QuintaryRelations relate five items.  
The two &%subclasses of &%QuintaryRelation are &%QuintaryPredicate and 
&%QuaternaryFunction.")

(subclass Predicate Relation)
(documentation Predicate "A &%Predicate is a sentence-forming &%Relation.  
Each tuple in the &%Relation is a finite, ordered sequence of objects.  
The fact that a particular tuple is an element of a &%Predicate is denoted 
by '(*predicate* arg_1 arg_2 .. arg_n)', where the arg_i are the 
objects so related.  In the case of &%BinaryPredicates, the fact can
be read as `arg_1 is *predicate* arg_2' or `a *predicate* of
arg_1 is arg_2'.")

(subclass Function Relation)
(documentation Function "A &%Function is a term-forming &%Relation that 
maps from a n-tuple of arguments to a range and that associates this 
n-tuple with exactly one range element.  Note that the range is a &%Class, 
and each element of the range is an instance of the &%Class.")

(subclass UnaryFunction Function)
(subclass UnaryFunction BinaryRelation)
(documentation UnaryFunction "The &%Class of &%Functions that require a 
single argument.")

(=>
   (instance ?FUNCTION UnaryFunction)
   (valence ?FUNCTION 1))

(=>
   (and
      (instance ?FUNCTION UnaryFunction)
      (equal (AssignmentFn ?FUNCTION ?ARG) ?VALUE1)
      (equal (AssignmentFn ?FUNCTION ?ARG) ?VALUE2))
   (equal ?VALUE1 ?VALUE2))

(subclass BinaryFunction Function)
(subclass BinaryFunction TernaryRelation)
(documentation BinaryFunction "The &%Class of &%Functions that require 
two arguments.")

(=>
	(instance ?FUNCTION BinaryFunction)
	(valence ?FUNCTION 2))

(=>
   (and
      (instance ?FUNCTION BinaryFunction)
      (equal (AssignmentFn ?FUNCTION ?ARG1 ?ARG2) ?VALUE1)
      (equal (AssignmentFn ?FUNCTION ?ARG1 ?ARG2) ?VALUE2))
   (equal ?VALUE1 ?VALUE2))

(subclass TernaryFunction Function)
(subclass TernaryFunction QuaternaryRelation)
(documentation TernaryFunction "The &%Class of &%Functions that require 
exactly three arguments.")

(=>
	(instance ?FUNCTION TernaryFunction)
	(valence ?FUNCTION 3))

(=>
   (and
      (instance ?FUNCTION TernaryFunction)
      (equal (AssignmentFn ?FUNCTION ?ARG1 ?ARG2 ?ARG3) ?VALUE1)
      (equal (AssignmentFn ?FUNCTION ?ARG1 ?ARG2 ?ARG3) ?VALUE2))
   (equal ?VALUE1 ?VALUE2))

(subclass ContinuousFunction Function)
(documentation ContinuousFunction "&%Functions which are continuous.  
This concept is taken as primitive until representations for limits 
are devised.")

(subclass SententialOperator Predicate)
(documentation SententialOperator "This &%Class currently comprises all 
of the logical operators (viz. 'and', 'or', 'not', '=>', and '<=>').")

(subclass BinaryPredicate Predicate)
(subclass BinaryPredicate BinaryRelation)
(documentation BinaryPredicate "A &%Predicate relating two items - its 
valence is two.")

(=>
	(instance ?REL BinaryPredicate)
	(valence ?REL 2))

(subclass TernaryPredicate Predicate)
(subclass TernaryPredicate TernaryRelation)
(documentation TernaryPredicate "The &%Class of &%Predicates that require 
exactly three arguments.")

(=>
	(instance ?REL TernaryPredicate)
	(valence ?REL 3))

(subclass QuaternaryPredicate Predicate)
(subclass QuaternaryPredicate QuaternaryRelation)
(documentation QuaternaryPredicate "The &%Class of &%Predicates that 
require four arguments.")

(=>
	(instance ?REL QuaternaryPredicate)
	(valence ?REL 4))

(subclass QuintaryPredicate Predicate)
(subclass QuintaryPredicate QuintaryRelation)
(documentation QuintaryPredicate "The &%Class of &%Predicates that 
require five arguments.")

(=>
	(instance ?REL QuintaryPredicate)
	(valence ?REL 5))

(subclass VariableArityRelation Relation)
(documentation VariableArityRelation "The &%Class of &%Relations that 
do not have a fixed number of arguments.")

(=>
        (instance ?REL VariableArityRelation)
        (not
           (exists (?INT)
              (valence ?REL ?INT))))

(subclass CaseRole AsymmetricRelation)
(documentation CaseRole "The &%Class of &%Predicates relating the 
spatially distinguished parts of a &%Process. &%CaseRoles include, for 
example, the &%agent, &%patient or &%destination of an action, the flammable 
substance in a burning process, or the water that falls in rain.")

(=>
   (and
      (instance ?REL CaseRole)
      (holds ?REL ?PROCESS ?OBJ))
   (exists (?TIME)
      (overlapsSpatially (WhereFn ?PROCESS ?TIME) ?OBJ)))

(subclass ProbabilityRelation Relation)
(documentation ProbabilityRelation "The &%Class of &%Relations that 
permit assessment of the probability of an event or situation.")

(subclass SpatialRelation Relation)
(documentation SpatialRelation "The &%Class of &%Relations that are 
spatial in a wide sense.  This &%Class includes mereological relations, 
topological relations, and positional relations.")

(=>
   (and
      (instance ?REL SpatialRelation)
      (holds ?REL ?OBJ1 ?OBJ2))
   (overlapsTemporally (WhenFn ?OBJ1) (WhenFn ?OBJ2)))

(subclass TemporalRelation Relation)
(documentation TemporalRelation "The &%Class of temporal &%Relations.  
This &%Class includes notions of (temporal) topology of intervals, 
(temporal) schemata, and (temporal) extension.")

(subclass IntentionalRelation AsymmetricRelation)
(documentation IntentionalRelation "The &%Class of &%Relations between 
an &%Agent and an &%Entity, where the &%Relation requires that the 
&%Agent have awareness of the &%Entity.")

(subclass PropositionalAttitude IntentionalRelation)
(documentation PropositionalAttitude "The &%Class of 
&%IntentionalRelations where the &%Agent has awareness of a 
&%Proposition.")

(=>
   (and
      (instance ?REL PropositionalAttitude)
      (holds ?REL ?AGENT ?PROP))
   (not (holds ?REL ?AGENT (not ?PROP))))

(subclass ObjectAttitude IntentionalRelation)
(disjoint ObjectAttitude PropositionalAttitude)
(documentation ObjectAttitude "The &%Class of &%IntentionalRelations 
where the &%Agent has awareness of an instance of &%Physical.")

(instance AssignmentFn VariableArityRelation)
(domain AssignmentFn 1 Function)
(range AssignmentFn Entity)
(documentation AssignmentFn "If F is a function with a value for the 
objects denoted by N1,..., NK, then the term (AssignmentFn F N1 ... NK) 
denotes the value of applying F to the objects denoted by N1,..., NK.  
Otherwise, the value is undefined.")

(instance holds VariableArityRelation)
(domain holds 1 Relation)
(documentation holds "(holds P N1 ... NK) is true just in case 
the tuple of objects denoted by N1,..., NK is an element of 
the &%Relation P.")

(<=>
   (and
      (holds ?REL ?INST1 ?INST2)
      (instance ?REL UnaryFunction))
   (equal (AssignmentFn ?REL ?INST1) ?INST2))

(<=>
   (and
      (holds ?REL ?INST1 ?INST2 ?INST3)
      (instance ?REL BinaryFunction))
   (equal (AssignmentFn ?REL ?INST1 ?INST2) ?INST3))

(<=>
   (and
      (holds ?REL ?INST1 ?INST2 ?INST3 ?INST4)
      (instance ?REL TernaryFunction))
   (equal (AssignmentFn ?REL ?INST1 ?INST2 ?INST3) ?INST4))

(<=>
   (and
      (holds ?REL ?INST1 ?INST2 ?INST3 ?INST4 ?INST5)
      (instance ?REL QuaternaryFunction))
   (equal (AssignmentFn ?REL ?INST1 ?INST2 ?INST3 ?INST4) ?INST5))

(subclass RelationExtendedToQuantities Relation)
(documentation RelationExtendedToQuantities "A 
&%RelationExtendedToQuantities is a &%Relation that, when it is true on 
a sequence of arguments that are &%RealNumbers, it is also true on a 
sequence of &%ConstantQuantites with those magnitudes in some unit of 
measure.  For example, the &%lessThan relation is extended to quantities.  
This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2, 
(lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1, 
?NUMBER2, and ?UNIT, ?QUANTITY1 = (MeasureFn ?NUMBER1 ?UNIT), 
?QUANTITY2 = (MeasureFn ?NUMBER2 ?UNIT), and (lessThan ?NUMBER1 ?NUMBER2), 
for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.  
Note that, when a &%RelationExtendedToQuantities is extended from 
&%RealNumbers to &%ConstantQuantities, the &%ConstantQuantities must be 
measured along the same physical dimension.")

(=>
   (and
      (instance ?FUNCTION RelationExtendedToQuantities)
      (instance ?FUNCTION BinaryFunction)
      (instance ?NUMBER1 RealNumber)
      (instance ?NUMBER2 RealNumber)
      (equal (AssignmentFn ?FUNCTION ?NUMBER1 ?NUMBER2) ?VALUE))
   (forall (?UNIT)
      (=>
         (instance ?UNIT UnitOfMeasure)
         (equal (AssignmentFn ?FUNCTION 
                   (MeasureFn ?NUMBER1 ?UNIT) 
                   (MeasureFn ?NUMBER2 ?UNIT)) 
                (MeasureFn ?VALUE ?UNIT)))))

(=>
   (and
      (instance ?REL RelationExtendedToQuantities)
      (instance ?REL BinaryRelation)
      (instance ?NUMBER1 RealNumber)
      (instance ?NUMBER2 RealNumber)
      (holds ?REL ?NUMBER1 ?NUMBER2))
   (forall (?UNIT)
      (=>
         (instance ?UNIT UnitOfMeasure)
         (holds ?REL (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT)))))

(instance closedOn AsymmetricRelation)
(domain closedOn 1 Function)
(range closedOn Class)
(documentation closedOn "A &%BinaryFunction is closed on a &%Class 
if it is defined for all instances of the &%Class and its value is 
always an instance of the &%Class.")

(=>
   (and
      (closedOn ?FUNCTION ?CLASS)
      (instance ?FUNCTION UnaryFunction))
   (forall (?INST)
      (=> 
         (instance ?INST ?CLASS) 
         (instance (AssignmentFn ?FUNCTION ?INST) ?CLASS))))

(=>
   (and
      (closedOn ?FUNCTION ?CLASS)
      (instance ?FUNCTION BinaryFunction))
   (forall (?INST1 ?INST2)
      (=> 
         (and 
            (instance ?INST1 ?CLASS) 
            (instance ?INST2 ?CLASS))
         (instance (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?CLASS))))

(instance reflexiveOn AsymmetricRelation)
(domain reflexiveOn 1 BinaryRelation)
(domain reflexiveOn 2 Class)
(documentation reflexiveOn "A &%BinaryRelation is reflexive on a 
&%Class only if every instance of the &%Class bears the relation 
to itself.")

(=> 
   (reflexiveOn ?RELATION ?CLASS)
   (forall (?INST)
      (=> 
         (instance ?INST ?CLASS)
         (holds ?RELATION ?INST ?INST))))

(instance irreflexiveOn AsymmetricRelation)
(domain irreflexiveOn 1 BinaryRelation)
(domain irreflexiveOn 2 Class)
(documentation irreflexiveOn "A &%BinaryRelation is irreflexive on a 
&%Class only if no instance of the &%Class bears the relation to 
itself.")

(=> 
   (irreflexiveOn ?RELATION ?CLASS)
   (forall (?INST)
      (=> 
         (instance ?INST ?CLASS)
         (not 
            (holds ?RELATION ?INST ?INST)))))

(instance partialOrderingOn AsymmetricRelation)
(domain partialOrderingOn 1 BinaryRelation)
(domain partialOrderingOn 2 Class)
(documentation partialOrderingOn "A &%BinaryRelation is a partial 
ordering on a &%Class only if the relation is &%reflexiveOn the 
&%Class, and it is both an &%AntisymmetricRelation, and a 
&%TransitiveRelation.")

(=> 
   (partialOrderingOn ?RELATION ?CLASS)
   (and 
      (reflexiveOn ?RELATION ?CLASS)
      (instance ?RELATION TransitiveRelation)
      (instance ?RELATION AntisymmetricRelation)))

(instance totalOrderingOn AsymmetricRelation)
(domain totalOrderingOn 1 BinaryRelation)
(domain totalOrderingOn 2 Class)
(documentation totalOrderingOn "A &%BinaryRelation ?REL is a total 
ordering on a &%Class only if it is a partial ordering for which either 
(?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2 
in the &%Class.")

(<=> 
     (totalOrderingOn ?RELATION ?CLASS)
     (and 
          (partialOrderingOn ?RELATION ?CLASS)
          (trichotomizingOn ?RELATION ?CLASS)))

(instance trichotomizingOn AsymmetricRelation)
(domain trichotomizingOn 1 BinaryRelation)
(domain trichotomizingOn 2 Class)
(documentation trichotomizingOn "A &%BinaryRelation ?REL is 
trichotomizing on a &%Class only if, for all instances ?INST1 and ?INST2 
of the &%Class, at least one of the following holds:  (?REL ?INST1 ?INST2),
(?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2).")

(=>
   (trichotomizingOn ?RELATION ?CLASS)
   (forall (?INST1 ?INST2)
      (=> 
         (and 
            (instance ?INST1 ?CLASS)
            (instance ?INST2 ?CLASS))
         (or 
            (holds ?RELATION ?INST1 ?INST2) 
            (holds ?RELATION ?INST2 ?INST1) 
            (equal ?INST1 ?INST2)))))

(instance equivalenceRelationOn AsymmetricRelation)
(domain equivalenceRelationOn 1 BinaryRelation)
(domain equivalenceRelationOn 2 Class)
(documentation equivalenceRelationOn "A &%BinaryRelation is an 
&%equivalenceRelationOn a &%Class only if the relation is &%reflexiveOn 
the &%Class and it is both a &%TransitiveRelation and a 
&%SymmetricRelation.")

(=>
   (equivalenceRelationOn ?RELATION ?CLASS)
   (and
      (instance ?RELATION TransitiveRelation)
      (instance ?RELATION SymmetricRelation)
      (reflexiveOn ?RELATION ?CLASS))) 

(subclass AssociativeFunction BinaryFunction)
(documentation AssociativeFunction "A &%BinaryFunction is associative if 
bracketing has no effect on the value returned by the &%Function.  More 
precisely, a &%Function ?FUNCTION is associative just in case 
(?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to 
(?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2, 
and ?INST3.")

(=>
   (instance ?FUNCTION AssociativeFunction)
   (forall (?INST1 ?INST2 ?INST3)
      (=>
         (and
            (instance ?INST1 (DomainFn ?FUNCTION))
            (instance ?INST2 (DomainFn ?FUNCTION))
            (instance ?INST3 (DomainFn ?FUNCTION)))
         (equal (AssignmentFn ?FUNCTION ?INST1 (AssignmentFn ?FUNCTION ?INST1 ?INST2))
             (AssignmentFn ?FUNCTION (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?INST3)))))

(subclass CommutativeFunction BinaryFunction)
(documentation CommutativeFunction "A &%BinaryFunction is commutative if 
the ordering of the arguments of the function has no effect on the value 
returned by the function.  More precisely, a function ?FUNCTION is 
commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION 
?INST2 ?INST1), for all ?INST1 and ?INST2.")

(=>
   (instance ?FUNCTION CommutativeFunction)
   (forall (?INST1 ?INST2)
      (=>
         (and
            (instance ?INST1 (DomainFn ?FUNCTION))
            (instance ?INST2 (DomainFn ?FUNCTION)))
         (equal (AssignmentFn ?FUNCTION ?INST1 ?INST2) 
                (AssignmentFn ?FUNCTION ?INST2 ?INST1)))))

(instance distributes BinaryRelation)
(domain distributes 1 BinaryFunction)
(domain distributes 2 BinaryFunction)
(documentation distributes "A &%BinaryFunction ?FUNCTION1 is 
distributive over another &%BinaryFunction ?FUNCTION2 just in case 
(?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to 
(?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)), 
for all ?INST1, ?INST2, and ?INST3.") 

(=>
   (distributes ?FUNCTION1 ?FUNCTION2)
   (forall (?INST1 ?INST2 ?INST3)
      (=>
         (and
            (instance ?INST1 (DomainFn ?FUNCTION1))
            (instance ?INST2 (DomainFn ?FUNCTION1))
            (instance ?INST3 (DomainFn ?FUNCTION1))
            (instance ?INST1 (DomainFn ?FUNCTION2))
            (instance ?INST2 (DomainFn ?FUNCTION2))
            (instance ?INST3 (DomainFn ?FUNCTION2)))
         (equal (AssignmentFn ?FUNCTION1 ?INST1 
                        (AssignmentFn ?FUNCTION2 ?INST2 ?INST3))
                (AssignmentFn ?FUNCTION2 
                        (AssignmentFn ?FUNCTION1 ?INST1 ?INST2) 
                        (AssignmentFn ?FUNCTION1 ?INST1 ?INST3))))))

(instance identityElement AsymmetricRelation)
(domain identityElement 1 BinaryFunction)
(domain identityElement 2 Entity)
(documentation identityElement "An object ?ID is the identity element 
for BinaryFunction ?FUNCTION just in case, for every instance ?INST, 
applying ?FUNCTION to ?INST and ?ID results in ?INST.")

(=>
   (identityElement ?FUNCTION ?ID)
   (forall (?INST)
      (=>
         (instance ?INST (DomainFn ?FUNCTION))
         (equal (AssignmentFn ?FUNCTION ?ID ?INST) ?INST))))

(identityElement MultiplicationFn 1)
(identityElement AdditionFn 0)
(identityElement SubtractionFn 0)
(identityElement DivisionFn 1)

(subclass ReflexiveRelation BinaryRelation)
(documentation ReflexiveRelation "&%Relation ?REL is reflexive if 
(?REL ?INST ?INST) for all ?INST.")

(=>
   (instance ?REL ReflexiveRelation)
   (forall (?INST)
      (holds ?REL ?INST ?INST)))

(subclass IrreflexiveRelation BinaryRelation)
(documentation IrreflexiveRelation "&%Relation ?REL is irreflexive 
if (?REL ?INST ?INST) holds for no value of ?INST.")

(=>
   (instance ?REL IrreflexiveRelation)
   (forall (?INST)
      (not 
         (holds ?REL ?INST ?INST))))

(subclass SymmetricRelation BinaryRelation)
(documentation SymmetricRelation "A &%BinaryRelation ?REL is
symmetric just in case (?REL ?INST1 ?INST2) imples (?REL 
?INST2 ?INST1), for all ?INST1 and ?INST2.")


(=>
   (instance ?REL SymmetricRelation)
   (forall (?INST1 ?INST2)
      (=>
         (holds ?REL ?INST1 ?INST2)
         (holds ?REL ?INST2 ?INST2))))

(subclass AsymmetricRelation IrreflexiveRelation)
(subclass AsymmetricRelation AntisymmetricRelation)
(documentation AsymmetricRelation "A &%BinaryRelation is asymmetric only 
if it is both an &%AntisymmetricRelation and an &%IrreflexiveRelation.")

(subclass AntisymmetricRelation BinaryRelation)
(documentation AntisymmetricRelation "&%BinaryRelation ?REL is an 
&%AntisymmetricRelation if for distinct ?INST1 and ?INST2, (?REL ?INST1 
?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1 
and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1 
and ?INST2 are identical.  Note that it is possible for an 
&%AntisymmetricRelation to be a &%ReflexiveRelation.")

(=>
   (instance ?REL AntisymmetricRelation)
   (forall (?INST1 ?INST2)
      (=>
         (and
            (holds ?REL ?INST1 ?INST2)
            (holds ?REL ?INST2 ?INST1))
         (equal ?INST1 ?INST2))))

(subclass TrichotomizingRelation BinaryRelation)
(documentation TrichotomizingRelation "A &%BinaryRelation ?REL is a 
&%TrichotomizingRelation just in case all ordered pairs consisting of 
distinct individuals are elements of ?REL.") 

(=>
   (instance ?REL TrichotomizingRelation)
   (forall (?INST1 ?INST2)
      (or
         (holds ?REL ?INST1 ?INST2) 
         (equal ?INST1 ?INST2) 
         (holds ?REL ?INST2 ?INST1))))

(subclass TransitiveRelation BinaryRelation)
(documentation TransitiveRelation "A &%BinaryRelation ?REL is transitive 
if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3), 
for all ?INST1, ?INST2, and ?INST3.")

(=>
   (instance ?REL TransitiveRelation)
   (forall (?INST1 ?INST2 ?INST3)
      (=>
         (and
            (holds ?REL ?INST1 ?INST2)
            (holds ?REL ?INST2 ?INST3))
         (holds ?REL ?INST1 ?INST3))))

(subclass IntransitiveRelation BinaryRelation)
(documentation IntransitiveRelation "A &%BinaryRelation ?REL is 
intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not 
(?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3.")

(=> 
   (instance ?REL IntransitiveRelation)
   (forall (?INST1 ?INST2 ?INST3)
      (=> 
         (and 
            (holds ?REL ?INST1 ?INST2)
            (holds ?REL ?INST2 ?INST3))
         (not 
            (holds ?REL ?INST1 ?INST3)))))

(subclass PartialOrderingRelation TransitiveRelation)
(subclass PartialOrderingRelation AntisymmetricRelation)
(subclass PartialOrderingRelation ReflexiveRelation)
(documentation PartialOrderingRelation "A &%BinaryRelation is a partial 
ordering if it is a &%ReflexiveRelation, an &%AntisymmetricRelation, and 
a &%TransitiveRelation.")

(subclass TotalOrderingRelation PartialOrderingRelation)
(subclass TotalOrderingRelation TrichotomizingRelation)
(documentation TotalOrderingRelation  "A &%BinaryRelation is a 
&%TotalOrderingRelation if it is a &%PartialOrderingRelation 
and a &%TrichotomizingRelation.")

(=>
   (instance ?REL TotalOrderingRelation)
   (forall (?INST1 ?INST2)
      (or
         (holds ?REL ?INST1 ?INST2)
         (holds ?REL ?INST2 ?INST1))))

(subclass EquivalenceRelation TransitiveRelation)
(subclass EquivalenceRelation SymmetricRelation)
(subclass EquivalenceRelation ReflexiveRelation)
(documentation EquivalenceRelation "A &%BinaryRelation is an equivalence 
relation if it is a &%ReflexiveRelation, a &%SymmetricRelation, and a 
&%TransitiveRelation.")

(instance inverse SymmetricRelation)
(domain inverse 1 BinaryRelation)
(domain inverse 2 BinaryRelation)
(documentation inverse "The inverse of a &%BinaryRelation is a relation 
in which all the tuples of the original relation are reversed.  In 
other words, one &%BinaryRelation is the inverse of another if they are 
equivalent when their arguments are swapped.")

(=>
   (and
      (inverse ?REL1 ?REL2)
      (instance ?REL1 BinaryRelation)
      (instance ?REL2 BinaryRelation))
   (forall (?INST1 ?INST2)
      (<=>
         (holds ?REL1 ?INST1 ?INST2)
         (holds ?REL2 ?INST2 ?INST1))))

(instance cardinality AsymmetricRelation)
(domain cardinality 1 Class)
(domain cardinality 2 NonnegativeInteger)
(documentation cardinality "(cardinality ?CLASS ?NUMBER) means that the 
number of instances in ?CLASS is ?NUMBER.")

(=>
   (exists (?INST)
      (and
         (element ?INST ?SET)
         (instance ?SET FiniteSet)))
   (exists (?NUMBER)
      (and
         (cardinality ?SET ?NUMBER)
         (greaterThan ?NUMBER 0))))

(instance IdentityFn UnaryFunction)
(domain IdentityFn 1 Entity)
(range IdentityFn Entity)
(documentation IdentityFn "The value of the identity function is 
just its argument.")

(equal (IdentityFn ?INST) ?INST)

(instance DomainFn UnaryFunction)
(domain DomainFn 1 BinaryRelation)
(range DomainFn Class)
(documentation DomainFn "The domain of a &%BinaryRelation ?REL is
the &%Class of all things that bear ?REL to something.")

(<=> 
   (instance ?INST1 (DomainFn ?REL))
   (exists (?INST2)
      (holds ?REL ?INST1 ?INST2)))

(instance RangeFn UnaryFunction)
(domain RangeFn 1 BinaryRelation)
(range RangeFn Class)
(documentation RangeFn "The range of a &%BinaryRelation ?REL is the
&%Class of all things such that something bears ?REL to them.")

(<=> 
   (instance ?INST1 (RangeFn ?REL))
   (exists (?INST2)
      (holds ?REL ?INST2 ?INST1)))

;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   DEFINITIONS OF BASIC RELATIONS     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(subrelation agent effector)
(domain agent 1 Process)
(domain agent 2 Agent)
(documentation agent "(agent ?ACTION ?AGENT) means that the &%Agent 
?AGENT voluntarily initiates ?ACTION.  For example, Eve is an &%agent 
in the following proposition: Eve bit an apple.")

(subrelation attribute property)
(domain attribute 1 Object)
(domain attribute 2 Attribute)
(documentation attribute "(attribute ?OBJECT ?PROPERTY) means that 
?PROPERTY is a &%Attribute of ?OBJECT.  For example, 
(attribute MyLittleRedWagon Red).")

(=>
	(attribute ?OBJ ?ATTR)
	(not
		(manner ?OBJ ?ATTR)))

(instance authors AsymmetricRelation)
(domain authors 1 Agent)
(domain authors 2 Text)
(documentation authors "(&%authors ?AGENT ?TEXT) means that ?AGENT is 
creatively responsible for ?TEXT.  For example, Agatha Christie is 
author of 'Murder on the Orient Express'.")  

(=>
     (authors ?AGENT ?TEXT)
     (exists (?PROCESS)
          (and
               (agent ?PROCESS ?AGENT)
               (result ?PROCESS ?TEXT))))

(instance believes PropositionalAttitude)
(subrelation believes inScopeOfInterest)
(domain believes 1 Agent)
(domain believes 2 Formula)
(documentation believes "The epistemic predicate of belief.  
(&%believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition 
expressed by ?FORMULA.")

(instance causes AsymmetricRelation)
(domain causes 1 Process)
(domain causes 2 Process)
(documentation causes "The causation relation between situations or 
propositions.  (&%causes ?PROCESS1 ?PROCESS2) means that the state of 
affairs expressed by ?PROCESS1 brings about the state of affairs 
expressed by ?PROCESS2.") 

(subrelation component part)
(domain component 1 CorpuscularObject)
(domain component 2 CorpuscularObject)
(documentation component "A specialized common sense notion of part 
for heterogeneous parts of complexes. (&%component ?COMPONENT ?WHOLE) 
means that ?COMPONENT is a component of ?WHOLE. Examples of component 
include the doors and walls of a house, the states or provinces of a 
country, or the limbs and organs of an animal.  Compare 
&%material and &%piece, which are also subrelations 
of &%part.")

(subrelation material part)
(domain material 1 Substance)
(domain material 2 CorpuscularObject)
(documentation material "(&%material 
?SUBSTANCE ?OBJECT) means that ?OBJECT is structurally made up in 
part of ?SUBSTANCE. This relation encompasses the concepts of 
'composed of', 'made of', and 'formed of'.  For example, plastic would 
be a &%material my computer monitor.  Compare 
'component' and 'piece', which are also subrelations of 
&%part.")

(instance containsInformation AsymmetricRelation)
(subrelation containsInformation represents)
(domain containsInformation 1 ContentBearingObject)
(domain containsInformation 2 Proposition)
(documentation containsInformation "A subrelation of &%represents.  This 
predicate relates a &%ContentBearingObject to the &%Proposition that is 
expressed by the &%ContentBearingObject. Examples include the relationships 
between a physical novel and its story and between a printed score and its 
musical content.")

(instance copy EquivalenceRelation)
(domain copy 1 Object)
(domain copy 2 Object)
(documentation copy "relates an &%Object to an exact copy of the 
&%Object, where an exact copy is indistinguishable from the original 
with regard to every property except (possibly) spatial and/or temporal 
location.")

(=>
   (copy ?OBJ1 ?OBJ2)
   (forall (?ATTR)
      (=>
         (attribute ?OBJ1 ?ATTR)
         (attribute ?OBJ2 ?ATTR))))

(instance destination CaseRole)
(domain destination 1 Process)
(domain destination 2 Entity)
(documentation destination "(destination ?PROCESS ?GOAL) means that 
?GOAL is the target or goal of the Process ?PROCESS.  For example, 
Danbury would be the destination in the following proposition:  Bob went 
to Danbury.  Note that this is a very general &%CaseRole and, in 
particular, that it covers the concepts of 'recipient' and 'beneficiary'.  
Thus, John would be the &%destination in the following proposition:  
Tom gave a book to John.")

(instance developmentalForm AsymmetricRelation)
(instance developmentalForm TransitiveRelation)
(domain developmentalForm 1 OrganicObject)
(domain developmentalForm 2 OrganicObject)
(documentation developmentalForm "(&%developmentalForm ?OBJECT ?FORM) 
means that ?FORM is an earlier stage in the individual maturation of 
?OBJECT.  For example, tadpole and caterpillar are &%developmentalForms 
of frogs and butterflies, respectively.")

(instance direction CaseRole)
(domain direction 1 Process)
(domain direction 2 DirectionAttribute)
(documentation direction "(&%direction ?PROC ?ATTR) means that the 
&%Process ?PROC is moving in the direction ?ATTR.  For example, one 
would use this &%Predicate to represent the fact that Max is moving 
&%North.")

(instance duration ReflexiveRelation)
(domain duration 1 TimePosition)
(domain duration 2 TimeDuration)
(documentation duration "(&%duration ?POS ?TIME) means that the 
duration of the &%TimePosition ?POS is ?TIME.  Note that this 
&%Predicate can be used in conjunction with the &%Function &%WhenFn 
to specify the duration of any instance of &%Physical.")

(instance effector CaseRole)
(domain effector 1 Process)
(domain effector 2 Object)
(documentation effector "(&%effector ?ACTION ?ENTITY) means that 
?ENTITY is an active determinant, either animate or inanimate, of the 
&%Process ?ACTION, with or without voluntary intention.  For example, 
water is the &%effector of erosion in the following proposition:  the 
water eroded the coastline.")

(=>
   (instance ?PROCESS Process)
   (exists (?CAUSE)
      (effector ?PROCESS ?CAUSE)))

(domain employs 1 Organization)
(domain employs 2 CognitiveAgent)
(documentation employs "(&%employs ?ORG ?PERSON) means that ?ORG has 
hired ?PERSON and currently retains ?PERSON, on a salaried or 
contractual basis, to provide services in exchange for monetary 
compensation.")

(=>
   (employs ?ORG ?PERSON)
   (member ?PERSON ?ORG))

(instance equal EquivalenceRelation)
(instance equal RelationExtendedToQuantities)
(domain equal 1 Entity)
(domain equal 2 Entity)
(documentation equal "(equal ?ENTITY1 ?ENTITY2) is true just in case 
?ENTITY1 is identical with ?ENTITY2.")

(=>
   (equal ?THING1 ?THING2)
   (forall (?ATTR)
      (<=>
         (attribute ?THING1 ?ATTR)
         (attribute ?THING2 ?ATTR))))

(=>
   (equal ?THING1 ?THING2)
   (forall (?CLASS)
      (<=>
         (instance ?THING1 ?CLASS)
         (instance ?THING2 ?CLASS))))

(instance existant TemporalRelation)
(instance existant AsymmetricRelation)
(domain existant 1 Physical)
(domain existant 2 TimePosition)
(documentation existant "This relation holds between an instance of 
&%Physical and an instance of &%TimePosition just in case the temporal 
lifespan of the former includes the latter.  The constants &%located 
and &%existant are the basic spatial and temporal predicates, 
respectively.")

(<=>
   (existant ?PHYS ?TIME)
   (temporallyBetweenOrEqual (BeginFn (WhenFn ?PHYS)) ?TIME (EndFn (WhenFn ?PHYS))))

(=>
   (and
      (holdsDuring ?INTERVAL (holds ?REL ?INST1 ?INST2))
      (temporalPart ?POINT ?INTERVAL)
      (instance ?INST1 Physical)
      (instance ?INST2 Physical))
   (and
      (existant ?INST1 ?POINT)
      (existant ?INST2 ?POINT)))

(<=>
   (temporalPart ?POINT (WhenFn ?THING))
   (existant ?THING ?POINT))

(instance experiencer CaseRole)
(domain experiencer 1 Process)
(domain experiencer 2 Agent)
(documentation experiencer "(&%experiencer ?PROCESS ?AGENT) means 
that ?AGENT experiences the &%Process ?PROCESS.  For example, Yojo 
is the &%experiencer of seeing in the following proposition:  Yojo 
sees the fish.  Note that &%experiencer, unlike &%effector, does 
not entail a causal relation between its arguments.")

(instance frequency AsymmetricRelation)
(domainSubclass frequency 1 Process)
(domain frequency 2 TimeDuration)
(documentation frequency "(frequency ?PROC ?TIME) means that the 
&%Process type of ?PROC recurs after every interval of ?TIME.")

(instance capability TernaryPredicate)
(domainSubclass capability 1 Process)
(domain capability 2 CaseRole)
(domain capability 3 Object)
(documentation capability "(&%capability ?PROCESS ?ROLE ?OBJ) means 
that ?OBJ has the ability to play the role of ?ROLE in &%Processes of 
type ?PROCESS.")

(=>
   (and
      (instance ?ROLE CaseRole)
      (holds ?ROLE ?ARG1 ?ARG2)
      (instance ?ARG1 ?PROC))
   (capability ?PROC ?ROLE ?ARG2))

(instance exploits AsymmetricRelation)
(domain exploits 1 Object)
(domain exploits 2 Agent)
(documentation exploits "(&%exploits ?OBJ ?AGENT) means that ?OBJ is used 
by ?AGENT as a &%resource in an unspecified instance of &%Process.  This 
&%Predicate, as its corresponding axiom indicates, is a composition of the 
relations &%agent and &%resource.")

(=>
     (exploits ?OBJ ?AGENT)
     (exists (?PROCESS)
          (and
               (agent ?PROCESS ?AGENT)
               (resource ?PROCESS ?OBJ)))) 

(instance hasPurpose AsymmetricRelation)
(domain hasPurpose 1 Physical)
(domain hasPurpose 2 Formula)
(documentation hasPurpose "This &%Predicate expresses the concept of a 
conventional goal, i.e. a goal with a neutralized agent's intention.  
Accordingly, (&%hasPurpose ?THING ?FORMULA) means that the instance of 
&%Physical ?THING has, as its purpose, the &%Proposition expressed by 
?FORMULA.  Note that there is an important difference in meaning between 
the &%Predicates &%hasPurpose and &%result.  Although the second argument 
of the latter can satisfy the second argument of the former, 
a conventional goal is an expected and desired outcome, while a result 
may be neither expected nor desired.  For example, a machine process may 
have outcomes but no goals, aimless wandering may have an outcome but no 
goal; a learning process may have goals with no outcomes, and so on.")

(instance hasPurposeForAgent TernaryPredicate)
(domain hasPurposeForAgent 1 Physical)
(domain hasPurposeForAgent 2 Formula)
(domain hasPurposeForAgent 3 Agent)
(documentation hasPurposeForAgent "Expresses a cognitive attitude of an 
agent with respect to a particular instance of Physical.  More precisely, 
(&%hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of 
?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex 
issues are involved here.  In particular, the rules of inference of the 
first order predicate calculus are not truth-preserving for the second 
argument position of this &%Predicate.")

(=>
   (hasPurpose ?THING ?PURPOSE)
   (exists (?AGENT)
      (hasPurposeForAgent ?THING ?PURPOSE ?AGENT)))

(instance hasSkill AsymmetricRelation)
(domainSubclass hasSkill 1 Process)
(domain hasSkill 2 Human)
(documentation hasSkill "Similar to the &%capability &%Predicate 
with the additional restrictions that the &%Agent be a &%Human and 
that the ability be practised/demonstrated to some measurable degree.")

(=>
   (hasSkill ?PROC ?AGENT)
   (capability ?PROC agent ?AGENT))

(instance holdsRight AsymmetricRelation)
(domainSubclass holdsRight 1 Process)
(domain holdsRight 2 Agent)
(documentation holdsRight "Expresses a relationship between a 
subclass of &%Process and an &%Agent whereby the &%Agent has the right 
to perform at least one instance of the &%Process type specified, i.e. 
to be an &%agent of at least one instance of the &%Process type.")

(=>
    (holdsRight ?PROCESS ?AGENT)
    (capability ?PROCESS agent ?AGENT))

(instance holdsObligation AsymmetricRelation)
(domainSubclass holdsObligation 1 Process)
(domain holdsObligation 2 Agent)
(relatedInternalConcept holdsObligation holdsRight)
(documentation holdsObligation "Expresses a relationship between a 
subclass of &%Process and an &%Agent whereby the &%Agent has the 
obligation to perform exactly one instance of the &%Process type 
specified, i.e. to be an &%agent of just one instance of the &%Process 
type.")

(=>
    (holdsObligation ?PROCESS ?AGENT)
    (capability ?PROCESS agent ?AGENT))

(instance inScopeOfInterest AsymmetricRelation)
(domain inScopeOfInterest 1 Agent)
(domain inScopeOfInterest 2 Entity)
(documentation inScopeOfInterest "A very general &%Predicate.  
(&%inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the 
scope of interest of ?AGENT.  Note that the interest indicated can be 
either positive or negative, i.e. the ?AGENT can have an interest in 
avoiding or promoting ?ENTITY.")

(instance inhibits IrreflexiveRelation)
(domainSubclass inhibits 1 Process)
(domainSubclass inhibits 2 Process)
(documentation inhibits "A very general &%Predicate.  (&%inhibits 
?PROC1 ?PROC2) means that the &%Process ?PROC1 inhibits or hinders 
the occurrence of the &%Process ?PROC2.  For example, obstructing an 
object inhibits moving it.  Note that this is a relation between types 
of &%Processes, not between instances")

(subrelation instrument patient)
(domain instrument 1 Process)
(domain instrument 2 Object)
(documentation instrument "(instrument ?EVENT ?TOOL) means that ?TOOL 
is used by an agent in bringing about ?EVENT and that ?TOOL is not 
changed by ?EVENT.  For example, the key is an &%instrument in the 
following proposition: The key opened the door.  Note that &%instrument 
and &%resource cannot be satisfied by the same ordered pair.")

(instance knows PropositionalAttitude)
(subrelation knows inScopeOfInterest)
(domain knows 1 Agent)
(domain knows 2 Formula)
(documentation knows "The epistemic predicate of knowing.  (&%knows 
?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by 
?FORMULA.  Note that &%knows entails conscious awareness, so this 
&%Predicate cannot be used to express tacit or subconscious or 
unconscious knowledge.")

(=>
    (knows ?AGENT ?FORMULA)
    (believes ?AGENT ?FORMULA))

(instance inhabits AsymmetricRelation)
(domain inhabits 1 Organism)
(domain inhabits 2 Object)
(documentation inhabits "A very basic notion of living within something 
else.  (&%inhabits ?ORGANISM ?OBJECT) means that ?OBJECT is the residence, 
nest, home, etc. of ?ORGANISM.")

(instance located SpatialRelation)
(instance located PartialOrderingRelation)
(subrelation located partlyLocated)
(domain located 1 Physical)
(domain located 2 Object)
(relatedInternalConcept located existant)
(documentation located "A very general predicate.  (&%located 
?PHYS ?OBJ) means that ?PHYS is situated at ?OBJ, in some sense.  The 
&%Predicates &%located and &%existant are spatial and temporal 
predicates, respectively.")

(=>
   (located ?OBJ ?REGION)
   (forall (?SUBOBJ)
      (=>
         (part ?SUBOBJ ?OBJ)
         (located ?SUBOBJ ?REGION))))

(instance parent AsymmetricRelation)
(instance parent IntransitiveRelation)
(domain parent 1 Organism)
(domain parent 2 Organism)
(documentation parent "The general relationship of parenthood.  
(&%parent ?PARENT ?CHILD) means that ?PARENT is a biological parent 
of ?CHILD.")

(=>
   (parent ?PARENT ?CHILD)
   (before (BeginFn (WhenFn ?PARENT)) (BeginFn (WhenFn ?CHILD))))

(=>
   (and
      (parent ?PARENT ?CHILD)
      (subclass ?CLASS Organism)
      (instance ?PARENT ?CLASS))
   (instance ?CHILD ?CLASS))

(=>
   (parent ?PARENT ?CHILD)
   (or
      (mother ?PARENT ?CHILD)
      (father ?PARENT ?CHILD)))

(subrelation mother parent)
(domain mother 1 Animal)
(singleValued mother 1)
(documentation mother "The general relationship of motherhood.  
(&%mother ?MOTHER ?CHILD) means that ?MOTHER is the biological mother 
of ?CHILD.")

(=>
   (mother ?MOTHER ?CHILD)
   (attribute ?MOTHER Female))

(subrelation father parent)
(domain father 1 Animal)
(singleValued father 1)
(documentation father "The general relationship of fatherhood.  
(&%father ?FATHER ?CHILD) means that ?FATHER is the biological father
of ?CHILD.")

(=>
   (father ?FATHER ?CHILD)
   (attribute ?FATHER Male))

(instance partlyLocated ReflexiveRelation)
(instance partlyLocated BinaryPredicate)
(domain partlyLocated 1 Object)
(domain partlyLocated 2 Region)
(documentation partlyLocated "The predicate of partial localization.  
For example, Istanbul is partly located in Asia.  Note that this is the 
most basic localization relation:  &%located and &%exactlyLocated 
are both subrelations of &%partlyLocated.") 

(=>
   (partlyLocated ?OBJ ?REGION)
   (exists (?SUBOBJ)
      (and
         (part ?SUBOBJ ?OBJ)
         (exactlyLocated ?SUBOBJ ?REGION))))

(=>
   (partlyLocated ?OBJ ?REGION)
   (overlapsSpatially ?OBJ ?REGION))

(subrelation exactlyLocated located)
(documentation exactlyLocated "The actual, minimal location of an 
Object.  This is a subrelation of the more general Predicate 
&%located.")

(=>
   (exactlyLocated ?OBJ ?REGION)
   (not
      (exists (?OTHEROBJ)
         (and
            (exactlyLocated ?OTHEROBJ ?REGION)
            (not
               (equal ?OTHEROBJ ?OBJ))))))

(instance WhereFn SpatialRelation)
(instance WhereFn BinaryFunction)
(domain WhereFn 1 Physical)
(domain WhereFn 2 TimePoint)
(range WhereFn Region)
(relatedInternalConcept WhereFn WhenFn)
(documentation WhereFn "Maps an &%Object and a &%TimePoint at which the 
&%Object exists to the &%Region where the &%Object existed at that 
&%TimePoint.")

(=>
   (equal (WhereFn ?THING ?TIME) ?REGION)
   (holdsDuring ?TIME (exactlyLocated ?THING ?REGION)))

(subrelation manner property)
(domain manner 1 Process)
(domain manner 2 Abstract)
(documentation manner "(&%manner ?PROCESS ?MANNER) means that the 
&%Process ?PROCESS is qualified by the &%Attribute ?MANNER.  The &%Attributes 
of &%Processes are usually denoted by adverbs and include things like the 
speed of the wind, the style of a dance, or the intensity of a sports 
competition.")

(<=>
	(manner ?PROC ?ATTR)
	(not
		(attribute ?PROC ?ATTR)))

(instance member SpatialRelation)
(instance member AsymmetricRelation)
(instance member IntransitiveRelation)
(subrelation member part)
(domain member 1 Object)
(domain member 2 Collection)
(relatedInternalConcept member instance)
(relatedInternalConcept member element)
(documentation member "A specialized common sense notion of part for 
uniform parts of &%Collections.  For example, each sheep in a flock of 
sheep would have the relationship of member to the flock.")

(=>
   (and
      (member ?OBJ1 ?COLL)
      (member ?OBJ2 ?COLL))
   (not
         (overlapsSpatially ?OBJ1 ?OBJ2)))

(instance needs ObjectAttitude)
(subrelation needs inScopeOfInterest)
(domain needs 1 Agent)
(domain needs 2 Object)
(documentation needs "(&%needs ?AGENT ?OBJECT) means that ?OBJECT is 
physically required for the continued existence of ?AGENT.")

(=>
    (needs ?AGENT ?OBJECT)
    (wants ?AGENT ?OBJECT))

(instance origin CaseRole)
(domain origin 1 Process)
(domain origin 2 Object)
(documentation origin "(&%origin ?PROCESS ?SOURCE) means that ?SOURCE 
indicates where the ?Process began.  Note that this relation implies 
that ?SOURCE is present at the beginning of the process, but need not 
participate throughout the process.  For example, the submarine is the 
&%origin in the following proposition: the missile was launched from a 
submarine.")

(=>
   (origin ?PROCESS ?OBJ)
   (located (WhereFn ?PROCESS (BeginFn (WhenFn ?PROCESS))) (WhereFn ?OBJ (BeginFn (WhenFn ?OBJ)))))

(instance part SpatialRelation)
(instance part PartialOrderingRelation)
(domain part 1 Object)
(domain part 2 Object)
(documentation part "The basic mereological relation.  All other 
mereological relations are defined in terms of this one.  
(&%part ?PART ?WHOLE) implies that the existence of ?PART is independent 
of the existence of ?WHOLE.  Note that, since &%part is a 
&%ReflexiveRelation, every &%Object is a part of itself.")

(=>
   (and
      (part ?OBJ1 ?OBJ2)
      (part ?OBJ2 ?OBJ1))
   (equal ?OBJ1 ?OBJ2))

(instance properPart AsymmetricRelation)
(instance properPart TransitiveRelation)
(subrelation properPart part)
(documentation properPart "(&%properPart ?OBJ1 ?OBJ2) means that 
?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a 
&%TransitiveRelation and &%AsymmetricRelation (hence an 
&%IrreflexiveRelation).")

(<=> 
   (properPart ?OBJ1 ?OBJ2)
      (and
	   (part ?OBJ1 ?OBJ2)
	   (not
	      (part ?OBJ2 ?OBJ1))))

(instance path CaseRole)
(domain path 1 Motion)
(domain path 2 Region)
(documentation path "(&%path ?MOTION ?PATH) means that ?PATH is a route 
along which ?MOTION occurs.  For example, Highway 101 is the path in the 
following proposition:  the car drove up Highway 101.")

(=>
   (and
      (path ?PROCESS ?PATH)
      (origin ?PROCESS ?SOURCE)
      (destination ?PROCESS ?DEST))
   (forall (?OBJ)
      (=>
         (part ?OBJ ?PATH)
         (between ?SOURCE ?OBJ ?DEST))))

(subrelation piece part)
(domain piece 1 Substance)
(domain piece 2 Substance)
(documentation piece "A specialized common sense notion of part for 
arbitrary parts of &%Substances.  Quasi-synonyms are: chunk, hunk, bit, 
etc.  Compare the other subrelations of &%part, viz. &%component 
and &%material.")

(=>
   (piece ?SUBSTANCE1 ?SUBSTANCE2)
   (forall (?CLASS)
      (=>
         (instance ?SUBSTANCE1 ?CLASS)
         (instance ?SUBSTANCE2 ?CLASS))))

(instance possesses AsymmetricRelation)
(domain possesses 1 Agent)
(domain possesses 2 Object)
(documentation possesses "&%Relation that holds between an &%Agent and 
an &%Object when the &%Agent has ownership of the &%Object.")

(=>
   (possesses ?PERSON ?OBJ)
   (exists (?TYPE)
      (and
         (holdsRight ?PERSON ?TYPE)
         (forall (?PROCESS)
            (=>
               (instance ?PROCESS ?TYPE)
               (patient ?PROCESS ?OBJ))))))

(=>
   (and
      (instance ?TIME TimePosition)
      (holdsDuring ?TIME (possesses ?AGENT1 ?OBJ))
      (holdsDuring ?TIME (possesses ?AGENT2 ?OBJ)))
   (equal ?AGENT1 ?AGENT2))

(instance precondition AsymmetricRelation)
(instance precondition TransitiveRelation)
(domain precondition 1 Entity)
(domain precondition 2 Entity)
(documentation precondition "A very general &%Predicate.  (&%precondition 
?ENTITY1 ?ENTITY2) means that ?ENTITY2 can exist or be true only if 
?ENTITY1 exists or is true.  At some point, this &%Predicate should 
probably be broken up into more specific &%Predicates with more 
restrictive &%domain restrictions.")

(instance property AsymmetricRelation)
(domain property 1 Physical)
(domain property 2 Abstract)
(documentation property "This &%Predicate holds between an instance of 
&%Physical and an instance of &%Attribute.  (property ?THING ?ATTR) 
means that ?THING has the &%Attribute ?ATTR.  The two subrelations of 
&%property are &%attribute and &%manner.")

(instance prevents IrreflexiveRelation)
(domainSubclass prevents 1 Process)
(domainSubclass prevents 2 Process)
(documentation prevents "A very general &%Predicate.  (&%prevents ?PROC1 
?PROC2) means that ?PROC1 prevents the occurrence of ?PROC2.  In other 
words, if ?PROC1 is occurring in a particular time and place, ?PROC2 
cannot occur at the same time and place.  For example, innoculating 
prevents contracting disease.  Note that this is a relation between types 
of &%Processes, not between instances.") 

(instance refers BinaryPredicate)
(domain refers 1 Physical)
(domain refers 2 Entity)
(documentation refers "(&%refers ?OBJ1 ?OBJ2) means that ?OBJ1 
mentions or includes a reference to ?OBJ2. Note that &%refers is 
more general in meaning than &%represents, because presumably something 
can represent something else only if it refers to this other thing.  
For example, an article whose topic is a recent change in the price of 
oil may refer to many other things, e.g. the general state of the economy, 
the weather in California, the prospect of global warming, the options 
for alternative energy sources, the stock prices of various oil companies, 
etc.")

(instance represents BinaryPredicate)
(domain represents 1 Physical)
(domain represents 2 Entity)
(subrelation represents refers)
(documentation represents "A very general semiotics &%Predicate.  
(&%represents ?THING ?ENTITY) means that the &%Representation ?THING 
in some way expresses, connotes, pictures, describes, etc. ?ENTITY.  
The &%Predicates &%containsInformation and &%realization are 
subrelations of &%represents.  Note that &%represents is a subrelation 
of &%refers, since something can represent something else only if it 
refers to this other thing.") 

(=>
   (represents ?REP ?ENTITY)
   (exists (?LANGUAGE)
      (representsInLanguage ?REP ?ENTITY ?LANGUAGE)))

(instance representsForAgent TernaryPredicate)
(domain representsForAgent 1 Physical)
(domain representsForAgent 2 Entity)
(domain representsForAgent 3 Agent)
(documentation representsForAgent "A very general predicate.  
(&%representsForAgent ?THING ?ENTITY ?AGENT) means that the ?AGENT 
chooses to use the &%instance of &%Physical ?THING to 'stand for' 
?ENTITY.")

(instance representsInLanguage TernaryPredicate)
(domain representsInLanguage 1 Physical)
(domain representsInLanguage 2 Entity)
(domain representsInLanguage 3 Language)
(documentation representsInLanguage "A very general predicate.  
(&%representsInLanguage ?THING ?ENTITY ?LANGUAGE means that the 
&%instance of &%Physical ?THING stands for ?ENTITY in the language 
?LANGUAGE.")

(=>
   (representsInLanguage ?REP ?ENTITY ?LANGUAGE)
   (exists (?AGENT)
      (representsForAgent ?REP ?ENTITY ?AGENT)))

(subrelation equivalentContentClass subsumesContentClass)
(instance equivalentContentClass EquivalenceRelation)
(domainSubclass equivalentContentClass 1 ContentBearingObject)
(domainSubclass equivalentContentClass 2 ContentBearingObject)
(documentation equivalentContentClass "A &%BinaryPredicate that relates two 
subclasses of &%ContentBearingObject.  (&%equivalentContentClass ?CLASS1 
?CLASS2) means that the content expressed by each instance of ?CLASS1 is 
also expressed by each instance of ?CLASS2, and vice versa.  An example 
would be the relationship between English and Russian editions of Agatha 
Christie's 'Murder on the Orient Express'.  Note that 
(&%equivalentContentClass ?CLASS1 ?CLASS2) implies (&%subsumesContentClass 
?CLASS1 ?CLASS2) and (&%subsumesContentClass ?CLASS2 ?CLASS1).")

(<=>
   (and
      (subsumesContentClass ?CLASS1 ?CLASS2)
      (subsumesContentClass ?CLASS2 ?CLASS1))
   (equivalentContentClass ?CLASS1 ?CLASS2))

(instance subsumesContentClass PartialOrderingRelation)
(domainSubclass subsumesContentClass 1 ContentBearingObject)
(domainSubclass subsumesContentClass 2 ContentBearingObject)
(documentation subsumesContentClass "A &%BinaryPredicate that relates two 
subclasses of &%ContentBearingObject.  (&%subsumesContentClass ?CLASS1 
?CLASS2) means that the content expressed by each instance of ?CLASS1 is 
also expressed by each instance of ?CLASS2.  Examples include the 
relationship between a poem and one of its stanzas or between a book and 
one of its chapters.  Note that this is a relation between subclasses of 
&%ContentBearingObject, rather than instances.  If one wants to relate 
instances, the &%Predicate &%subsumesContentInstance can be used.  Note 
that &%subsumesContentClass is needed in many cases.  Consider, for 
example, the relation between the King James edition of the Bible and its 
Book of Genesis.  This relation holds for every copy of this edition and 
not just for a single instance.")

(<=>
   (subsumesContentClass ?CLASS1 ?CLASS2)
   (forall (?INFO ?OBJ1 ?OBJ2)
      (=>
         (and
            (instance ?OBJ1 ?CLASS1)
            (instance ?OBJ2 ?CLASS2)
            (containsInformation ?OBJ1 ?INFO))
         (containsInformation ?OBJ2 ?INFO))))

(subrelation equivalentContentInstance subsumesContentInstance)
(instance equivalentContentInstance EquivalenceRelation)
(domain equivalentContentInstance 1 ContentBearingObject)
(domain equivalentContentInstance 2 ContentBearingObject)
(relatedInternalConcept equivalentContentInstance equivalentContentClass)
(documentation equivalentContentInstance "A &%BinaryPredicate relating two 
instances of &%ContentBearingObject.  (&%equivalentContentInstance 
?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to 
the content expressed by ?OBJ2.  An example would be the relationship 
between a handwritten draft of a letter to one's lawyer and a typed 
copy of the same letter.  Note that (&%equivalentContentInstance ?OBJ1 
?OBJ2) implies (&%subsumesContentInstance ?OBJ1 ?OBJ2) and 
(&%subsumesContentInstance ?OBJ2 ?OBJ2).")

(<=>
   (and
      (subsumesContentInstance ?OBJ1 ?OBJ2)
      (subsumesContentInstance ?OBJ2 ?OBJ1))
   (equivalentContentInstance ?OBJ1 ?OBJ2))

(=>
   (and
      (equivalentContentInstance ?SENT1 ?SENT2)
      (instance ?SENT1 Sentence)
      (instance ?SENT2 Sentence))
   (<=> ?SENT1 ?SENT2))

(instance subsumesContentInstance PartialOrderingRelation)
(domain subsumesContentInstance 1 ContentBearingObject)
(domain subsumesContentInstance 2 ContentBearingObject)
(relatedInternalConcept subsumesContentInstance subsumesContentClass)
(documentation subsumesContentInstance "A &%BinaryPredicate relating two 
instances of &%ContentBearingObject.  (&%subsumesContentInstance ?OBJ1 ?OBJ2) 
means that the content expressed by ?OBJ2 is part of the content expressed 
by ?OBJ1.  An example is the relationship between a handwritten poem and 
one of its stanzas.  Note that this is a relation between instances, 
rather than &%Classes.  If one wants to assert a content relationship 
between &%Classes, e.g. between the version of an intellectual work and a 
part of that work, the relation &%subsumesContentClass should be used.")

(<=>
   (subsumesContentInstance ?OBJ1 ?OBJ2)
   (forall (?INFO)
      (=>
         (containsInformation ?OBJ1 ?INFO)
         (containsInformation ?OBJ2 ?INFO))))

(=>
   (and
      (subsumesContentInstance ?SENT1 ?SENT2)
      (instance ?SENT1 Sentence)
      (instance ?SENT2 Sentence))
   (=> ?SENT1 ?SENT2))

(subrelation realization represents)
(instance realization AsymmetricRelation)
(domain realization 1 ContentBearingProcess)
(domain realization 2 Proposition)
(relatedInternalConcept realization equivalentContentInstance)
(relatedInternalConcept realization containsInformation)
(documentation realization "A subrelation of &%represents.  
(&%realization ?PROCESS ?PROP) means that ?PROCESS is a Process which 
expresses the content of ?PROP. Examples include a particular musical 
performance, which realizes the content of a musical score, or the 
reading of a poem.")

(=>
   (realization ?PROCESS ?PROP)
   (exists (?OBJ)
      (and
         (instance ?OBJ ContentBearingObject)
         (containsInformation ?OBJ ?PROP))))

(subrelation resource patient)
(domain resource 1 Process)
(domain resource 2 Object)
(documentation resource "(&%resource ?PROCESS ?RESOURCE) means that 
?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS, 
and as a consequence is changed by ?PROCESS.  For example, soap is a 
&%resource in the following proposition:  the gun was carved out of soap.  
Note that &%resource differs from &%instrument, another subrelation of 
&%patient, in that it is structurally altered in some way by the 
&%Process.")

(<=>
   (resource ?PROC ?OBJ)
   (not
      (instrument ?PROC ?OBJ)))

(=>
     (and
          (resource ?PROC ?OBJ)
          (holdsDuring (ImmediatePastFn (WhenFn ?PROC)) (measure ?OBJ ?QUANT1))
          (holdsDuring (ImmediateFutureFn (WhenFn ?PROC)) (measure ?OBJ ?QUANT2)))
     (greaterThan ?QUANT1 ?QUANT2)) 

(subrelation result patient)
(domain result 1 Process)
(domain result 2 Object)
(documentation result "(result ?ACTION ?OUTPUT) means that ?OUTPUT is 
a product of ?ACTION.  For example, house is a &%result in the 
following proposition: Eric built a house.")

(=>
   (result ?PROC ?OBJ)
   (forall (?TIME)
      (=>
         (before ?TIME (BeginFn (When ?PROC)))
         (not
            (existant ?OBJ ?TIME)))))

(instance sentenceOfLanguage AsymmetricRelation)
(domain sentenceOfLanguage 1 Sentence)
(domain sentenceOfLanguage 2 Language)
(documentation sentenceOfLanguage "(&%sentenceOfLanguage ?SENT ?LANG) means 
that ?SENT is a &%Sentence of the &%Language ?LANG.")

(<=> 
	(sentenceOfLanguage?SENT ?LANGUAGE) 
	(exists (?PROP) 
		(representsInLanguage ?SENT ?PROP ?LANGUAGE)))

(instance subCollection TransitiveRelation)
(instance subCollection IrreflexiveRelation)
(domain subCollection 1 Collection)
(domain subCollection 2 Collection)
(documentation subCollection "(&%subCollection ?COLL1 ?COLL2) means that 
the &%Collection ?COLL1 is a proper part of the &%Collection ?COLL2.")

(instance subPlan TransitiveRelation)
(instance subPlan IrreflexiveRelation)
(domain subPlan 1 Plan)
(domain subPlan 2 Plan)
(documentation subPlan "(&%subPlan ?PLAN1 ?PLAN2) means that ?PLAN1 
is a &%Plan which is a proper part of ?PLAN2.  This relation is generally 
used to relate a supporting &%Plan to the overall &%Plan in a particular 
context.")

(instance subProcess PartialOrderingRelation)
(domain subProcess 1 Process)
(domain subProcess 2 Process)
(documentation subProcess "(&%subProcess ?SUBPROC ?PROC) means that ?SUBPROC 
is a subprocess of ?PROC.  A subprocess is here understood as a temporally 
distinguished part (proper or not) of a &%Process.")

(=>
   (subProcess ?SUBPROC ?PROC)
      (or
         (equal (WhenFn ?SUBPROC) (WhenFn ?PROC))
         (during (WhenFn ?SUBPROC) (WhenFn ?PROC))))

(=>
   (subProcess ?SUBPROC ?PROC)
   (forall (?REGION)
      (=>
         (located ?PROC ?REGION)
         (located ?SUBPROC ?REGION))))

(instance patient CaseRole)
(domain patient 1 Process)
(domain patient 2 Entity)
(documentation patient "(&%patient ?PROCESS ?ENTITY) means that ?ENTITY 
is a participant in ?PROCESS that may be moved, said, experienced, etc.  
For example, the direct objects in the sentences 'The cat swallowed the 
canary' and 'Billy likes the beer' would be examples of &%patients.  Note 
that the &%patient of a &%Process may or may not undergo structural 
change as a result of the &%Process.  The &%CaseRole of &%patient is used 
when one wants to specify as broadly as possible the object of a 
&%Process.")

(instance uses AsymmetricRelation)
(domain uses 1 Object)
(domain uses 2 Agent)
(documentation uses "(&%uses ?OBJECT AGENT) means that ?OBJECT is used by 
?AGENT as an instrument in an unspecified &%Process.  This &%Predicate, 
as its corresponding axiom indicates, is a composition of the &%CaseRoles 
&%agent and &%instrument.")

(=>
     (uses ?OBJ ?AGENT)
     (exists (?PROC)
          (and
               (agent ?PROC ?AGENT)
               (instrument ?PROC ?OBJ))))

(instance version AsymmetricRelation)
(instance version TransitiveRelation)
(domainSubclass version 1 Artifact)
(domainSubclass version 2 Artifact)
(documentation version "Some &%Artifacts have a life cycle with discrete 
stages or versions.  (&%version ARTIFACT1 ARTIFACT2) means that ARTIFACT1 
is a version of ARTIFACT2.  Note that this &%Predicate relates subclasses of 
&%Artifact and not instances.")

(=>
    (version ?ARTIFACT1 ?ARTIFACT2)
    (subclass ?ARTIFACT1 ?ARTIFACT2))

(instance wants ObjectAttitude)
(subrelation wants inScopeOfInterest)
(relatedInternalConcept wants desires)
(domain wants 1 Agent)
(domain wants 2 Object)
(documentation wants "(&%wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT, i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals.")

(=>
   (wants ?AGENT ?OBJ)
   (exists (?PURP)
      (hasPurposeForAgent ?OBJ ?PURP ?AGENT)))

(instance desires PropositionalAttitude)
(subrelation desires inScopeOfInterest)
(relatedInternalConcept desires wants)
(domain desires 1 Agent)
(domain desires 2 Formula)
(documentation desires "(&%desires ?AGENT ?FORMULA) means that ?AGENT wants to bring about the state of affairs expressed by ?FORMULA.  Note that &%desires is distinguished from &%wants only in that the former is a &%PropositionalAttitude, while &%wants is an &%ObjectAttitude.")

;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  ARTIFACT HIERARCHY  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;


;; This section of the ontology will eventually encompass all artifacts.  For the 
;; time being, it is mostly restricted to the content of the Ontolingua ontology 
;; component-assemblies, which covers the types of elements used to construct 
;; engineering systems.

(subclass StationaryArtifact Artifact)
(documentation StationaryArtifact "A &%StationaryArtifact is an &%Artifact 
that has a fixed spatial location.  Most instances of this &%Class are 
architectural works, e.g. the Eiffel Tower, the Great Pyramids, office towers, 
single-family houses, etc.")

(=>
   (instance ?ARTIFACT StationaryArtifact)
   (exists (?PLACE)
      (forall (?TIME)
         (equal (WhereFn ?ARTIFACT ?TIME) ?PLACE))))

(subclass Building StationaryArtifact)
(documentation Building "The Class of StationaryArtifacts which are 
intended to house Humans and their Activities.")

(=>
   (instance ?BUILDING Building)
   (or
      (exists (?HUMAN)
         (and
            (instance ?HUMAN Human)
            (inhabits ?HUMAN ?BUILDING)))
      (exists (?ACT)
         (and
            (instance ?ACT Activity)
            (located ?ACT ?BUILDING)))))

(subclass Device Artifact)
(documentation Device "A &%Device is an &%Artifact whose purpose is to 
serve as an &%instrument in a specific type of task.")

(=>
   (instance ?DEVICE Device)
   (exists (?PROC)
      (and
         (instance ?PROC Process)
         (instrument ?PROC ?DEVICE))))

(subclass TransportationDevice Device)
(documentation TransportationDevice "A &%TransportationDevice is a &%Device 
which serves as an &%instrument in &%Transportation &%Processes.")

(subclass Machine Device)
(documentation Machine "&%Machines are &%Devices which are self-powered, 
i.e. their energy does not come from the exercion of &%Humans or 
&%Animals.")

(subclass EngineeringElement Artifact)
(documentation EngineeringElement "An &%EngineeringElement is any element 
that is used in the construction of a &%Device.")

(=>
   (instance ?ELEMENT EngineeringElement)
   (exists (?DEVICE)
      (and
         (instance ?DEVICE Device)
         (part ?ELEMENT ?DEVICE))))

(subclass EngineeringComponent EngineeringElement)
(documentation EngineeringComponent "A fundamental concept that applies 
in many engineering domains.  An &%EngineeringComponent is an 
&%EngineeringElement that is a physically whole object, such as one might 
see listed as standard parts in a catalog.  The main difference betweeen 
&%EngineeringComponents and arbitrary globs of matter is that 
&%EngineeringComponents are object-like in a modeling sense.  Thus, an 
&%EngineeringComponent is not an arbtrary subregion, but a part of a 
system with a stable identity.")

(=>
   (instance ?COMP EngineeringComponent)
   (exists (?DEVICE)
      (and
         (instance ?DEVICE Device)
         (component ?COMP ?DEVICE))))

(subclass Junction EngineeringElement)
(documentation Junction "An interface between two &%EngineeringElements 
that have different electrical characteristics.")

(subclass Terminal EngineeringElement)
(documentation Terminal "The end of an &%EngineeringElement where signals 
are either transmitted or received.")

(subrelation engineeringSubcomponent properPart)
(domain engineeringSubcomponent 1 EngineeringComponent)
(domain engineeringSubcomponent 2 EngineeringComponent)
(documentation engineeringSubcomponent "(&%engineeringSubcomponent ?SUB 
?SUPER) means that the &%EngineeringComponent ?SUB is structurally a 
&%properPart ?SUPER.  This relation is an &%AsymmetricRelation, since 
two &%EngineeringComponents cannot be subcomponents of each other.")

(instance connectedEngineeringComponents SymmetricRelation)
(instance connectedEngineeringComponents IrreflexiveRelation)
(subrelation connectedEngineeringComponents connected)
(domain connectedEngineeringComponents 1 EngineeringComponent)
(domain connectedEngineeringComponents 2 EngineeringComponent)
(documentation connectedEngineeringComponents "This is the most general 
connection relation between &%EngineeringComponents.  If 
(&%connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor 
?COMP2 can be an &%engineeringSubcomponent of the other.  The relation 
&%connectedEngineeringComponents is a &%SymmetricRelation; there is no 
information in the direction of connection between two components.  It is 
also an &%IrreflexiveRelation; no &%EngineeringComponent bears this relation 
to itself.  Note that this relation does not associate a name or type 
with the connection.")

(=>
   (connectedEngineeringComponents ?COMP1 ?COMP2)
   (and
      (not
         (engineeringSubcomponent ?COMP1 ?COMP2))
      (not
         (engineeringSubcomponent ?COMP2 ?COMP1))))

(=> 
   (connectedEngineeringComponents ?COMP1 ?COMP2)
   (not 
      (or 
         (instance ?COMP1 EngineeringConnection) 
         (instance ?COMP2 EngineeringConnection))))

(<=>
   (connectedEngineeringComponents ?COMP1 ?COMP2)
   (exists (?CONNECTION)
      (connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2))) 
         
(instance EngineeringComponentFn UnaryFunction)
(inverse EngineeringComponentFn TerminalFn)
(domain EngineeringComponentFn 1 Terminal)
(range EngineeringComponentFn EngineeringComponent)
(documentation EngineeringComponentFn "A &%UnaryFunction that maps a 
&%Terminal to its corresponding &%EngineeringComponent.")

(instance TerminalFn UnaryFunction)
(domain TerminalFn 1 EngineeringComponent)
(range TerminalFn Terminal)
(documentation TerminalFn "A &%UnaryFunction that maps an 
&%EngineeringComponent to its corresponding &%Terminal.")

(instance JunctionFn UnaryFunction)
(domain JunctionFn 1 Terminal)
(range JunctionFn Junction)
(documentation JunctionFn "A &%UnaryFunction that maps a &%Terminal to 
its corresponding &%Junction.")

(subclass EngineeringConnection EngineeringComponent)
(documentation EngineeringConnection "An &%EngineeringConnection is an 
&%EngineeringComponent that represents a connection relationship between 
two other &%EngineeringComponents.  It is a reification of the 
&%Predicate &%connectedEngineeringComponents.  That means that whenever 
this &%Predicate holds between two &%EngineeringComponents, there exists an 
&%EngineeringConnection.  The practical reason for reifying a relationship 
is to be able to attach other information about it. For example, one
might want to say that a particular connection is associated with some 
shared parameters, or that it is of a particular type.  
&%EngineeringConnections are &%EngineeringComponents and can therefore be 
an &%engineeringSubcomponent of other &%EngineeringComponents.  However, 
to provide for modular regularity in component systems, 
&%EngineeringConnections cannot be connected.  For each pair of 
&%EngineeringComponents related by &%connectedEngineeringComponents, there 
exists at least one &%EngineeringConnection.  However, that object may not 
be unique, and the same &%EngineeringConnection may be associated with 
several pairs of &%EngineeringComponents.")

(=>
   (instance ?CONNECTION EngineeringConnection)
   (exists (?COMP1 ?COMP2)
      (connectsEngineeringComponents ?CONNECTION ?COMP1 ?COMP2)))

(subrelation connectsEngineeringComponents connects)
(domain connectsEngineeringComponents 1 EngineeringConnection)
(domain connectsEngineeringComponents 2 EngineeringComponent)
(domain connectsEngineeringComponents 3 EngineeringComponent)
(documentation connectsEngineeringComponents "&%connectsEngineeringComponents 
is a &%TernaryPredicate that maps from an &%EngineeringConnection to the 
&%EngineeringComponents it connects.  Since &%EngineeringComponents cannot 
be connected to themselves and there cannot be an &%EngineeringConnection 
without a &%connectedEngineeringComponents &%Predicate, the second and third 
arguments of any &%connectsEngineeringComponents relationship will always be 
distinct for any given first argument.")

;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;
;;  NUMBER HIERARCHY   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following formulas incorporate the Number hierarchy from the 
;; ontology 'kif-numbers' on the Ontolingua server.

(subclass Number Quantity)
(documentation Number "A measure of how many things there are, or how
much there is, of a certain kind.  &%Numbers are subclassed into 
&%RealNumber and &%ComplexNumber (&%ImaginaryNumber is an instance of 
&%Number).")

(subclass RealNumber Number)
(partition RealNumber NegativeRealNumber NonnegativeRealNumber)
(documentation RealNumber "Any &%Number that can be expressed as a 
(possibly infinite) decimal, i.e. any &%Number that has a position 
on the number line.")

(instance ImaginaryNumber (RelativeComplementFn Number RealNumber))
(documentation ImaginaryNumber "The square root of -1.")

(subclass RationalNumber RealNumber)
(documentation RationalNumber "Any &%RealNumber that is the product of 
dividing two &%Integers.")

(=>
   (instance ?NUMBER RationalNumber)
   (exists (?INT1 ?INT2)
      (and
         (instance ?INT1 Integer)
         (instance ?INT2 Integer)
         (equal ?NUMBER (DivisionFn ?INT1 ?INT2)))))

(subclass NonnegativeRealNumber RealNumber)
(documentation NonnegativeRealNumber "A &%RealNumber that is greater than 
or equal to zero.")

(=>
   (instance ?NUMBER NonnegativeRealNumber)
   (greaterThanOrEqualTo ?NUMBER 0))

(=>
   (instance ?NUMBER NonnegativeRealNumber)
   (or
      (equal (SignumFn ?NUMBER) 1)
      (equal (SignumFn ?NUMBER) 0)))

(subclass PositiveRealNumber NonnegativeRealNumber)
(documentation PositiveRealNumber "A &%RealNumber that is greater than 
zero.")

(=>
   (instance ?NUMBER PositiveRealNumber)
   (greaterThan ?NUMBER 0))

(=>
   (instance ?NUMBER PositiveRealNumber)
   (equal (SignumFn ?NUMBER) 1))

(subclass NegativeRealNumber RealNumber)
(documentation NegativeRealNumber "A &%RealNumber that is less than 
zero.")

(=>
   (instance ?NUMBER NegativeRealNumber)
   (lessThan ?NUMBER 0))

(=>
   (instance ?NUMBER NegativeRealNumber)
   (equal (SignumFn ?NUMBER) -1))


(subclass Integer RationalNumber)
(partition Integer OddInteger EvenInteger)
(partition Integer NegativeInteger NonnegativeInteger)
(documentation Integer "A negative or nonnegative whole number.")

(subclass EvenInteger Integer)
(documentation EvenInteger "An &%Integer that is evenly divisible 
by 2.")

(=>
	(instance ?NUMBER EvenInteger)
	(equal (RemainderFn ?NUMBER 2) 0))

(subclass OddInteger Integer)
(documentation OddInteger "An &%Integer that is not evenly divisible 
by 2.")

(=>
	(instance ?NUMBER OddInteger)
	(equal (RemainderFn ?NUMBER 2) 1))

(subclass PrimeNumber Integer)
(documentation PrimeNumber "An &%Integer that is evenly divisible only 
by itself and 1.")

(=>
   (instance ?PRIME PrimeNumber)
   (forall (?NUMBER)
      (=>
         (equal (RemainderFn ?PRIME ?NUMBER) 0)
         (or
            (equal ?NUMBER 1)
            (equal ?NUMBER ?PRIME)))))
         
(subclass NonnegativeInteger Integer)
(subclass NonnegativeInteger NonnegativeRealNumber)
(documentation NonnegativeInteger "An &%Integer that is greater than 
or equal to zero.")

(subclass NegativeInteger Integer)
(subclass NegativeInteger NegativeRealNumber)
(documentation NegativeInteger "An &%Integer that is less than zero.")

(subclass PositiveInteger NonnegativeInteger)
(subclass PositiveInteger PositiveRealNumber)
(documentation PositiveInteger "An &%Integer that is greater than zero.")

(subclass BinaryNumber RealNumber)
(documentation BinaryNumber "Elements from the number system with base 2.  
Every &%BinaryNumber is expressed as a sequence of the digits 1 and 0.")

(subclass ComplexNumber Number)
(disjoint ComplexNumber RealNumber)
(documentation ComplexNumber "A &%Number that consists of two components:  
a &%RealNumber and the &%ImaginaryNumber.")

(=>
   (instance ?NUMBER ComplexNumber)
   (exists (?PART1 ?PART2)
      (and
         (equal ?PART1 (RealNumberFn ?NUMBER))
         (equal ?PART2 (ImaginaryPartFn ?NUMBER)))))

(subclass NonspecificNumber Number)
(documentation NonspecificNumber "A &%NonspecificNumber is used to indicate 
quantity of items when one cannot or does not want to say exactly how many 
items there are.")

(instance Few NonspecificNumber)
(documentation Few "Useful for contextual assessment of number.  Note that 
a formula containing this &%Class cannot be converted into a precise numeric 
range.  For example, compare 'few books on the table' (perhaps there are 
three books) and 'few eritrocytes in your blood' (this might mean there are 
3 million per part).")

(instance Many NonspecificNumber)
(documentation Many "Useful for contextual assessment of number.  Note that 
this cannot be converted into a precise numeric range.  For example, compare 
'many books on the table' (perhaps there are twelve books) and 'many 
eritrocytes in your blood' (this might mean there are 8 million per part).")

(instance MultiplicationFn AssociativeFunction)
(instance MultiplicationFn CommutativeFunction)
(instance MultiplicationFn RelationExtendedToQuantities)
(domain MultiplicationFn 1 Quantity)
(domain MultiplicationFn 2 Quantity)
(range MultiplicationFn Quantity)
(documentation MultiplicationFn "If ?NUMBER1 and ?NUMBER2 are &%Numbers, 
then (&%MultiplicationFn ?NUMBER1 ?NUMBER2) is the arithmetical product 
of these numbers.")

(instance AdditionFn AssociativeFunction)
(instance AdditionFn CommutativeFunction)
(instance AdditionFn RelationExtendedToQuantities)
(domain AdditionFn 1 Quantity)
(domain AdditionFn 2 Quantity)
(range AdditionFn Quantity)
(documentation AdditionFn "If ?NUMBER1 and ?NUMBER2 are &%Numbers, then 
(&%AdditionFn ?NUMBER1 ?NUMBER2) is the arithmetical sum of these 
numbers.")
 
(instance SubtractionFn AssociativeFunction)
(instance SubtractionFn RelationExtendedToQuantities)
(domain SubtractionFn 1 Quantity)
(domain SubtractionFn 2 Quantity)
(range SubtractionFn Quantity)
(documentation SubtractionFn "If ?NUMBER1 and ?NUMBER2 are &%Numbers, 
then (&%SubtractionFn ?NUMBER1 ?NUMBER2) is the arithmetical difference 
between ?NUMBER1 and ?NUMBER2, i.e. ?NUMBER1 minus ?NUMBER2.  An 
exception occurs when ?NUMBER1 is equal to 0, in which case 
(&%SubtractionFn ?NUMBER1 ?NUMBER2) is the negation of ?NUMBER2.")

(instance DivisionFn AssociativeFunction)
(instance DivisionFn RelationExtendedToQuantities)
(domain DivisionFn 1 Quantity)
(domain DivisionFn 2 Quantity)
(range DivisionFn Quantity)
(documentation DivisionFn "If ?NUMBER1 and ?NUMBER2 are &%Numbers, then 
(&%DivisionFn ?NUMBER1 ?NUMBER2) is the result of dividing ?NUMBER1 by 
?NUMBER2.  An exception occurs when ?NUMBER1 = 1, in which case 
(&%DivisionFn ?NUMBER1 ?NUMBER2) is the reciprocal of ?NUMBER2.")

(instance AbsoluteValueFn UnaryFunction)
(domain AbsoluteValueFn 1 RealNumber)
(range AbsoluteValueFn PositiveRealNumber)
(documentation AbsoluteValueFn "The value of (&%AbsoluteValueFn ?NUMBER) 
is the absolute value of the &%RealNumber ?NUMBER.")

(<=>
     (equal (AbsoluteValueFn ?NUMBER1) ?NUMBER2)
     (or 
         (and 
              (instance ?NUMBER1 PositiveInteger)
              (equal ?NUMBER1 ?NUMBER2))     
         (and 
              (instance ?NUMBER1 NegativeInteger)
              (equal ?NUMBER2 (SubtractionFn 0 ?NUMBER1)))))

(instance ArcCosineFn UnaryFunction)
(inverse ArcCosineFn CosineFn)
(domain ArcCosineFn 1 RealNumber)
(range ArcCosineFn PlaneAngleMeasure)
(documentation ArcCosineFn "(&%ArcCosineFn ?NUMBER) returns the arc 
cosine of the &%RealNumber ?NUMBER.  It is the &%inverse of &%CosineFn.")

(instance ArcSineFn UnaryFunction)
(inverse ArcSineFn SineFn)
(domain ArcSineFn 1 RealNumber)
(range ArcSineFn PlaneAngleMeasure)
(documentation ArcSineFn "(&%ArcSineFn ?NUMBER) returns the arc sine of 
the &%RealNumber ?NUMBER.  It is the &%inverse of &%SineFn.")

(instance ArcTangentFn UnaryFunction)
(inverse ArcTangentFn TangentFn)
(domain ArcTangentFn 1 RealNumber)
(range ArcTangentFn PlaneAngleMeasure)
(documentation ArcTangentFn "(&%ArcTangentFn ?NUMBER) returns the arc 
tangent of the &%RealNumber ?NUMBER.  It is the &%inverse of &%TangentFn.")

(instance CeilingFn UnaryFunction)
(domain CeilingFn 1 RealNumber)
(range CeilingFn Integer)
(documentation CeilingFn "(&%CeilingFn ?NUMBER) returns the smallest 
&%Integer greater than or equal to the &%RealNumber ?NUMBER.")

(=>
   (equal (CeilingFn ?NUMBER) ?INT)
   (not
      (exists (?OTHERINT)
         (and
            (instance ?OTHERINT Integer)
            (greaterThanOrEqualTo ?OTHERINT ?NUMBER)
            (lessThan ?OTHERINT ?INT)))))

(instance CosineFn UnaryFunction)
(domain CosineFn 1 PlaneAngleMeasure)
(range CosineFn RealNumber)
(documentation CosineFn "(&%CosineFn ?DEGREE) returns the cosine of the 
&%PlaneAngleMeasure ?DEGREE.  The cosine of ?DEGREE is the ratio of the 
side next to ?DEGREE to the hypotenuse in a right-angled triangle.")

(instance DenominatorFn UnaryFunction)
(domain DenominatorFn 1 RealNumber)
(range DenominatorFn Integer)
(documentation DenominatorFn "(&%DenominatorFn ?NUMBER) returns the 
denominator of the canonical reduced form of the &%RealNumber ?NUMBER.")

(instance ExponentiationFn BinaryFunction)
(instance ExponentiationFn RelationExtendedToQuantities)
(domain ExponentiationFn 1 Quantity)
(domain ExponentiationFn 2 Integer)
(range ExponentiationFn Quantity)
(documentation ExponentiationFn "(&%ExponentiationFn ?NUMBER ?INT) returns 
the &%RealNumber ?NUMBER raised to the power of the &%Integer ?INT.")

(instance FloorFn UnaryFunction)
(domain FloorFn 1 RealNumber)
(range FloorFn Integer)
(documentation FloorFn "(&%FloorFn ?NUMBER) returns the largest &%Integer 
less than or equal to the &%RealNumber ?NUMBER.")

(=>
   (equal (FloorFn ?NUMBER) ?INT)
   (not
      (exists (?OTHERINT)
         (and
            (instance ?OTHERINT Integer)
            (lessThanOrEqualTo ?OTHERINT ?NUMBER)
            (greaterThan ?OTHERINT ?INT)))))

(instance GreatestCommonDivisorFn VariableArityRelation)
(range GreatestCommonDivisorFn Integer)
(documentation GreatestCommonDivisorFn "(&%GreatestCommonDivisorFn 
?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the greatest common divisor of 
?NUMBER1 through ?NUMBER.")

(instance ImaginaryPartFn UnaryFunction)
(domain ImaginaryPartFn 1 ComplexNumber)
(range ImaginaryPartFn ImaginaryNumber)
(documentation ImaginaryPartFn "(&%ImaginaryPartFn ?NUMBER) returns 
the imaginary part of ?NUMBER.")

(instance IntegerSquareRootFn UnaryFunction)
(domain IntegerSquareRootFn 1 RealNumber)
(range IntegerSquareRootFn NonnegativeInteger)
(documentation IntegerSquareRootFn "(&%IntegerSquareRootFn ?NUMBER) 
returns the integer square root of ?NUMBER.")
     
(instance LeastCommonMultipleFn VariableArityRelation)
(range LeastCommonMultipleFn Integer)
(documentation LeastCommonMultipleFn "(&%LeastCommonMultipleFn 
?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the least common multiple of 
?NUMBER1 through ?NUMBER.")

(instance LogFn BinaryFunction)
(domain LogFn 1 RealNumber)
(domain LogFn 2 PositiveInteger)
(range LogFn RealNumber)
(documentation LogFn "(LogFn ?NUMBER ?INT) returns the logarithm of the 
&%RealNumber ?NUMBER in the base denoted by the &%Integer ?INT.")

(instance MaxFn AssociativeFunction)
(instance MaxFn CommutativeFunction)
(instance MaxFn RelationExtendedToQuantities)
(domain MaxFn 1 Quantity)
(domain MaxFn 2 Quantity)
(range MaxFn Quantity)
(documentation MaxFn "(&%MaxFn ?NUMBER1 ?NUMBER2) is the largest of 
?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2, 
&%MaxFn returns one of its arguments.")

(=>
   (equal (MaxFn ?NUMBER1 ?NUMBER2) ?NUMBER)
   (or
      (and
         (equal ?NUMBER ?NUMBER1)
         (greaterThan ?NUMBER1 ?NUMBER2))
      (and
         (equal ?NUMBER ?NUMBER2)
         (greaterThan ?NUMBER2 ?NUMBER1))
      (and
         (equal ?NUMBER ?NUMBER1)
         (equal ?NUMBER ?NUMBER2))))

(instance MinFn AssociativeFunction)
(instance MinFn CommutativeFunction)
(instance MinFn RelationExtendedToQuantities)
(domain MinFn 1 Quantity)
(domain MinFn 2 Quantity)
(range MinFn Quantity)
(documentation MinFn "(&%MinFn ?NUMBER1 ?NUMBER2) is the smallest of 
?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2, 
&%MinFn returns one of its arguments.")

(=>
   (equal (MinFn ?NUMBER1 ?NUMBER2) ?NUMBER)
   (or
      (and
         (equal ?NUMBER ?NUMBER1)
         (lessThan ?NUMBER1 ?NUMBER2))
      (and
         (equal ?NUMBER ?NUMBER2)
         (lessThan ?NUMBER2 ?NUMBER1))
      (and
         (equal ?NUMBER ?NUMBER1)
         (equal ?NUMBER ?NUMBER2))))

(instance NumeratorFn UnaryFunction)
(domain NumeratorFn 1 RealNumber)
(range NumeratorFn Integer)
(documentation NumeratorFn "(&%NumeratorFn ?NUMBER) returns the numerator 
of the canonical reduced form ?NUMBER.")

(instance Pi RealNumber)
(documentation Pi "&%Pi is the &%RealNumber that 
is the ratio of the perimeter of a circle to its diameter.  It is 
approximately equal to 3.141592653589793.")

(instance RationalNumberFn UnaryFunction)
(domain RationalNumberFn 1 Number)
(range RationalNumberFn RationalNumber)
(documentation RationalNumberFn "(&%RationalNumberFn ?NUMBER) returns 
the rational representation of ?NUMBER.")

(instance RealNumberFn UnaryFunction)
(domain RealNumberFn 1 Number)
(range RealNumberFn RealNumber)
(documentation RealNumberFn "(RealNumberFn ?NUMBER) returns the part of 
?NUMBER that is a &%RealNumber.")

(instance ReciprocalFn UnaryFunction)
(instance ReciprocalFn RelationExtendedToQuantities)
(domain ReciprocalFn 1 Quantity)
(range ReciprocalFn Quantity)
(documentation ReciprocalFn "(ReciprocalFn ?NUMBER) is the reciprocal 
element of ?NUMBER with respect to the multiplication operator 
(&%MultiplicationFn), i.e. 1/?NUMBER.  Not all numbers have a reciprocal 
element.  For example the number 0 does not.  If a number ?NUMBER has a 
reciprocal ?RECIP, then the product of ?NUMBER and ?RECIP will be 
1, e.g. 3*1/3 = 1.  The reciprocal of an element is &%equal to 
applying the &%ExponentiationFn function to the element to the power 
-1.")

(equal (ReciprocalFn ?NUMBER)
       (ExponentiationFn ?NUMBER -1))

(equal 1 (MultiplicationFn ?NUMBER (ReciprocalFn ?NUMBER)))

(instance RemainderFn BinaryFunction)
(instance RemainderFn RelationExtendedToQuantities)
(domain RemainderFn 1 Quantity)
(domain RemainderFn 2 Quantity)
(range RemainderFn Quantity)
(documentation RemainderFn "(RemainderFn ?NUMBER ?DIVISOR) is the 
remainder of the number ?NUMBER divided by the number ?DIVISOR.  
The result has the same sign as ?DIVISOR.")

(<=>
   (equal (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER)
   (equal (AdditionFn (MultiplicationFn (FloorFn (DivisionFn ?NUMBER1 ?NUMBER2)) ?NUMBER2) ?NUMBER) ?NUMBER1))

(=>
   (equal (RemainderFn ?NUMBER1 ?NUMBER2) ?NUMBER)
   (equal (SignumFn ?NUMBER2) (SignumFn ?NUMBER)))

(instance RoundFn UnaryFunction)
(instance RoundFn RelationExtendedToQuantities)
(domain RoundFn 1 Quantity)
(range RoundFn Quantity)
(documentation RoundFn "(&%RoundFn ?NUMBER) is the &%Integer closest 
to ?NUMBER on the number line.  If ?NUMBER is halfway between two 
&%Integers (for example 3.5), it denotes the larger &%Integer.")

(=>
   (equal (RoundFn ?NUMBER1) ?NUMBER2)
   (or
      (=>
         (lessThan (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) .5)
         (equal ?NUMBER2 (FloorFn ?NUMBER1)))
      (=>
         (greaterThanOrEqualTo (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) .5)
         (equal ?NUMBER2 (CeilingFn ?NUMBER1)))))
         
(instance SignumFn UnaryFunction)
(domain SignumFn 1 RealNumber)
(range SignumFn Integer)
(documentation SignumFn "(SignumFn ?NUMBER) denotes the sign of ?NUMBER.  
This is one of the following values:  -1, 1, or 0.")

(instance SineFn UnaryFunction)
(domain SineFn 1 PlaneAngleMeasure)
(range SineFn RealNumber)
(documentation SineFn "(&%SineFn ?DEGREE) is the sine of the 
&%PlaneAngleMeasure ?DEGREE.  The sine of ?DEGREE is the ratio of the side 
opposite ?DEGREE to the hypotenuse in a right-angled triangle.")

(instance SquareRootFn UnaryFunction)
(domain SquareRootFn 1 RealNumber)
(range SquareRootFn RealNumber)
(documentation SquareRootFn "(SquareRootFn ?NUMBER) is the principal 
square root of ?NUMBER.")

(=>
   (equal (SquareRootFn ?NUMBER1) ?NUMBER2)
   (equal (MultiplicationFn ?NUMBER2 ?NUMBER2) ?NUMBER1))

(instance TangentFn UnaryFunction)
(domain TangentFn 1 PlaneAngleMeasure)
(range TangentFn RealNumber)
(documentation TangentFn "(&%TangentFn ?DEGREE) is the tangent of the 
&%PlaneAngleMeasure ?DEGREE.  The tangent of ?DEGREE is the ratio of 
the side opposite ?DEGREE to the side next to ?DEGREE in a right-angled 
triangle.")

(equal (TangentFn ?DEGREE) (DivisionFn (SineFn ?DEGREE) (CosineFn ?DEGREE)))

(instance lessThan TransitiveRelation)
(instance lessThan IrreflexiveRelation)
(instance lessThan RelationExtendedToQuantities)
(trichotomizingOn lessThan RealNumber)
(domain lessThan 1 Quantity)
(domain lessThan 2 Quantity)
(documentation lessThan "(&%lessThan ?NUMBER1 ?NUMBER2) is true just 
in case the &%Quantity ?NUMBER1 is less than the &%Quantity ?NUMBER2.")

(instance greaterThan TransitiveRelation)
(instance greaterThan IrreflexiveRelation)
(instance greaterThan RelationExtendedToQuantities)
(trichotomizingOn greaterThan RealNumber)
(domain greaterThan 1 Quantity)
(domain greaterThan 2 Quantity)
(inverse greaterThan lessThan)
(documentation greaterThan "(&%greaterThan ?NUMBER1 ?NUMBER2) is true 
just in case the &%Quantity ?NUMBER1 is greater than the &%Quantity 
?NUMBER2.")

(instance lessThanOrEqualTo PartialOrderingRelation)
(instance lessThanOrEqualTo RelationExtendedToQuantities)
(trichotomizingOn lessThanOrEqualTo RealNumber)
(domain lessThanOrEqualTo 1 Quantity)
(domain lessThanOrEqualTo 2 Quantity)
(documentation lessThanOrEqualTo "(&%lessThanOrEqualTo ?NUMBER1 ?NUMBER2) 
is true just in case the &%Quantity ?NUMBER1 is less than or equal to 
the &%Quantity ?NUMBER2.")

(<=>
	(lessThanOrEqualTo ?NUMBER1 ?NUMBER2)
	(or
		(equal ?NUMBER1 ?NUMBER2)
		(lessThan ?NUMBER1 ?NUMBER2)))

(instance greaterThanOrEqualTo PartialOrderingRelation)
(instance greaterThanOrEqualTo RelationExtendedToQuantities)
(trichotomizingOn greaterThanOrEqualTo RealNumber)
(domain greaterThanOrEqualTo 1 Quantity)
(domain greaterThanOrEqualTo 2 Quantity)
(inverse greaterThanOrEqualTo lessThanOrEqualTo)
(documentation greaterThanOrEqualTo "(&%greaterThanOrEqualTo ?NUMBER1 
?NUMBER2) is true just in case the &%Quantity ?NUMBER1 is greater 
than the &%Quantity ?NUMBER2.")

(<=>
	(greaterThanOrEqualTo ?NUMBER1 ?NUMBER2)
	(or
		(equal ?NUMBER1 ?NUMBER2)
		(greaterThan ?NUMBER1 ?NUMBER2)))

(instance SuccessorFn UnaryFunction)
(domain SuccessorFn 1 Integer)
(range SuccessorFn Integer)
(documentation SuccessorFn "A &%UnaryFunction that maps an &%Integer to 
its successor, e.g. the successor of 5 is 6.")

(=>
   (equal (SuccessorFn ?INT1) (SuccessorFn ?INT2))
   (equal ?INT1 ?INT2))

(=>
   (instance ?INT Integer)
   (lessThan ?INT (SuccessorFn ?INT)))

(=>
   (and
      (instance ?INT1 Integer)
      (instance ?INT2 Integer))
   (not
      (and
         (lessThan ?INT1 ?INT2)
         (lessThan ?INT2 (SuccessorFn ?INT1)))))

(=>
   (instance ?INT Integer)
   (equal ?INT (SuccessorFn (PredecessorFn ?INT))))

(=>
   (instance ?INT Integer)
   (equal ?INT (PredecessorFn (SuccessorFn ?INT))))

(instance PredecessorFn UnaryFunction)
(domain PredecessorFn 1 Integer)
(range PredecessorFn Integer)
(documentation PredecessorFn "A &%UnaryFunction that maps an &%Integer to 
its predecessor, e.g. the predecessor of 5 is 4.")

(=>
   (equal (PredecessorFn ?INT1) (PredecessorFn ?INT2))
   (equal ?INT1 ?INT2))

(=>
   (instance ?INT Integer)
   (greaterThan ?INT (PredecessorFn ?INT)))

(=>
   (and
      (instance ?INT1 Integer)
      (instance ?INT2 Integer))
   (not
      (and
         (lessThan ?INT2 ?INT1)
         (lessThan (PredecessorFn ?INT1) ?INT2))))


;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  QUANTITIES AND UNITS OF MEASURE   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The following formulas incorporate the relations in the Quantities 
;; ontology (developed by ITBM-CNR) and the units of measure in the 
;; "Standard Units" and "Standard Dimensions" ontologies on the Ontolingua 
;; server.

;; This section has been extensively revised by Helena Sofia Pinto of the 
;; Instituto Superior Tecnico in Portugal.  The sources for these revisions 
;; were 
;; - Barry Taylor, NIST Special Publication 811, Guide for the Use of the
;;   International System of Units (SI), 1995.
;; - Encyclopaedia Britannica (on-line version at http://www.britannica.com)

(subclass PhysicalQuantity Quantity)
(partition PhysicalQuantity ConstantQuantity FunctionQuantity)
(documentation PhysicalQuantity "&%A PhysicalQuantity is a measure of 
some quantifiable aspect of the modeled world, such as 'the earth's 
diameter' (a constant length) and 'the stress in a loaded deformable 
solid' (a measure of stress, which is a function of three spatial 
coordinates).  All &%PhysicalQuantities are either &%ConstantQuantities 
or &%FunctionQuantities.  Instances of &%ConstantQuantity are dependent 
on a &%UnitOfMeasure, while instances of &%FunctionQuantity are 
&%Functions that map instances of &%ConstantQuantity to other instances 
of &%ConstantQuantity (e.g., &%TimeDependentQuantities are 
&%FunctionQuantities).  Although the name and definition of 
&%PhysicalQuantity is borrowed from physics, &%PhysicalQuantities need 
not be material.  Aside from the dimensions of length, time, velocity, 
etc., nonphysical dimensions such as currency are also possible.  
Accordingly, amounts of money would be instances of &%PhysicalQuantity.  
&%PhysicalQuantities are distinguished from &%Numbers by the fact that 
the former are associated with a dimension of measurement.")

(subclass ConstantQuantity PhysicalQuantity)
(documentation ConstantQuantity "A &%ConstantQuantity is a 
&%PhysicalQuantity which has a constant value, e.g. 3 meters and 5 hours.  
The magnitude (see &%MagnitudeFn) of every &%ConstantQuantity is a 
&%RealNumber.  &%ConstantQuantities are distinguished from 
&%FunctionQuantities, which map &%ConstantQuantities to other 
&%ConstantQuantities.  All &%ConstantQuantites are expressed with the 
&%BinaryFunction &%MeasureFn, which takes a &%Number and a &%UnitOfMeasure 
as arguments.  For example, 3 &%Meters can be expressed as (&%MeasureFn 3 
&%Meter).  &%ConstantQuantities form a partial order (see 
&%PartialOrderingRelation) with the &%lessThan relation, since &%lessThan 
is a &%RelationExtendedToQuantities and &%lessThan is defined over the 
&%RealNumbers.  The &%lessThan relation is not a total order (see 
&%TotalOrderingRelation) over the class &%ConstantQuantity since elements 
of some subclasses of &%ConstantQuantity (such as length quantities) 
are incomparable to elements of other subclasses of &%ConstantQuantity 
(such as mass quantities).")

(subclass FunctionQuantity PhysicalQuantity)
(subclass FunctionQuantity Function)
(documentation FunctionQuantity "A &%FunctionQuantity is a &%Function that 
maps from one or more instances of &%ConstantQuantity to another instance 
of &%ConstantQuantity.  For example, the velocity of a particle would be 
represented by a &%FunctionQuantity mapping values of time (which are 
&%ConstantQuantities) to values of distance (also &%ConstantQuantities).  
Note that all instances of &%FunctionQuantity are &%Functions with a fixed 
arity.  Note too that all elements of the range of a &%FunctionQuantity 
have the same physical dimension as the &%FunctionQuantity itself.")

(subclass UnaryConstantFunctionQuantity FunctionQuantity)
(subclass UnaryConstantFunctionQuantity UnaryFunction)
(documentation UnaryConstantFunctionQuantity "The class of &%UnaryFunctions 
that map from the &%Class &%ConstantQuantity to the &%Class 
&%ConstantQuantity.")

(=>
   (instance ?FUNCTION UnaryConstantFunctionQuantity)
   (and
      (domain ?FUNCTION 1 ConstantQuantity)
      (range ?FUNCTION ConstantQuantity)))

(subclass TimeDependentQuantity UnaryConstantFunctionQuantity)
(subclass TimeDependentQuantity ContinuousFunction)
(documentation TimeDependentQuantity "A &%UnaryConstantFunction of continuous 
time.  All instances of this &%Class map a time quantity into another 
&%ConstantQuantity such as temperature.  For example, 'the temperature at 
the top of the Empire State Building' is a &%TimeDependentQuantity since 
its value depends on the time.")

(=>
   (instance ?FUNCTION TimeDependentQuantity)
   (domain ?FUNCTION 1 TimeMeasure))

(subclass UnitOfMeasure PhysicalQuantity)
(documentation UnitOfMeasure "A standard of measurement for some dimension. 
For example, the &%Meter is a &%UnitOfMeasure for the dimension of length, 
as is the &%Inch.  There is no intrisic property of a &%UnitOfMeasure that 
makes it primitive or fundamental; rather, a system-of-units (e.g. 
&%SystemeInternationalUnit) defines a set of orthogonal dimensions and 
assigns units for each.") 

(subclass SystemeInternationalUnit UnitOfMeasure)
(documentation SystemeInternationalUnit "The &%Class of Systeme 
International (SI) units.")

(subclass LengthMeasure ConstantQuantity)

(subclass MassMeasure ConstantQuantity)

(subclass TimeMeasure ConstantQuantity)
(documentation TimeMeasure "The class of temporal durations (instances of &%TimeDuration) and positions of &%TimePoints and &%TimeIntervals along the 
universal timeline (instances of &%TimePosition).")

(subclass ElectricCurrentMeasure FunctionQuantity)

(subclass ThermodynamicTemperatureMeasure ConstantQuantity)

(subclass LuminosityIntensityMeasure FunctionQuantity)

(subclass AmountOfSubstanceMeasure ConstantQuantity)

;; A necessary &%PhysicalQuantity for what was previously known as 
;; supplementary units in the SI system. 

(subclass IdentityMeasure ConstantQuantity)

;; Derived &%PhysicalQuantities that have units with special names and
;; symbols in the SI system.

(subclass PlaneAngleMeasure IdentityMeasure)

(subclass SolidAngleMeasure IdentityMeasure)

(subclass FrequencyMeasure TimeDependentQuantity)

(subclass ForceMeasure FunctionQuantity)

(subclass PressureMeasure FunctionQuantity)

(subclass EnergyMeasure FunctionQuantity)

(subclass PowerMeasure FunctionQuantity)

(subclass ElectricChargeMeasure TimeDependentQuantity) 

(subclass ElectricPotentialMeasure FunctionQuantity)

(subclass CapacitanceMeasure FunctionQuantity)

(subclass ElectricResistanceMeasure FunctionQuantity)

(subclass ElectricConductanceMeasure FunctionQuantity)

(subclass MagneticFluxMeasure FunctionQuantity)

(subclass MagneticFluxDensityMeasure FunctionQuantity)

(subclass InductanceMeasure FunctionQuantity)

(subclass LuminousFluxMeasure FunctionQuantity)

(subclass IlluminanceMeasure FunctionQuantity)

(subclass ActivityMeasure TimeDependentQuantity)

(subclass AbsorbedDoseMeasure FunctionQuantity)

(subclass DoseEquivalentMeasure FunctionQuantity)

;; Other &%PhysicalQuantities of interest outside SI.

(subclass CurrencyMeasure ConstantQuantity)
(subclass InformationMeasure ConstantQuantity)

(instance MeasureFn BinaryFunction)
(domain MeasureFn 1 RealNumber)
(domain MeasureFn 2 UnitOfMeasure)
(range MeasureFn ConstantQuantity)
(documentation MeasureFn "This &%BinaryFunction maps a &%RealNumber and 
a &%UnitOfMeasure to that &%Number of units.  It is used for expressing 
&%ConstantQuantities.  For example, the concept of three meters is 
represented as (&%MeasureFn 3 &%Meter).")

(=>
   (and
      (equal (MeasureFn ?NUMBER ?UNIT) ?QUANT)
      (subclass ?UNIT ?QUANTTYPE)
      (not (equal ?QUANTTYPE UnitOfMeasure)))
   (subclass ?QUANT ?QUANTTYPE))

(instance MagnitudeFn UnaryFunction)
(domain MagnitudeFn  1 ConstantQuantity)
(range MagnitudeFn RealNumber)
(documentation MagnitudeFn "The magnitude of a &%ConstantQuantity is the 
numeric value for the quantity.  In other words, &%MagnitudeFn converts 
a &%ConstantQuantity with an associated &%UnitOfMeasure into an ordinary 
&%RealNumber.  For example, the magnitude of the &%ConstantQuantity 2 
&%Kilometers is the &%RealNumber 2.   Note that the magnitude of a 
quantity in a given unit times that unit is equal to the original 
quantity.")

(equal (MagnitudeFn (MeasureFn ?NUMBER ?UNIT)) ?NUMBER)

;; Now the units of measure:

;; First base units for the SI system. No conversion functions are
;; provided for these units. 

;; Length Base Unit

(instance Meter LengthMeasure)
(instance Meter SystemeInternationalUnit)
(documentation Meter "SI &%LengthMeasure.  Symbol:  m. It is one of the
base units in SI, and it is currently defined as follows: the &%Meter 
is the length of the path traveled by light in a vacuum during a time 
interval of 1/299792458 of a &%SecondDuration.")

;; Mass Base Unit

(instance Kilogram MassMeasure)
(instance Kilogram SystemeInternationalUnit)
(documentation Kilogram "SI &%MassMeasure.  Symbol: kg. It is one of the
base units in SI (it is also the basic unit of mass in the MKS system),
and it is equal to the mass of the international prototype of the 
&%Kilogram.")

(equal
	(MeasureFn ?NUMBER Kilogram)
	(MeasureFn (MultiplicationFn ?NUMBER 1000) Gram))

;; Time Base Unit

(instance SecondDuration TimeDuration)
(instance SecondDuration SystemeInternationalUnit)
(documentation SecondDuration "SI &%TimeDuration.  Symbol: s. 
It is one of the base units in SI, and it is currently defined as 
follows: the &%SecondDuration is the duration of 9192631770 periods of 
the radiation corresponding to the transition between the two hyperfine 
levels of the ground state of the cesium 133 atom.")

;; Electric Current Base Unit

(instance Ampere ElectricCurrentMeasure)
(instance Ampere SystemeInternationalUnit)
(documentation Ampere "SI &%ElectricCurrentMeasure.  Symbol: A. It is 
one of the base units in SI. It is defined as follows: the &%Ampere is 
that constant current which, if maintained in two straight parallel 
conductors of infinite length, of negligible circular cross-section, and 
placed 1 &%Meter apart in a vacuum, would produce between these conductors 
a force equal to 2*10^(-7) &%Newton per &%Meter of length.") 

;; Thermodynamic Temperature Base Unit

(instance Kelvin ThermodynamicTemperatureMeasure)
(instance Kelvin SystemeInternationalUnit)
(documentation Kelvin "SI &%ThermodynamicTemperatureMeasure.  Symbol: K. 
It is one of the base units in SI (it is also a unit in the ITS system). 
It is defined as follows: the &%Kelvin is the fraction 1/273.16 of the 
thermodynamic temperature of the triple point of water.")

;; Amount Of Substance Base Unit

(instance Mole AmountOfSubstanceMeasure)
(instance Mole SystemeInternationalUnit)
(documentation Mole "SI &%AmountOfSubstanceUnit. symbol: mol. It is one 
of the base units in SI. It is defined as follows:  the &%Mole is the 
amount of substance of a system which contains as many elementary entities 
as there are atoms in 0.012 &%Kilograms of carbon 12.  Note that, when this 
&%UnitOfMeasure is used, the elementary entities must be specified - they 
may be atoms, molecules, ions, electrons, etc. or groups of such 
particles.")

;; Luminosity Intensity Base Unit

(instance Candela LuminosityIntensityMeasure)
(instance Candela SystemeInternationalUnit)
(documentation Candela "SI &%LuminosityIntensityMeasure.  Symbol: cd. 
It is one of the base units in SI, and it is currently defined as 
follows:  the &%Candela is the luminous intensity, in a given direction, 
of a source that emits monochromatic radiation of frequency 540*10^12 
&%Hertz and that has a radiant intensity in that direction of 1/683 
&%Watt per &%Steradian.")

;; The following are SI units that are multiples and submultiples of the 
;; SI base units.

(instance Centimeter LengthMeasure)
(instance Centimeter UnitOfMeasure)
(documentation Centimeter "Submultiple of &%Meter.  Symbol: cm. It is 
the 100th part of a &%Meter")

(equal
        (MeasureFn ?NUMBER Centimeter)
        (MeasureFn (MultiplicationFn ?NUMBER 0.01) Meter))

(instance Kilometer LengthMeasure)
(instance Kilometer UnitOfMeasure)
(documentation Kilometer "Multiple of &%Meter.  Symbol: km. 
1 &%Kilometer = 1000 &%Meters.")

(equal
	(MeasureFn ?NUMBER Kilometer)
	(MeasureFn (MultiplicationFn ?NUMBER 1000) Meter))

(instance Gram MassMeasure)
(instance Gram UnitOfMeasure)
(documentation Gram "Submultiple of &%Kilogram.  Symbol: g. 
1 &%Kilogram = 1000 &%Grams.")

(equal
	(MeasureFn ?NUMBER Gram)
	(MeasureFn (MultiplicationFn ?NUMBER 0.001) Kilogram))

(instance NanoSecond TimeDuration)
(instance NanoSecond UnitOfMeasure)
(documentation NanoSecond "Submultiple of &%SecondDuration.  Symbol: ns. 
A &%UnitOfMeasure equal to one billionth of a &%SecondDuration.")

(equal
	(MeasureFn ?NUMBER NanoSecond)
	(MeasureFn (MultiplicationFn ?NUMBER 1.0E-9) Second))

(instance PicoSecond TimeDuration)
(instance PicoSecond UnitOfMeasure)
(documentation PicoSecond "Submultiple of &%SecondDuration.  Symbol: ps. 
A &%UnitOfMeasure equal to one trillionth of a &%SecondDuration.")

(equal
	(MeasureFn ?NUMBER PicoSecond)
	(MeasureFn (MultiplicationFn ?NUMBER 1.0E-12) SecondDuration))

(instance MilliAmpere ElectricCurrentMeasure)
(instance MilliAmpere UnitOfMeasure)
(documentation MilliAmpere "Submultiple of &%Ampere. Symbol: mA.  A unit 
of electrical current equal to one thousandth of an &%Ampere.")

(equal
	(MeasureFn ?NUMBER MilliAmpere)
	(MeasureFn (MultiplicationFn ?NUMBER .001) Ampere))

(instance NanoAmpere ElectricCurrentMeasure)
(instance NanoAmpere ElectricCurrentMeasure)
(documentation NanoAmpere "Submultiple of &%Ampere.  Symbol: nA.  A unit 
of electrical current equal to one billionth of an &%Ampere.")

(equal
	(MeasureFn ?NUMBER NanoAmpere)
	(MeasureFn (MultiplicationFn ?NUMBER 1.0E-9) Ampere))

(instance PicoAmpere ElectricCurrentMeasure)
(instance PicoAmpere UnitOfMeasure)
(documentation PicoAmpere "Submultiple of &%Ampere.  Symbol: pA.  A unit 
of electrical current equal to one trillionth of an &%Ampere.")

(equal
	(MeasureFn ?NUMBER PicoAmpere)
	(MeasureFn (MultiplicationFn ?NUMBER 1.0E-12) Ampere))

;; What follows are derived SI units with special names and symbols
;; (multiples and submultiples are together since they represent 
;; quantities of the same kind).

;; Plane angle unit

(instance Radian PlaneAngleMeasure)
(instance Radian SystemeInternationalUnit)
(documentation Radian "SI &%PlaneAngleMeasure.  Symbol: rad.  It is the 
angle of a circle subtended by an arc equal in length to the circle's 
radius. Another definition is:  the plane angle between two radii of a 
circle which cut off on the circumference an arc equal in length to the 
radius.  &%Radian = m/m = 1.")

;; Solid angle unit

(instance Steradian SolidAngleMeasure)
(instance Steradian SystemeInternationalUnit)
(documentation Steradian "SI &%SolidAngleMeasure.  Symbol: sr.  It is 
the solid angle of a sphere subtended by a portion of the surface whose 
area is equal to the square of the sphere's radius.  Another definition 
is: the solid angle which, having its vertex in the center of the sphere, 
cuts off an area of the surface of the sphere equal to that of a square 
with sides of length equal to the radius of the sphere.  &%Steradian = 
m^2/m^2 = 1.")

;; Frequency units

(instance Hertz FrequencyMeasure)
(instance Hertz SystemeInternationalUnit)
(documentation Hertz "SI &%FrequencyMeasure.  Symbol: Hz. It is the 
number of cycles per second.  &%Hertz = s^(-1).")

;; Note: &%Hertz does not have a conversion function.

(instance GigaHertz FrequencyMeasure)
(instance GigaHertz UnitOfMeasure)
(documentation GigaHertz "Multiple of &%Hertz.  Symbol: GHz. A 
&%FrequencyMeasure equal to one billion times per &%SeconDuration.  
1 &%GigaHertz = 10^9 Hertz.")

(equal 
	(MeasureFn ?NUMBER GigaHertz)
	(MeasureFn (MultiplicationFn ?NUMBER 1.0E9) Hertz))

(instance KiloHertz FrequencyMeasure)
(instance KiloHertz UnitOfMeasure)
(documentation KiloHertz "Multiple of &%Hertz.  Symbol: kHz. A 
&%FrequencyMeasure equal to one thousand times per &%SecondDuration.  
1 &%KiloHertz = 10^3 Hertz.")

(equal
	(MeasureFn ?NUMBER KiloHertz)
	(MeasureFn (MultiplicationFn ?NUMBER 1000) Hertz))

(instance MegaHertz FrequencyMeasure)
(instance MegaHertz UnitOfMeasure)
(documentation MegaHertz "Multiple of &%Hertz.  Symbol: MHz. A 
&%FrequencyMeasure equal to one million times per &%SecondDuration.  
1 &%Megahertz = 10^6 &%Hertz.")

(equal
        (MeasureFn ?NUMBER MegaHertz)
        (MeasureFn (MultiplicationFn ?NUMBER 1.0E6) Hertz))

; Force Unit

(instance Newton ForceMeasure)
(instance Newton SystemeInternationalUnit)
(documentation Newton "SI &%ForceMeasure.  Symbol: N. It is that force 
which gives to a mass of 1 &%Kilogram an acceleration of 1 &%Meter per 
&%SecondDuration.  &%Newton = m*kg*s^(-2).")

; Pressure unit

(instance Pascal PressureMeasure)
(instance Pascal SystemeInternationalUnit)
(documentation Pascal "SI &%PressureMeasure.  Symbol:Pa. It is the 
pressure of one &%Newton per square &%Meter.  &%Pascal = N/m^2 
= m^(-1)*kg*s^(-2).")

(instance MegaPascal PressureMeasure) 
(instance MegaPascal UnitOfMeasure)
(documentation MegaPascal "Multiple of &%Pascal.  Symbol: MPa.  A unit 
of pressure equal to one million &%Pascal.  1 &%MegaPascal = 10^6 Pa.")

(equal
	(MeasureFn ?NUMBER MegaPascal)
	(MeasureFn (MultiplicationFn ?NUMBER 1.0E6) Pascal))

; Energy Unit

(instance Joule EnergyMeasure)
(instance Joule SystemeInternationalUnit)
(documentation Joule "SI &%EnergyMeasure.  Symbol: J.  It is the work 
done when the point of application of 1 &%Newton is displaced a distance 
of 1 &%Meter in the direction of the force.  &%Joule = N*m = 
m^2*kg*s^(-2).")

; Power Units

(instance Watt PowerMeasure)
(instance Watt SystemeInternationalUnit)
(documentation Watt "SI &%PowerMeasure.  Aymbol: W.  A &%UnitOfMeasure 
that measures power, i.e. energy produced or expended divided by 
&%TimeDuration. It is the power which gives rise to the production 
of energy (or work) at the rate of one &%Joule per &%SecondDuration.  
&%Watt = J/s = m^2*kg*s^(-3).")

;;; Note: According to SI one should not use the expression "per unit of." 

(instance KiloWatt PowerMeasure)
(instance Watt UnitOfMeasure)
(documentation KiloWatt "Multiple of &%Watt.  Symbol: kW.  A 
&%UnitOfMeasure that measures power, i.e. energy produced or expended 
divided by &%TimeDuration.  1 &%KiloWatt = 1000 &%Watts.")

(equal
	(MeasureFn ?NUMBER KiloWatt)
	(MeasureFn (MultiplicationFn ?NUMBER 1000) Watt))

; Electric Charge Units

(instance CoulombFn ElectricChargeMeasure)
(instance CoulombFn SystemeInternationalUnit)
(domain CoulombFn 1 SecondDuration)
(range CoulombFn Ampere)
(documentation CoulombFn "SI &%ElectricChargeMeasure.  Symbol: C. It is 
the quantity of electric charge transported through a cross section of 
a conductor in an electric circuit during each &%SecondDuration by a 
current of 1 &%Ampere.  Coulomb = s*A.")

; Electric Potential Units

(instance Volt ElectricPotentialMeasure)
(instance Volt SystemeInternationalUnit)
(documentation Volt "SI &%ElectricPotentialMeasure.  Symbol: V.  It is 
the difference of electric potential between two points of a conducting 
wire carrying a constant current of 1 &%Ampere, when the power dissipated 
between these points is equal to 1 &%Watt.  &%Volt = W/A = 
m^2*kg*s^(-3)*A^(-1).")

(instance MicroVolt ElectricPotentialMeasure)
(instance MicroVolt UnitOfMeasure)
(documentation MicroVolt "Submultiple of &%Volt.  Symbol: mV.  A 
&%UnitOfMeasure for measuring electrical potential equal to one 
millionth of a volt.  1 &%MicroVolt = 10^(-6) &%Volt.")

(equal
	(MeasureFn ?NUMBER MicroVolt)
	(MeasureFn (MultiplicationFn ?NUMBER 0.000001) Volt))

(instance MilliVolt ElectricPotentialMeasure)
(instance MilliVolt UnitOfMeasure)
(documentation MilliVolt "Submultiple of &%Volt.  Symbol: mV. A unit 
of electrical potential equal to one thousandth of a &%Volt.  
1 &%MilliVolt = 10^(-3) &%Volt.")

(equal
	(MeasureFn ?NUMBER MilliVolt)
	(MeasureFn (MultiplicationFn ?NUMBER .001) Volt))

; Capacitance Units

(instance Farad CapacitanceMeasure)
(instance  Farad SystemeInternationalUnit)
(documentation Farad "SI &%CapacitanceMeasure.  Symbol: F.  It is the 
capacitance of a capacitator between the plates of which there appears 
a difference of potential of 1 &%Volt when it is charged by a quantity 
of electricity equal to 1 Coulomb.  &%Farad = C/V = 
m^(-2)*kg(-1)*s^4*A^2.")

;Electric Resistance Units

(instance Ohm ElectricResistanceMeasure)
(instance Ohm SystemeInternationalUnit)
(documentation Ohm "SI &%ElectricResistanceMeasure. It is the electric
resistance between two points of a conductor when a constant difference 
of potential of 1 &%Volt, applied between these two points,
produces in this conductor a current of 1 &%Ampere, this conductor not
being the force of any electromotive force.  &%Ohm = V/A = 
m^2*kg*s^(-3)*A^(-2).")

(instance MegaOhm ElectricResistanceMeasure)
(instance MegaOhm UnitOfMeasure)
(documentation MegaOhm "Multiple of &%Ohm. Electric resistance unit 
equal to one million &%Ohm.  1 &%MegaOhm = 10^(6) &%Ohms.")

(equal
	(MeasureFn ?NUMBER MegaOhm)
	(MeasureFn (MultiplicationFn ?NUMBER 1.0E6) Ohm))

(instance MicroOhm ElectricResistanceMeasure)
(instance MicroOhm UnitOfMeasure)
(documentation MicroOhm "Submultiple of &%Ohm. Electric resistance 
unit equal to the millionth part of an &%Ohm.  1 &%MicroOhm = 
10^(-6) &%Ohms.")

(equal
	(MeasureFn ?NUMBER MicroOhm)
	(MeasureFn (MultiplicationFn ?NUMBER 0.000001) Ohm))

; Electric Conductance Units

(instance Siemens ElectricConductanceMeasure)
(instance Siemens SystemeInternationalUnit)
(documentation Siemens "SI &%ElectricConductanceMeasure.  Symbol:  S.  
In the case of direct current, the conductance in &%Siemens is the 
reciprocal of the resistance in &%Ohms; in the case of alternating current, 
it is the reciprocal of the impedance in ohms.  siemens = A/V = 
m^(-2)*kg(-1)*s^(3)*A^2.")

; Magnetic Flux Units

(instance Weber MagneticFluxMeasure)
(instance  Weber SystemeInternationalUnit)
(documentation Weber "SI &%MagneticFluxMeasure.  Symbol: Wb. It is the 
magnetic flux which, linking a circuit of one turn, produces in it an
electromotive force of 1 &%Volt as it is reduced to zero at a uniform
rate in 1 &%SecondDuration.  &%Weber = V*s = m^2*kg*s^(-2)*A^(-1)." )

; Magnetic Flux Density Units

(instance Tesla MagneticFluxDensityMeasure)
(instance Tesla SystemeInternationalUnit)
(documentation Tesla "SI &%MagneticFluxDensityMeasure.  Symbol:  T.
One &%Tesla equals one &%Weber per square &%Meter.  &%Tesla = Wb/m^2 = 
kg*s^(-2)*A^(-1).")

; Inductance Units

(instance Henry InductanceMeasure)
(instance Henry SystemeInternationalUnit)
(documentation Henry "SI &%InductanceMeasure.  Symbol: H.  One &%Henry 
is equivalent to one &%Volt divided by one &%Ampere per &%SecondDuration. 
If a current changing at the rate of one &%Ampere per &%SecondDuration 
induces an electromotive force of one &%Volt, the circuit has an 
inductance of one &%Henry.  &%Henry = Wb/A = m^2*kg*s^(-2)*A^(-2).")

; Celsius Temperature unit

(instance Celcius ThermodynamicTemperatureMeasure)
(instance Celcius SystemeInternationalUnit)
(documentation Celcius "A &%ThermodynamicTemperatureMeasure.
&%Kelvin differs from the &%Celcius scale in that the triple point of 
water is defined to be 273.16 degrees &%Kelvin while it is 0 degrees
&%Celcius. The boiling point of water is 100 degrees &%Celcius.  The 
magnitudes of intervals in the two scales are the same.  By definition
the conversion constant is 273.15")

(equal
        (MeasureFn ?NUMBER Celcius)
        (MeasureFn (SubtractionFn ?NUMBER 273.15) Kelvin))

; Luminous Flux Units

(instance Lumen LuminousFluxMeasure)
(instance Lumen SystemeInternationalUnit)
(documentation Lumen "SI &%LuminousFluxMeasure.  Symbol: lm.  It is the 
amount streaming outward through one solid angle of 1 &%Steradian from a 
uniform point source having an intensity of one &%Candela.  &%Lumen = 
cd*sr = cd * 1.")

; Illuminance Units

(instance Lux IlluminanceMeasure )
(instance Lux SystemeInternationalUnit)
(documentation Lux "SI &%IlluminanceMeasure.  Symbol: lx.  It is the 
amount of illumination provided when one &%Lumen is evenly distributed 
over an area of 1 square &%Meter. This is also equivalent to the 
illumination that would exist on a surface all points of which are one 
&%Meter from a point source of one &%Candela.  &%Lux = lm/m^2 = 
m^(-2)*cd.")

; Activity Units

(instance Becquerel ActivityMeasure)
(instance Becquerel SystemeInternationalUnit)
(documentation Becquerel "SI &%ActivityMeasure.  Symbol: Bq.  It measures 
the amount of radioactivity contained in a given sample of matter. It is 
that quantity of a radioactive element in which there is one atomic 
disintegration per &%SecondDuration.  &%Becquerel = s^(-1).")

; Absorbed Dose Units

(instance Gray AbsorbedDoseMeasure)
(instance Gray SystemeInternationalUnit)
(documentation Gray "SI &%AbsorbedDoseMeasure.  Symbol: Gy.  It measures 
the dose of radiation absorbed in living tissue. It is equal approximately 
to the absorbed dose delivered when the energy per unit mass imparted to
matter by ionizing radiation is 1 &%Joule per &%Kilogram.  &%Gray = J/kg 
= m^2*s^(-2).")

; Dose Equivalent Units

(instance Sievert DoseEquivalentMeasure)
(instance Sievert SystemeInternationalUnit)
(documentation Sievert "SI &%DoseEquivalentMeasure.  Symbol: Sv.  It is 
a unit of biologic dose of ionizing radiation.  The &%Sievert makes it 
possible to normalize doses of different types of radiation. It takes 
into account the relative biologic effectiveness of ionizing radiation, 
since each form of such radiation--e.g., X rays, gamma rays, neutrons--
has a slightly different effect on living tissue for a given absorbed 
dose. The dose equivalent of a given type of radiation (in &%Sievert) is 
the dose of the radiation in &%Gray multiplied by a quality factor that 
is based on the relative biologic effectiveness of the radiation. 
Accordingly, one &%Sievert is generally defined as the amount of radiation 
roughly equivalent in biologic effectiveness to one &%Gray of gamma 
radiation.  &%Sievert = J/kg = m^2*s^(-2)")

; Units that are accepted for -use- with SI

(instance DayDuration TimeDuration)
(instance DayDuration UnitOfMeasure)
(documentation DayDuration "Time unit. 1 day = 24 hours.")

(equal
	(MeasureFn ?NUMBER DayDuration)
	(MeasureFn (MultiplicationFn ?NUMBER 24) HourDuration))

(instance HourDuration TimeDuration)
(instance HourDuration UnitOfMeasure)
(documentation HourDuration "Time unit. 1 hour = 60 minutes.")

(equal
	(MeasureFn ?NUMBER HourDuration)
	(MeasureFn (MultiplicationFn ?NUMBER 60) MinuteDuration))

(instance MinuteDuration TimeDuration)
(instance MinuteDuration UnitOfMeasure)
(documentation MinuteDuration "Time unit. 1 minute = 60 seconds. ")

(equal
        (MeasureFn ?NUMBER MinuteDuration)
        (MeasureFn (MultiplicationFn ?NUMBER 60) SecondDuration))

(instance MonthDuration TimeDuration)
(instance MonthDuration UnitOfMeasure)
(documentation MonthDuration "Time unit.  1/12th of a year.")

(instance YearDuration TimeDuration)
(instance YearDuration UnitOfMeasure)
(documentation YearDuration "Time unit. one calendar year. 1 year =
365 days = 31536000 seconds.")

(equal
	(MeasureFn ?NUMBER YearDuration)
	(MeasureFn (MultiplicationFn ?NUMBER 365) DayDuration))

;; What follows are units that are also accepted for use with SI.  The 
;; SI equivalents for these units are obtained experimentally.

(instance Amu MassMeasure)
(instance Amu UnitOfMeasure)
(documentation Amu "Atomic mass unit.  Symbol: u. It is the mass of 
the twelfth part of an atom of the Carbon 12 isotope. ")

(equal
        (MeasureFn ?NUMBER Amu)
        (MeasureFn (MultiplicationFn ?NUMBER 1.6605402E-27) Kilogram)) 

(instance ElectronVolt EnergyMeasure)
(instance ElectronVolt UnitOfMeasure)
(documentation ElectronVolt "The &%ElectronVolt is an &%EnergyMeasure.  
Symbol: eV.  It is the kinetic energy acquired by an electron in passing 
through a potential difference of 1 &%Volt in a vacuum.")

(equal
        (MeasureFn ?NUMBER ElectronVolt)
        (MeasureFn (MultiplicationFn ?NUMBER 1.60217733E-19) Joule))

;; The following units have been temporarily accepted for use with 
;; SI units.

(instance Angstrom LengthMeasure)
(instance Angstrom UnitOfMeasure)
(documentation Angstrom "The &%Angstrom is a &%LengthMeasure. 
1 &%Angstrom = 10^(-10) m")

(equal
        (MeasureFn ?NUMBER Angstrom)
        (MeasureFn (MultiplicationFn ?NUMBER 1.0E-10) Meter))

;; The following units are unacceptable in SI but are part of other 
;; systems of measurement that are widely used.

;; More Length units

(instance Foot LengthMeasure)
(instance Foot UnitOfMeasure)
(documentation Foot "English length unit of feet.")

(equal
        (MeasureFn ?NUMBER Foot)
        (MeasureFn (MultiplicationFn ?NUMBER 0.3048) Meter))

(instance Inch LengthMeasure)
(instance Inch UnitOfMeasure)
(documentation Inch "English length unit of inches.")

(equal
        (MeasureFn ?NUMBER Inch)
        (MeasureFn (MultiplicationFn ?NUMBER 0.0254) Meter))

(instance Mile LengthMeasure)
(instance Mile UnitOfMeasure)
(documentation Mile "English length unit of miles.")

(equal
        (MeasureFn ?NUMBER Mile)
        (MeasureFn (MultiplicationFn ?NUMBER 1609.344) Meter))

;; More Mass units

(instance AtomGram MassMeasure)
(instance AtomGram UnitOfMeasure)
(documentation AtomGram "&%MassMeasure that is also known as the gram-atom.  
Defined as the mass in grams of 1 &%Mole of pure substance.  For example, 
1 &%AtomGram of Carbon 12 will be 12 &%Grams of pure Carbon 12.  2 &%AtomGrams 
of the same substance will be 24 &%Grams of it.  This is an unusual unit in 
that it is essentially 1 &%Mole of 'stuff' measured in grams, so that the 
actual value (i.e. mass) depends on the type of substance.")

(instance PoundMass MassMeasure)
(instance PoundMass UnitOfMeasure)
(documentation PoundMass "English mass unit of pounds.")

(equal
        (MeasureFn ?NUMBER Pound)
        (MeasureFn (MultiplicationFn ?NUMBER 0.45359237) Kilogram))

(instance Slug MassMeasure)
(instance Slug UnitOfMeasure)
(documentation Slug "English mass unit of slugs.")

(equal
        (MeasureFn ?NUMBER Slug)
        (MeasureFn (MultiplicationFn ?NUMBER 14.59390) Kilogram))

;; More Thermodynamic Temperature units

(instance Rankine ThermodynamicTemperatureMeasure)
(instance Rankine UnitOfMeasure)
(documentation Rankine "A &%ThermodynamicTemperatureMeasure.  Note 
that 0 degrees &%Rankine is the same as the absolute zero (i.e. 0 
degrees &%Kelvin).")

(equal
        (MeasureFn ?NUMBER Rankine)
        (MeasureFn (MultiplicationFn ?NUMBER 1.8) Kelvin))

;; More Force units

(instance PoundForce ForceMeasure)
(instance PoundForce UnitOfMeasure)
(documentation PoundForce "English pound of force. The conversion
factor depends on the local value of the acceleration of free fall. A
mean value is used in the conversion axiom associated with this 
constant.")

(equal
        (MeasureFn ?NUMBER PoundForce)
        (MeasureFn (MultiplicationFn ?NUMBER 4.448222) Newton))

;; More Energy units

(instance Calorie EnergyMeasure)
(instance Calorie UnitOfMeasure)
(documentation Calorie "A &%Calorie is an &%EnergyMeasure.")

(equal
        (MeasureFn ?NUMBER Calorie)
        (MeasureFn (MultiplicationFn ?NUMBER 4.1868) Joule))

(instance BritishThermalUnit EnergyMeasure)
(instance BritishThermalUnit UnitOfMeasure)
(documentation BritishThermalUnit "An &%EnergyMeasure.")

(equal
        (MeasureFn ?NUMBER BritishThermalUnit)
        (MeasureFn (MultiplicationFn ?NUMBER 1055.05585262) Joule))

;; More plane angle units

(instance AngularDegree PlaneAngleMeasure)
(instance AngularDegree UnitOfMeasure)
(documentation AngularDegree "A &%PlaneAngleMeasure.")

(equal
	(MeasureFn ?NUMBER AngularDegree)
	(MeasureFn (MultiplicationFn ?NUMBER (DivisionFn Pi 180)) Radian))

; Other interesting units of measure

; Currency units

(instance DollarUnitedStates CurrencyMeasure)
(instance DollarUnitedStates UnitOfMeasure)
(documentation DollarUnitedStates "A &%CurrencyMeasure.")

(instance CentUnitedStates CurrencyMeasure)
(instance CentUnitedStates UnitOfMeasure)
(documentation CentUnitedStates "A &%CurrencyMeasure.  1 US cent = 
10^-2 US dollars.")

(equal
        (MeasureFn ?NUMBER CentUnitedStates)
        (MeasureFn (MultiplicationFn ?NUMBER .01) DollarUnitedStates))

; Information units

(instance Bit InformationMeasure)
(instance Bit UnitOfMeasure)
(documentation Bit "One &%Bit of information.  A one or a zero.")

(instance Byte InformationMeasure)
(instance Byte UnitOfMeasure)
(documentation Byte "One &%Byte of information.  A &%Byte is eight 
&%Bits.")

(equal
        (MeasureFn ?NUMBER Byte)
        (MeasureFn (MultiplicationFn ?NUMBER 8) Bit))

(instance KiloByte InformationMeasure)
(instance KiloByte UnitOfMeasure)
(documentation KiloByte "One &%KiloByte (K) of information.  One 
&%KiloByte is 1024 &%Bytes.  Note that this sense of 'kilo' is 
different from the one accepted in the SI system.")

(equal
        (MeasureFn ?NUMBER KiloByte)
        (MeasureFn (MultiplicationFn ?NUMBER 1024) Byte))

(instance MegaByte InformationMeasure)
(instance MegaByte UnitOfMeasure)
(documentation MegaByte "One &%MegaByte (MB) of information.  One 
&%MegaByte is 1024 &%KiloBytes.  Note that this sense of 'mega' is 
different from the one accepted in the SI system.")

(equal
        (MeasureFn ?NUMBER MegaByte)
        (MeasureFn (MultiplicationFn ?NUMBER 1024) KiloByte))

;; The following content was inspired by the Quantities ontology 
;; developed by ITBM-CNR.

(instance measure AsymmetricRelation)
(domain measure 1 Object)
(domain measure 2 ConstantQuantity)
(documentation measure "A very general &%Predicate for asserting that a 
particular &%Object is measured by a particular &%ConstantQuantity.  
In general, the second argument of this &%Predicate will be an instance 
of the &%Function &%MeasureFn.")

(subrelation age measure)
(domain age 2 TimeDuration)
(singleValued age 2)
(documentation age "Simply relates an &%Object to a &%ConstantQuantity 
specifying the age of the &%Object.")

(subrelation length measure)
(domain length 2 LengthMeasure)
(documentation length "&%BinaryPredicate that is used to state the measure 
of an &%Object from one point to another point along its surface.")

(subrelation width length)
(singleValued width 2)
(documentation width "&%BinaryPredicate that is used to state the measure 
of an &%Object from side to side at its widest span.")

(subrelation diameter width)
(documentation diameter "&%BinaryPredicate that is used to state the 
measure of a circular &%Object from side to side.")

(subrelation height length)
(singleValued height 2)
(documentation height "&%BinaryPredicate that is used to state the measure 
of an &%Object from its lowest point to its highest point.") 

(instance distance SpatialRelation)
(instance distance TernaryPredicate)
(domain distance 1 Physical)
(domain distance 2 Physical)
(domain distance 3 LengthMeasure)
(singleValued distance 3)
(documentation distance "(&%distance ?OBJ1 ?OBJ2 ?QUANT) means that the 
shortest distance between the two objects ?OBJ1 and ?OBJ2 is ?QUANT.")

(instance larger SpatialRelation)
(instance larger TransitiveRelation)
(instance larger IrreflexiveRelation)
(domain larger 1 Object)
(domain larger 2 Object)
(documentation larger "(&%larger ?OBJ1 ?OBJ2) simply means that ?OBJ1 is 
larger, along some physical dimension, than ?OBJ2.")

(=>
   (larger ?OBJ1 ?OBJ2)
   (exists (?QUANT1 ?QUANT2)
      (and
         (measure ?OBJ1 ?QUANT1)
         (measure ?OBJ2 ?QUANT2)
         (greaterThan ?QUANT1 ?QUANT2))))

(instance smaller SpatialRelation)
(instance smaller TransitiveRelation)
(instance smaller IrreflexiveRelation)
(domain smaller 1 Object)
(domain smaller 2 Object)
(inverse smaller larger)
(documentation smaller "(&%smaller ?OBJ1 ?OBJ2) simply means that ?OBJ1 
is smaller, along some physical dimension, than ?OBJ2.")

(subrelation monetaryValue measure)
(domain monetaryValue 2 CurrencyMeasure)
(singleValued monetaryValue 2)
(documentation monetaryValue "A &%BinaryPredicate that associates an 
&%Object with its value expressed as an instance of &%CurrencyMeasure.")

(instance PropertyFn UnaryFunction)
(domain PropertyFn 1 Agent)
(range PropertyFn Set)
(documentation PropertyFn "A &%UnaryFunction that maps an &%Agent to the &%Set of &%Property owned by the &%Agent.")

(<=> 
   (instance ?OBJ (PropertyFn ?PERSON))
   (possesses ?PERSON ?OBJ))

(instance WealthFn UnaryFunction)
(domain WealthFn 1 Agent)
(range WealthFn CurrencyMeasure)
(documentation WealthFn "A &%UnaryFunction that maps an &%Agent to a &%CurrencyMeasure specifying the value of the property owned by the &%Agent.  Note that this &%Function is generally used in conjunction with the &%Function &%PropertyFn, e.g. (&%WealthFn (&%PropertyFn BillGates)) would return the monetary value of the sum of Bill Gates' holdings.") 

(<=>
   (equal (WealthFn ?PERSON) ?AMOUNT)
   (monetaryValue (PropertyFn ?PERSON) ?AMOUNT))

;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  ORGANIC OBJECTS AND PROCESSES   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following formulas incorporate the content in the Natural-Kinds 
;; ontology developed by ITBM-CNR.  This content is essentially a set of 
;; high-level biological categories.

(subclass Plant Organism)
(documentation Plant "An &%Organism having cellulose &%CellWalls, growing 
by synthesis of &%InorganicSubstances, generally distinguished by the 
presence of chlorophyll, and lacking the power of locomotion.")

(=>
	(instance ?PLANT Plant)
	(exists (?COLOR ?PROC)
		(and
			(part ?COLOR ?PLANT)
			(instance ?COLOR Pigment)
			(result ?COLOR ?PROC)
			(instance ?PROC Photosynthesis))))

(subclass Animal Organism)
(disjoint Plant Animal)
(documentation Animal "An &%Organism with eukaryotic &%Cells, and lacking 
stiff cell walls, plastids, and photosynthetic &%Pigments.")

(=>
	(instance ?ANIMAL Animal)
	(exists (?CELL ?WALL)
		(and
			(component ?CELL ?ANIMAL)
			(instance ?CELL Cell)
			(component ?WALL ?CELL)
			(instance ?WALL CellWallNonRigid))))

(subclass Microorganism Organism)
(documentation Microorganism "An &%Organism that can be seen only with 
the aid of a microscope.")

(subclass Archaeon Microorganism)
(documentation Archaeon "&%Archaea are characterized by:  1. the presence 
of characteristic tRNAs and ribosomal RNAs, 2. the absence of peptidoglycan 
cell walls, 3. the presence of ether-linked lipids built from branched-chain 
subunits, and 4. their occurrence in unusual habitats. While archaea 
resemble &%Bacteria in morphology and genomic organization, they resemble 
eukarya in their method of genomic replication.")

(subclass Bacterium Microorganism)
(documentation Bacterium "A small, typically one-celled, prokaryotic 
&%Microorganism.")

(=>
	(instance ?BACTERIUM Bacterium)
	(cardinality (KappaFn ?CELL (and (component ?CELL ?BACTERIUM) (instance ?CELL  Cell))) 1))

(=>
	(and
		(instance ?BACTERIUM Bacterium)
		(inhabits ?BACTERIUM ?OBJ))
	(instance ?OBJ OrganicObject))

(subclass Virus Microorganism)
(documentation Virus "An &%Organism consisting of a core of a single 
nucleic acid enclosed in a protective coat of protein. A virus may replicate 
only inside a host living cell. A virus exhibits some but not all of the 
usual characteristics of living things.")

(=>
	(instance ?VIRUS Virus)
	(cardinality (KappaFn ?MOL (and (component ?MOL ?VIRUS) (instance ?MOL Molecule))) 1))

(=>
	(and
		(instance ?VIRUS Virus)
		(inhabits ?VIRUS ?OBJ))
	(instance ?OBJ OrganicObject))

(=>
	(and
		(instance ?VIRUS Virus)
		(instance ?PROC Replication)
		(effector ?PROC ?VIRUS))
	(exists (?CELL)
		(and
			(located ?PROC ?CELL)
			(instance ?CELL Cell))))
			 
(subclass Chlamydia Microorganism)
(documentation Chlamydia "An &%Organism which is intermediate in size 
and complexity between a &%Virus and a &%Bacterium and which is parasitic 
within the cells of &%Insects and &%Ticks.")

(=>
	(and
		(instance ?CHLAMYD Chlamydia)
		(inhabits ?CHLAMYD ?OBJ))
	(instance ?OBJ OrganicObject))

(=>
	(instance ?CHLAMYD Chlamydia)
	(exists (?CELL ?ANIMAL)
		(and
			(inhabits ?CHLAMYD ?CELL)
			(instance ?CELL Cell)
			(component ?CELL ?ANIMAL)
			(or
				(instance ?ANIMAL Insect)
				(instance ?ANIMAL Tick)))))

(subclass Vertebrate Animal)
(documentation Vertebrate "An &%Animal which has a &%SpinalColumn.")

(=>
	(instance ?VERT Vertebrate)
	(exists (?SPINE)
		(and
			(component ?SPINE ?VERT)
			(instance ?SPINE SpinalColumn))))

(subclass Invertebrate Animal)
(disjoint Invertebrate Vertebrate)
(documentation Invertebrate "An &%Animal which has no &%SpinalColumn.")

(subclass Arthropod Invertebrate)
(documentation Arthropod "A &%Class of &%Invertebrate that includes 
&%Arachnids and &%Insects.")

(subclass Arachnid Arthropod)
(documentation Arachnid "A &%Class of &%Arthropods that includes 
&%Ticks and &%Spiders.")

(subclass Spider Arachnid)
(documentation Spider "A &%Class of &%Arachnids characterized by an 
unsegmented abdomen, poisonous fangs, and an ability to spin thread.")

(subclass Tick Arachnid)
(documentation Tick "A &%Class of &%Arachnids that attach themselves 
to instances of &%WarmBloodedVertebrate and feed off of their &%Blood.")

(subclass Insect Arthropod)
(documentation Insect "A &%Class of &%Arthropods that is distinguished 
by its body appearance.")

(subclass ColdBloodedVertebrate Vertebrate)
(documentation ColdBloodedVertebrate "&%Vertebrates whose body temperature 
is not internally regulated.") 

(subclass WarmBloodedVertebrate Vertebrate)
(disjoint WarmBloodedVertebrate ColdBloodedVertebrate)
(documentation WarmBloodedVertebrate "&%Vertebrates whose body temperature 
is internally regulated.")

(subclass Alga Plant)
(documentation Alga "A chiefly aquatic plant that contains chlorophyll, 
but does not form embryos during development and lacks vascular tissue.")

(=>
	(instance ?ALGA Alga)
	(exists (?WATER)
		(and
			(inhabits ?ALGA ?WATER)
			(instance ?WATER Water))))

(subclass Amphibian ColdBloodedVertebrate)
(disjoint Amphibian Reptile)
(documentation Amphibian "A cold-blooded, smooth-skinned &%Vertebrate 
which characteristically hatches as an aquatic larva, breathing by 
gills.  When mature, the &%Amphibian breathes with &%Lungs.")

(subclass Bird WarmBloodedVertebrate)
(disjoint Bird Mammal)
(documentation Bird "A &%Vertebrate having a constant body temperature 
and characterized by the presence of feathers.")

(subclass Fish ColdBloodedVertebrate)
(disjoint Fish Reptile)
(documentation Fish "A cold-blooded aquatic &%Vertebrate characterized by 
fins and breathing by gills. Included here are &%Fish having either a bony 
skeleton, such as a perch, or a cartilaginous skeleton, such as a shark.  
Also included are those &%Fish lacking a jaw, such as a lamprey or 
hagfish.")

(=>
	(instance ?FISH Fish)
	(exists (?WATER)
		(and
			(inhabits ?FISH ?WATER)
			(instance ?WATER Water))))

(subclass Fungus Plant)
(documentation Fungus "A eukaryotic &%Organism characterized by the 
absence of chlorophyll and the presence of a &%CellWallRigid. Included 
here are both slime molds and true fungi such as yeasts, molds, mildews, 
and mushrooms.")

(=>
	(instance ?FUNGUS Fungus)
	(exists (?WALL)
		(and
			(component ?WALL ?FUNGUS)
			(instance ?WALL CellWallRigid))))

(=>
	(and
		(instance ?FUNGUS Fungus)
		(inhabits ?FUNGUS ?OBJ))
	(instance ?OBJ OrganicObject))

(subclass Mammal WarmBloodedVertebrate)
(documentation Mammal "A &%Vertebrate having a constant body temperature 
and characterized by the presence of hair, mammary glands, and sweat 
glands.")

(subclass Primate Mammal)
(documentation Primate "The &%Class of &%Mammals which are &%Primates.")

(subclass Human Primate)
(subclass Human CognitiveAgent)
(documentation Human "Modern man, the only remaining species of the Homo 
genus.")

(subclass Reptile ColdBloodedVertebrate)
(documentation Reptile "A &%ColdBloodedVertebrate having an external 
covering of scales or horny plates.  &%Reptiles breathe by means of 
&%Lungs and generally lay eggs.")

;; The following formulas cover biologically related &%Classes under 
;; &%Substance.

(subclass BiologicallyActiveSubstance Substance)
(partition BiologicallyActiveSubstance ToxicSubstance PharmacologicSubstance Nutrient)
(documentation BiologicallyActiveSubstance "A &%Substance that is 
capable of inducing a change in the structure or functioning of an 
&%Organism.")

(subclass ToxicSubstance BiologicallyActiveSubstance)
(documentation ToxicSubstance "A &%BiologicallyActiveSubstance of concern 
because of its potentially hazardous or toxic effects.  This would include 
most drugs of abuse, as well as agents that require special handling because 
of their toxicity.  Most pharmaceutical agents, although potentially harmful, 
are excluded here and are assigned to the sibling &%Class 
&%PharmacologicSubstance.")

(subclass PharmacologicSubstance BiologicallyActiveSubstance)
(documentation PharmacologicSubstance "A &%BiologicallyActiveSubstance used 
in the treatment, diagnosis, prevention or analysis of normal and abnormal 
body function.  This includes &%OrganicSubstances that occur naturally in 
the body and are administered therapeutically.")

(subclass Nutrient BiologicallyActiveSubstance)
(documentation Nutrient "A &%BiologicallyActiveSubstance produced or 
required by an &%Organism, of primary interest because of its role in the 
biologic functioning of the &%Organism.")

(subclass Protein Nutrient)
(documentation Protein "A Nutrient made up of amino acids joined by 
peptide bonds.")

(subclass Enzyme Protein)
(documentation Enzyme "A complex &%Protein that is produced by living 
cells and which catalyzes specific biochemical reactions. There are six 
main types of enzymes:  oxidoreductases, transferases, hydrolases, 
lyases, isomerases, and ligases.")

(subclass Vitamin Nutrient)
(documentation Vitamin "A &%BiologicallyActiveSubstance, usually an 
&%OrganicSubstance, present in natural products or made synthetically, 
which is essential in the diet of &%Humans and other higher &%Animals.  
Included here are &%Vitamin precursors and provitamins.")

(subclass BodySubstance OrganicSubstance)
(documentation BodySubstance "Extracellular material and mixtures of 
cells and extracellular material that are produced, excreted or accreted 
by the body.  Included here are &%OrganicSubstances such as saliva, 
dental enamel, sweat, and gastric acid.")

(subclass Hormone BodySubstance)
(documentation Hormone "In &%Animals, a chemical secreted by an 
endocrine gland whose products are released into the circulating fluid.  
&%Plant hormones or synthetic hormones which are used only to alter or 
control various physiologic processes, e.g., reproductive control agents, 
are assigned to the &%Class &%PharmacologicSubstance. &%Hormones act as 
chemical messengers and regulate various physiologic processes such as 
growth, reproduction, metabolism, etc.  They usually fall into two broad 
categories, viz. steroid hormones and peptide hormones.")

(subclass Blood BodySubstance)
(documentation Blood "A fluid present in &%Animals that transports 
&%Nutrients to and waste products away from various &%BodyParts.")

(subclass Pigment BodySubstance)
(documentation Pigment "A coloring that is present in the &%Cells of 
&%Organisms.")

(=>
    (instance ?COLOR Pigment)
    (exists (?ORGANISM)
        (and
            (instance ?ORGANISM Organism)
            (part ?COLOR ?ORGANISM))))

(subclass ToxicOrganism Organism)
(documentation ToxicOrganism "The &%Class of &%Organisms which are 
poisonous to other &%Organisms.")

(=>
   (instance ?ORGANISM ToxicOrganism)
   (exists (?SUBSTANCE)
      (and 
         (instance ?SUBSTANCE ToxicSubstance)
         (part ?SUBSTANCE ?ORGANISM))))

(subclass Food Object)
(documentation Food "Any &%Object containing &%Nutrients, such as 
carbohydrates, proteins, and fats, that can be ingested by a living 
&%Organism and metabolized into energy and body tissue.")

(=>
    (instance ?FOOD Food)
    (exists (?NUTRIENT)
        (and
            (instance ?NUTRIENT Nutrient)
            (part ?NUTRIENT ?FOOD))))

(=>
    (instance ?FOOD Food)
    (exists (?ORGANISM)
        (and
            (instance ?ORGANISM Organism)
            (capability (KappaFn ?PROC (and (instance ?PROC Eating) 
		(resource ?EATING ?FOOD))) agent ?ORGANISM)))) 

(=>
   (instance ?FOOD Food)
   (forall (?PART1)
      (=>
         (part ?PART1 ?FOOD)
         (exists (?PART2 ?ORGANISM)
            (and
               (part ?PART1 ?PART2)
               (part ?PART2 ?ORGANISM)
               (instance ?ORGANISM Organism))))))

(subclass AnatomicalStructure OrganicObject)
(disjoint AnatomicalStructure Organism)
(documentation AnatomicalStructure "A normal or pathological part of the 
anatomy or structural organization of an &%Organism.")

(=>
    (instance ?ANAT AnatomicalStructure)
    (exists (?ORGANISM)
        (and
            (instance ?ORGANISM Organism)
            (part ?ANAT ?ORGANISM))))

(subclass BodyPart AnatomicalStructure)
(documentation BodyPart "A collection of &%Cells and &%Tissues which are 
localized to a specific area and carry out one or more specialized 
functions of an &%Organism. The instances of this &%Class range from gross 
structures to small components of complex &%Organs.")

(=>
    (instance ?PART BodyPart)
    (exists (?CELL)
        (and
            (instance ?CELL Cell)
            (part ?CELL ?PART))))

(subclass BodyJunction BodyPart)
(documentation BodyJunction "The place where two &%AnatomicalStructures 
meet or connect.")

(=>
    (instance ?JUNCT BodyJunction)
    (exists (?STRUCT)
        (and
            (instance ?STRUCT AnatomicalStructure)
            (component ?JUNCT ?STRUCT))))

(=>
    (instance ?JUNCT BodyJunction)
    (exists (?STRUCT1 ?STRUCT2)
        (and
            (connected ?JUNCT ?STRUCT1)
	      (connected ?JUNCT ?STRUCT2)
            (instance ?STRUCT1 AnatomicalStructure)
            (instance ?STRUCT2 AnatomicalStructure)
            (not
                (equal ?STRUCT1 ?STRUCT2))))) 

(subclass Cell BodyPart)
(documentation Cell "The fundamental structural and functional unit of 
living &%Organisms.")

(=>
    (and
        (instance ?CELL Cell)
        (developmentalForm ?CELL ?FORM))
    (instance ?FORM Cell))

(subclass CellWall BodyPart)
(documentation CellWall "The permeable wall that encloses the &%Cells 
of most &%Organisms.")

(=>
    (instance ?WALL CellWall)
    (exists (?CELL)
        (and
            (instance ?CELL Cell)
            (part ?WALL ?CELL))))

(subclass CellWallRigid CellWall)
(documentation CellWallRigid "A type of &%CellWall found in &%Plants.")

(subclass CellWallNonRigid CellWall)
(disjoint CellWallNonRigid CellWallRigid)
(documentation CellWallNonRigid "A type of &%CellWall found in 
&%Animals.")

(subclass Organ BodyPart)
(documentation Organ "A somewhat independent &%BodyPart that performs a 
specialized function.")

(=>
   (instance ?ORGAN Organ)
   (exists (?PURP)
      (hasPurpose ?ORGAN ?PURP)))

(subclass SpinalColumn Organ)
(documentation SpinalColumn "A flexible column made out of bones called 
vertebrae.  The main function of the &%SpinalColumn is to protect the 
spinal cord.")

(subclass Gland Organ)
(documentation Gland "An &%Organ that removes &%Substances from the &%Blood, 
alters them in some way, and then releases them.")

(subclass Tissue BodySubstance)
(documentation Tissue "An aggregation of similarly specialized &%Cells 
and the associated intercellular substance. &%Tissues are relatively 
non-localized in comparison to &%BodyParts, &%Organs or &%Organ components.  
The main features of &%Tissues are self-connectivity (see 
&%SelfConnectedObject) and being a homogeneous mass (all parts in the 
same granularity are instances of &%Tissue as well).")

(=>
    (instance ?STUFF Tissue)
    (exists (?PART)
        (and
            (instance ?PART Cell)
            (part ?PART ?STUFF))))

(=>
    (instance ?STUFF Tissue)
    (exists (?ORGANISM)
        (and
            (instance ?ORGANISM Organism)
            (part ?STUFF ?ORGANISM))))

(subclass EmbryonicStructure AnatomicalStructure)
(documentation EmbryonicStructure "An &%AnatomicalStructure that exists 
only before the &%Organism is fully formed. In &%Mammals, for example, a 
structure that exists only prior to the birth of the organism.  This 
structure may be normal or abnormal.")

(=>
    (instance ?STRUCT EmbryonicStructure)
    (exists (?THING)
        (and
            (developmentalForm ?THING ?STRUCT)
            (or 
                (instance ?THING Organism)
                (instance ?THING AnatomicalStructure)))))

(subclass FullyFormedAnatomicalStructure AnatomicalStructure)
(disjoint FullyFormedAnatomicalStructure EmbryonicStructure)
(documentation FullyFormedAnatomicalStructure "An &%AnatomicalStructure 
in a fully formed &%Organism.  In &%Mammals, for example, it would be a 
structure in the body after the birth of the &%Organism.")

;; The following formulas cover the hierarchy of &%Classes under 
;; &%BiologicalProcess.

(subclass BiologicalProcess NaturalProcess)
(documentation BiologicalProcess "A &%NaturalProcess embodied in an 
&%OrganicObject.")

(=>
   (instance ?PROC BiologicalProcess)
   (exists (?OBJ)
      (and
         (instance ?OBJ OrganicObject)
         (located ?PROC ?OBJ))))

(subclass PhysiologicProcess BiologicalProcess)
(documentation PhysiologicProcess "A normal process of an &%Organism 
or part of an &%Organism.")

(subclass OrganismProcess PhysiologicProcess)
(documentation OrganismProcess "A physiologic function of the 
&%Organism as a whole, of multiple organ systems or of multiple 
&%Organs or &%Tissues.")

(subclass Birth OrganismProcess)
(documentation Birth "The &%Process of being born.")

(=>
   (instance ?ORGANISM Organism)
   (exists (?BIRTH)
      (and
         (instance ?BIRTH Birth)
         (experiencer ?BIRTH ?ORGANISM))))

(subclass Death OrganismProcess)
(documentation Death "The &%Process of dying.")

(=>
   (instance ?ORGANISM Organism)
   (exists (?DEATH)
      (and
         (instance ?DEATH Death)
         (experiencer ?DEATH ?ORGANISM))))

(subclass Breathing OrganismProcess)
(documentation Breathing "The &%Process of respiration, by which oxygen 
is made available to an &%Animal.")

(subclass Eating OrganismProcess)
(documentation Eating "The &%Process of eating, by which &%Food is 
incorporated into an &%Animal.")

(subclass Growth PhysiologicProcess)
(documentation Growth "The &%Process of biological development in which 
an &%Organism changes its form or its size.")

(subclass Replication PhysiologicProcess)
(documentation Replication "The &%Process of biological reproduction.  
This can be either a sexual or an asexual process.") 

(subclass MentalProcess OrganismProcess)
(documentation MentalProcess "An &%OrganismProcess involving the mind 
or cognitive processing.")

(=>
    (instance ?PROCESS MentalProcess)
    (exists (?ANIMAL)
        (and
            (instance ?ANIMAL Animal)
            (experiencer ?PROCESS ?ANIMAL))))

(subclass OrganOrTissueProcess PhysiologicProcess)
(disjoint OrganOrTissueProcess OrganismProcess)
(documentation OrganOrTissueProcess "A &%PhysiologicProcess of a 
particular &%Organ or &%Tissue.")

(=>
    (instance ?PROC ?OrganOrTissueProcess)
    (exists (?THING)
        (and
            (located ?PROC ?THING)
            (or
                (instance ?THING Organ)
                (instance ?THING Tissue)))))

(subclass Photosynthesis OrganOrTissueProcess)
(documentation Photosynthesis "Synthesis of carbohydrates from carbon 
dioxide, water, and light.")

(subclass PathologicProcess BiologicalProcess)
(disjoint PathologicProcess PhysiologicProcess)
(documentation PathologicProcess "A disordered process, activity, or 
state of the &%Organism as a whole, of a body system or systems, or of 
multiple &%Organs or &%Tissues. Included here are normal responses to a 
negative stimulus as well as patholologic conditions or states that are 
less specific than a disease. Pathologic functions frequently have 
systemic effects.")

(subclass DiseaseOrSyndrome PathologicProcess)
(documentation DiseaseOrSyndrome "A &%PathologicProcess which alters or 
interferes with a normal process, state or activity of an &%Organism.  
It is usually characterized by the abnormal functioning of one or more 
of the host's systems, parts, or &%Organs.")

(subclass MentalOrBehavioralDysfunction DiseaseOrSyndrome)
(documentation MentalOrBehavioralDysfunction "A clinically significant 
dysfunction whose major manifestation is behavioral or psychological.  
These dysfunctions may have identified or presumed biological etiologies 
or manifestations.")

(=>
    (instance ?DISEASE MentalOrBehavioralDysfunction)
    (exists (?ANIMAL)
        (and
            (instance ?ANIMAL Animal)
            (patient ?DISEASE ?ANIMAL))))

(subclass Injuring PathologicProcess)
(documentation Injuring "A traumatic wound or injury caused by an 
external agent or force.  Since no injury is possible without some 
biologic function which affects the organism being injured, it is a 
subclass of &%BiologicalProcess.")

(=>
    (instance ?INJ Injuring)
    (exists (?STRUCT)
        (and
            (instance ?STRUCT AnatomicalStructure)
            (patient ?INJ ?STRUCT))))

(=>
    (instance ?INJ Injuring)
    (exists (?OBJ)
        (and
            (instance ?OBJ Object)
            (causes ?OBJ ?INJ))))

(subclass Poisoning Injuring)
(documentation Poisoning "A &%Poisoning is caused by an external 
substance.  Since &%Poisoning is not possible without some biologic 
function which affects the &%Organism being injured, it is a subclass 
of &%BiologicalProcess.")

(=>
    (instance ?POISON Poisoning)
    (exists (?THING)
        (and
            (patient ?POISON ?THING)
            (or
                (instance ?THING Organism)
                (instance ?THING AnatomicalStructure)))))

(=>
    (instance ?POISON Poisoning)
    (exists (?SUBSTANCE)
        (and
            (causes ?SUBSTANCE ?POISON)
            (instance ?SUBSTANCE ToxicSubstance))))

;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;    SOCIAL HIERARCHY    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; This section contains definitions and axioms relating to social 
;; groups and the relations between them.

(subclass Group Collection)
(subclass Group Agent)
(documentation Group "A &%Collection of &%Animals or &%Humans, e.g. a 
flock of sheep, a herd of goats, or the local Boy Scout troop.")

(=>
   (and
      (instance ?GROUP Group)
      (member ?MEMB ?GROUP))
   (instance ?MEMB Animal))

(subclass GroupOfPeople Group)
(documentation GroupOfPeople "A &%Group consisting exclusively of 
&%Humans.")

(=>
   (and
      (instance ?GROUP GroupOfPeople)
      (member ?MEMB ?GROUP))
   (instance ?MEMB Human))

(subclass AgeGroup GroupOfPeople)
(documentation AgeGroup "A &%GroupOfPeople whose &%members all have 
the same &%age.")

(=>
   (instance ?GROUP AgeGroup)
   (forall (?MEMB1 ?MEMB2 ?AGE1 ?AGE2)
      (=>
         (and
            (member ?MEMB1 ?GROUP)
            (member ?MEMB2 ?GROUP)
            (age ?MEMB1 ?AGE1)
            (age ?MEMB2 ?AGE2))
         (equal ?AGE1 ?AGE2))))

(subclass FamilyGroup GroupOfPeople)
(documentation FamilyGroup "A &%GroupOfPeople whose &%members bear 
&%familyRelations to one another.")

(=>
   (instance ?GROUP FamilyGroup)
   (forall (?MEMB1 ?MEMB2)
      (=>
         (and
            (member ?MEMB1 ?GROUP)
            (member ?MEMB2 ?GROUP))
         (familyRelation ?MEMB1 ?MEMB2))))

(instance familyRelation EquivalenceRelation)
(domain familyRelation 1 Organism)
(domain familyRelation 2 Organism)
(documentation familyRelation "A very general &%Predicate for biological 
relationships.  (&%familyRelation ?ORGANISM1 ?ORGANISM2) means that 
?ORGANISM1 and ?ORGANISM2 are biologically derived from a common 
ancestor.")

(=>
   (familyRelation ?ORGANISM1 ?ORGANISM2)
   (exists (?ORGANISM3)
      (and
         (familyRelation ?ORGANISM3 ?ORGANISM1)
         (familyRelation ?ORGANISM3 ?ORGANISM2))))

(subclass OrganizationUnit CognitiveAgent)
(documentation OrganizationUnit "An &%Organization or a functional unit 
within an &%Organization, e.g. positions, divisions, and departments.  For 
example, the Shell Corporation, the accounting department at Shell, the 
positions of CEO and mail room supervisor at Shell, etc. would all be 
instances of &%OrganizationUnit.  The continued existence of an 
&%OrganizationUnit is not dependent on any of its members, its location, or 
its particular facility.  Note that, unlike its subclass &%Organization, an 
&%OrganizationUnit may have no members or just one member.")

(subclass Organization OrganizationUnit)
(subclass Organization GroupOfPeople)
(documentation Organization "An &%Organization is a corporate or 
similar institution, distinguished from other &%Agents.  The &%members 
of an &%Organization typically have a common purpose or function.  
Note that parts of &%Organizations should not be included here, unless 
they are &%subOrganizations of an &%Organization.")

(subclass Corporation Organization)
(documentation Corporation "An &%Organization that provides products 
and/or services for a fee with the aim of making a profit.")

(subclass Publisher Corporation)
(documentation Publisher "A &%Publisher is a &%Corporation that 
publishes documents of some sort.")

(subclass Government Organization)
(documentation Government "The ruling body of a &%Nation or one of the 
&%subOrganizations of a &%Nation.")

(subclass EducationalOrganization Organization)
(documentation EducationalOrganization "A &%EducationalOrganization is 
an institution of learning.  Some examples are public and private K-12 
schools, and colleges and universities.")

(subclass ReligiousOrganization Organization)
(documentation ReligiousOrganization "An &%Organization whose members share a set of religious beliefs.")

(=>
   (instance ?ORG ReligiousOrganization)
   (exists (?PROP)
      (forall (?PERSON)
         (=>
            (member ?PERSON ?ORG)
		(believes ?PERSON ?PROP)))))

(subrelation subOrganizations subCollection)
(domain subOrganizations 1 Organization)
(domain subOrganizations 2 Organization)
(documentation subOrganizations "(&%subOrganizations ?ORG1 ?ORG2) means 
that ?ORG1 is an &%Organization which is a proper part of the 
&%Organization ?ORG2.")

(subclass Position OrganizationUnit)
(relatedInternalConcept Position occupiesPosition)
(documentation Position "A formal position of reponsibility within an 
&%Organization.  Examples of &%Positions include president, laboratory 
director, senior researcher, sales representative, etc.")

(instance occupiesPosition TernaryPredicate)
(domain occupiesPosition 1 CognitiveAgent)
(domain occupiesPosition 2 Position)
(domain occupiesPosition 3 Organization)
(documentation occupiesPosition "(&%occupiesPosition ?PERSON ?POSITION ?ORG) 
means that ?PERSON holds the &%Position ?POSITION at &%Organization ?ORG.  
For example, (&%occupiesPosition &%TomSmith &%ResearchDirector &%AcmeLaboratory) 
means that &%TomSmith is a research director at Acme Labs.") 

(=>
   (occupiesPosition ?PERSON ?POSITION ?ORG)
   (employs ?ORG ?PERSON))

(instance citizen AsymmetricRelation)
(domain citizen 1 Human)
(domain citizen 2 Nation)
(documentation citizen "(&%citizen ?PERSON ?NATION) means that the 
&%Human ?PERSON is a citizen of &%Nation ?NATION.")

;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TEMPORAL DEFINITIONS/AXIOMS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The first part of this section contains definitions and axioms for 
;; &%TimePoint, &%TimeInterval, and relations involving these temporal 
;; notions.  Most of these definitions and axioms were derived from James 
;; Allen's work.  This part of the section was extensively revised on 
;; the basis of comments from Pat Hayes.  The second part of this section 
;; is an attempt to incorporate the Simple-Time ontology from the 
;; Ontolingua server into the SUMO.

;; Necessary intermediate constants

(subclass TimeDuration TimeMeasure)
(documentation TimeDuration "Any measure of length of time, 
with or without respect to the universal timeline.")

(subclass TimePosition TimeMeasure)
(partition TimePosition TimeInterval TimePoint)
(documentation TimePosition "Any &%TimePoint or &%TimeInterval 
along the universal timeline from &%NegativeInfinity to 
&%PositiveInfinity.")

(subclass TimeInterval TimePosition)
(documentation TimeInterval "An interval of time.  Note that a 
&%TimeInterval has both an extent and a location on the universal 
timeline.")

(=>
   (instance ?INTERVAL TimeInterval)
   (exists (?DURATION)
      (duration ?INTERVAL ?DURATION)))

(subclass TimePoint TimePosition)
(documentation TimePoint "An extensionless point on the universal timeline. 
The &%TimePoints at which &%Processes occur can be known with various 
degrees of precision and approximation, but conceptually &%TimePoints are 
point-like and not interval-like.  That is, it doesn't make sense to talk 
about what happens during a &%TimePoint, or how long the &%TimePoint lasts.")

(=>
   (instance ?POINT TimePoint)
   (not
      (exists (?DURATION)
         (duration ?POINT ?DURATION))))

(=>
   (instance ?POINT TimePoint)
   (exists (?INTERVAL)
      (and
         (instance ?INTERVAL TimeInterval)
         (temporalPart ?POINT ?INTERVAL))))

(instance PositiveInfinity TimePoint)
(documentation PositiveInfinity "The &%TimePoint that is after 
all other &%TimePoints.")

(=> 
   (and 
      (instance ?POINT TimePoint) 
      (not (equal ?POINT PositiveInfinity)))
   (before ?POINT PositiveInfinity))

(=> 	
   (and 	
      (instance ?POINT TimePoint) 
      (not (equal ?POINT PositiveInfinity)))
   (exists (?OTHERPOINT) 
      (temporallyBetween ?POINT ?OTHERPOINT PositiveInfinity)))

(instance NegativeInfinity TimePoint)
(documentation NegativeInfinity "The &%TimePoint that is before 
all other &%TimePoints.")

(=> 
   (and 
      (instance ?POINT TimePoint) 
      (not (equal ?POINT NegativeInfinity)))
    (before NegativeInfinity ?POINT))

(=> 	
   (and 	
      (instance ?POINT TimePoint) 
      (not (equal ?POINT NegativeInfinity)))
   (exists (?OTHERPOINT) 
      (temporallyBetween NegativeInfinity ?OTHERPOINT ?POINT)))

(instance temporalPart AsymmetricRelation)
(domain temporalPart 1 TimePoint)
(domain temporalPart 2 TimeInterval)
(documentation temporalPart "(&%temporalPart ?POINT ?INTERVAL) 
means that &%TimePoint ?POINT is part of &%TimeInterval ?INTERVAL.")

(instance holdsDuring AsymmetricRelation)
(domain holdsDuring 1 TimePosition)
(domain holdsDuring 2 Formula)
(documentation holdsDuring "(&%holdsDuring ?TIME ?FORMULA) means that the 
proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note 
that this implies that ?FORMULA is true at every &%TimePoint which is a 
&%temporalPart ?TIME.")

(=>
   (and
      (holdsDuring ?TIME1 ?SITUATION)
      (instance ?TIME1 TimeInterval)
      (temporalPart ?TIME2 ?TIME1))
   (holdsDuring ?TIME2 ?SITUATION))

;; Definitions of basic temporal relations

(instance BeginFn TemporalRelation)
(instance BeginFn UnaryFunction)
(domain BeginFn 1 TimeInterval)
(range BeginFn TimePoint)
(documentation BeginFn "A &%UnaryFunction that maps a &%TimeInterval to 
the &%TimePoint at which the interval begins.")

(=>
   (equal (BeginFn ?INTERVAL) ?POINT)
   (forall (?OTHERPOINT)
      (=>
         (and
            (temporalPart ?OTHERPOINT ?INTERVAL)
            (not (equal ?OTHERPOINT ?POINT)))
         (before ?POINT ?OTHERPOINT))))

(instance EndFn TemporalRelation)
(instance EndFn UnaryFunction)
(domain EndFn 1 TimeInterval)
(range EndFn TimePoint)
(documentation EndFn "A &%UnaryFunction that maps a &%TimeInterval to 
the &%TimePoint at which the interval ends.")

(=>
   (equal (EndFn ?INTERVAL) ?POINT)
   (forall (?OTHERPOINT)
      (=>
         (and
            (temporalPart ?OTHERPOINT ?INTERVAL)
            (not (equal ?OTHERPOINT ?POINT)))
         (before ?OTHERPOINT ?POINT))))

(instance starts TemporalRelation)
(instance starts TransitiveRelation)
(instance starts IrreflexiveRelation)
(domain starts 1 TimeInterval)
(domain starts 2 TimeInterval)
(documentation starts "(&%starts ?INTERVAL1 ?INTERVAL2) means that 
?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same 
initial &%TimePoint and that ?INTERVAL1 ends before ?INTERVAL2.")

(<=> 
   (starts ?INTERVAL1 ?INTERVAL2)
   (and 
      (equal
         (BeginFn ?INTERVAL1)
	   (BeginFn ?INTERVAL2))
      (before
         (EndFn ?INTERVAL1)
  	   (EndFn ?INTERVAL2))))

(instance finishes TemporalRelation)
(instance finishes TransitiveRelation)
(instance finishes IrreflexiveRelation)
(domain finishes 1 TimeInterval)
(domain finishes 2 TimeInterval)
(documentation finishes "(&%finishes ?INTERVAL1 ?INTERVAL2) means that 
?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same 
ending &%TimePoint and that ?INTERVAL2 begins before ?INTERVAL1.")

(<=>
   (finishes ?INTERVAL1 ?INTERVAL2)
   (and
      (before
         (BeginFn ?INTERVAL2)
         (BeginFn ?INTERVAL1))
      (equal
         (EndFn ?INTERVAL2)
         (EndFn ?INTERVAL1))))

(instance before TemporalRelation)
(instance before IrreflexiveRelation)
(instance before TransitiveRelation)
(subrelation before beforeEq)
(domain before 1 TimePoint)
(domain before 2 TimePoint)
(documentation before "(&%before ?POINT1 ?POINT2) means that ?POINT1 
precedes ?POINT2 on the universal timeline.")

(instance beforeEq PartialOrderingRelation)
(domain beforeEq 1 TimePoint)
(domain beforeEq 2 TimePoint)
(documentation beforeEq "(&%beforeEq ?POINT1 ?POINT2) means that ?POINT1 
is identical with ?POINT2 or occurs before it on the universal timeline.")

(=> 
   (beforeEq ?POINT1 ?POINT2)
   (or 
       (before ?POINT1 ?POINT2) 
       (equal ?POINT1 ?POINT2)))

(instance temporallyBetween TemporalRelation)
(instance temporallyBetween TernaryPredicate)
(subrelation temporallyBetween temporallyBetweenOrEqual)
(domain temporallyBetween 1 TimePoint)
(domain temporallyBetween 2 TimePoint)
(domain temporallyBetween 3 TimePoint)
(documentation temporallyBetween "(&%temporallyBetween ?POINT1 ?POINT2 
?POINT3) means that the &%TimePoint ?POINT2 is between the &%TimePoints 
?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before 
?POINT3.")

(<=>
   (temporallyBetween ?POINT1 ?POINT2 ?POINT3)
   (and
      (before ?POINT1 ?POINT2)
      (before ?POINT2 ?POINT3))) 

(instance temporallyBetweenOrEqual TemporalRelation)
(instance temporallyBetweenOrEqual TernaryPredicate)
(domain temporallyBetweenOrEqual 1 TimePoint)
(domain temporallyBetweenOrEqual 2 TimePoint)
(domain temporallyBetweenOrEqual 3 TimePoint)
(documentation temporallyBetweenOrEqual "(&%temporallyBetweenOrEqual ?POINT1 ?POINT2 
?POINT3) means that the &%TimePoint ?POINT1 is before or equal to the 
&%TimePoint ?POINT2 and ?POINT2 is before or equal to the &%TimePoint 
?POINT3.")

(<=>
   (temporallyBetweenOrEqual ?POINT1 ?POINT2 ?POINT3)
   (and
      (beforeEq ?POINT1 ?POINT2)
      (beforeEq ?POINT2 ?POINT3)))

(instance overlapsTemporally TemporalRelation)
(instance overlapsTemporally PartialOrderingRelation)
(domain overlapsTemporally 1 TimeInterval)
(domain overlapsTemporally 2 TimeInterval)
(documentation overlapsTemporally "(&%overlapsTemporally ?INTERVAL1 
?INTERVAL2) means that the two &%TimeIntervals ?INTERVAL1 and ?INTERVAL2 
have a &%TimeInterval in common.  Note that this is consistent with 
?INTERVAL1 and ?INTERVAL2 being the same &%TimeInterval.")

(<=>
   (overlapsTemporally ?INTERVAL1 ?INTERVAL2)
   (or 
      (equal ?INTERVAL1 ?INTERVAL2)
      (during ?INTERVAL1 ?INTERVAL2)
      (starts ?INTERVAL1 ?INTERVAL2)
      (finishes ?INTERVAL1 ?INTERVAL2)))

(instance during TemporalRelation)
(instance during TransitiveRelation)
(instance during IrreflexiveRelation)
(subrelation during overlapsTemporally)
(domain during 1 TimeInterval)
(domain during 2 TimeInterval)
(documentation during "(&%during ?INTERVAL1 ?INTERVAL2) means that 
?INTERVAL1 starts after and ends before ?INTERVAL2.") 

(=> 
   (during ?INTERVAL1 ?INTERVAL2)
   (and 
      (before (EndFn ?INTERVAL1) (EndFn ?INTERVAL2))
      (before (BeginFn ?INTERVAL2) (BeginFn ?INTERVAL1))))

(instance meetsTemporally TemporalRelation)
(instance meetsTemporally AsymmetricRelation)
(instance meetsTemporally IntransitiveRelation)
(domain meetsTemporally 1 TimeInterval)
(domain meetsTemporally 2 TimeInterval)
(documentation meetsTemporally "(&%meetsTemporally ?INTERVAL1 ?INTERVAL2) 
means that the terminal point of the &%TimeInterval ?INTERVAL1 is the 
initial point of the &%TimeInterval ?INTERVAL2.")

(<=> 
   (meetsTemporally ?INTERVAL1 ?INTERVAL2)
   (equal 
      (EndFn ?INTERVAL1)
      (BeginFn ?INTERVAL2)))

(=>
  (and
    (equal
      (BeginFn ?INTERVAL1)
      (BeginFn ?INTERVAL2))
    (equal
      (EndFn ?INTERVAL1)
      (EndFn ?INTERVAL2)))
    (equal ?INTERVAL1 ?INTERVAL2))

(instance earlier TemporalRelation)
(instance earlier TransitiveRelation)
(instance earlier IrreflexiveRelation)
(domain earlier 1 TimeInterval)
(domain earlier 2 TimeInterval)
(documentation earlier "(earlier INTERVAL1 INTERVAL2) means that 
INTERVAL1 ends before INTERVAL2 begins.")

(=>
    (earlier ?INTERVAL1 ?INTERVAL2)
    (before (EndFn ?INTERVAL1) (BeginFn ?INTERVAL2)))

(instance cooccur TemporalRelation)
(instance cooccur EquivalenceRelation)
(domain cooccur 1 Physical)
(domain cooccur 2 Physical)
(documentation cooccur "(&%cooccur ?THING1 ?THING2) means that the 
&%Object or &%Process ?THING1 occurs at the same time as, together with, 
or jointly with the &%Object or &%Process ?THING2.  This covers the 
following temporal relations:  is co-incident with, is concurrent with, 
is contemporaneous with, and is concomitant with.")

(<=>
   (cooccur ?PHYS1 ?PHYS2)
   (equal (WhenFn ?PHYS1) (WhenFn ?PHYS2))) 

;; The following functions generate &%TimeIntervals which are relevant 
;; with respect to instances of &%Physical.

(instance WhenFn TemporalRelation)
(instance WhenFn UnaryFunction)
(domain WhenFn 1 Physical)
(range WhenFn TimeInterval)
(documentation WhenFn "A &%UnaryFunction that maps an &%Object or 
&%Process to the exact &%TimeInterval during which it exists.  Note 
that, for every &%TimePoint ?TIME outside of the &%TimeInterval 
(WhenFn ?THING), ?THING is not &%existant at ?TIME.")

(before (BeginFn (WhenFn ?THING)) (EndFn (WhenFn ?THING)))

(instance PastFn TemporalRelation)
(instance PastFn UnaryFunction)
(domain PastFn 1 TimePosition)
(range PastFn TimeInterval)
(documentation PastFn "A &%UnaryFunction that maps a &%TimePosition 
to the &%TimeInterval that meets it and that begins at 
&%NegativeInfinity.")

(meetsTemporally (PastFn (WhenFn ?THING)) (WhenFn ?THING))

(equal (BeginFn (PastFn ?TIME)) NegativeInfinity)

(instance ImmediatePastFn TemporalRelation)
(instance ImmediatePastFn UnaryFunction)
(domain ImmediatePastFn 1 TimePosition)
(range ImmediatePastFn TimeInterval)
(documentation ImmediatePastFn "A &%UnaryFunction that maps a 
&%TimePosition to a short, indeterminate &%TimeInterval that 
immediately precedes the &%TimePosition.")

(finishes (ImmediatePastFn (WhenFn ?THING)) (PastFn (WhenFn ?THING)))

(instance FutureFn TemporalRelation)
(instance FutureFn UnaryFunction)
(domain FutureFn 1 TimePosition)
(range FutureFn TimeInterval)
(documentation FutureFn "A &%UnaryFunction that maps a &%TimePosition 
to the &%TimeInterval which it meets and which ends at 
&%PositiveInfinity.")

(meetsTemporally (WhenFn ?THING) (FutureFn (WhenFn ?THING)))

(equal (EndFn (FutureFn ?TIME)) PositiveInfinity)

(instance ImmediateFutureFn TemporalRelation)
(instance ImmediateFutureFn UnaryFunction)
(domain ImmediateFutureFn 1 TimePosition)
(range ImmediateFutureFn TimeInterval)
(documentation ImmediateFutureFn "A &%UnaryFunction that maps a 
&%TimePosition to a short, indeterminate &%TimeInterval that 
immediately follows the &%TimePosition.")

(starts (ImmediateFutureFn (WhenFn ?THING)) (FutureFn (WhenFn ?THING)))

;; The following definitions and axioms (down to the next section break) 
;; cover the content in the Simple-Time ontology on the Ontolingua server.

(instance time TemporalRelation)
(instance time AsymmetricRelation)
(domain time 1 Physical)
(domain time 2 TimePosition)
(documentation time "A very general &%TemporalRelation that specifies, 
at any level of resolution, the &%TimePosition at which a 
particular &%Object or &%Process exists or occurs.")

(=>
   (and
      (time ?PHYS ?TIME1)
      (time ?PHYS ?TIME2))
   (or
      (overlapsTemporally ?TIME1 ?TIME2)
      (temporalPart ?TIME1 ?TIME2)
      (temporalPart ?TIME2 ?TIME1)))

(instance date AsymmetricRelation)
(domain date 1 Physical)
(domain date 2 Day)
(subrelation date time)
(singleValued date 2) 
(documentation date "A &%BinaryPredicate that specifies a 
&%TimePosition in absolute calendar time, at the resolution 
of one day, for a particular &%Object or &%Process.")

(instance birthTime AsymmetricRelation)
(domain birthTime 1 Organism)
(domain birthTime 2 TimePosition)
(subrelation birthTime time)
(documentation birthTime "A &%BinaryPredicate that specifies, at any 
level of resolution, the &%TimePosition at which a particular 
&%Organism was born.")

(=>
   (birthTime ?ORGANISM ?TIME)
   (holdsDuring (ImmediateFutureFn ?TIME) (attribute ?ORGANISM Living)))

(=>
   (birthTime ?ORGANISM ?TIME)
   (holdsDuring ?TIME 
      (exists (?BIRTH) 
         (and 
            (instance ?BIRTH Birth) 
            (experiencer ?BIRTH ?ORGANISM)))))

(instance deathTime AsymmetricRelation)
(domain deathTime 1 Organism)
(domain deathTime 2 TimePosition)
(subrelation deathTime time)
(documentation deathTime "A &%BinaryPredicate that specifies, at any 
level of resolution, the &%TimePosition at which a particular 
&%Organism died.")

(=>
   (deathTime ?ORGANISM ?TIME)
   (holdsDuring (FutureFn ?TIME) (attribute ?ORGANISM Dead)))

(=>
   (deathTime ?ORGANISM ?TIME)
   (holdsDuring ?TIME 
      (exists (?DEATH) 
         (and 
            (instance ?DEATH Death) 
            (experiencer ?DEATH ?ORGANISM)))))

(=>
   (and
      (birthTime ?ORGANISM ?TIME1)
      (deathTime ?ORGANISM ?TIME2)
      (instance ?TIME1 TimePoint)
      (instance ?TIME2 TimePoint))
   (exists (?INTERVAL)
      (and
         (equal (BeginFn ?INTERVAL) ?TIME1)
         (equal (EndFn ?INTERVAL) ?TIME2)
         (holdsDuring ?INTERVAL (attribute ?ORGANISM Living)))))

(=>
   (and
      (birthTime ?ORGANISM ?TIME1)
      (deathTime ?ORGANISM ?TIME2)
      (instance ?TIME1 TimeInterval)
      (instance ?TIME2 TimeInterval))
   (exists (?INTERVAL)
      (and
         (starts ?TIME1 ?INTERVAL)
         (finishes ?TIME2 ?INTERVAL)
         (holdsDuring ?INTERVAL (attribute ?ORGANISM Living)))))

(instance YearFn TemporalRelation)
(instance YearFn UnaryFunction)
(domain YearFn 1 Integer)
(range YearFn Year)
(documentation YearFn "A &%UnaryFunction that maps a number to the 
corresponding calendar &%Year.  For example, (&%YearFn 1912) denotes 
the &%Year 1912.")

(instance MonthFn TemporalRelation)
(instance MonthFn BinaryFunction)
(domain MonthFn 1 PositiveInteger)
(domain MonthFn 2 Year)
(range MonthFn Month)
(documentation MonthFn "A &%BinaryFunction that maps a number and a 
&%Year to the corresponding &%Month of the &%Year.  For example 
(&%MonthFn 8 (&%YearFn 1912)) denotes the eighth &%Month, i.e. August, 
of the &%Year 1912.")

(=>
   (instance (MonthFn ?NUMBER ?YEAR) Month)
   (lessThanOrEqualTo ?NUMBER 12)) 

(instance DayFn TemporalRelation)
(instance DayFn BinaryFunction)
(domain DayFn 1 PositiveInteger)
(domain DayFn 2 Month)
(range DayFn Day)
(documentation DayFn "A &%BinaryFunction that maps a number and a 
&%Month to the corresponding &%Day of the &%Month.  For example, 
(&%DayFn 18 (&%MonthFn 8 (YearFn 1912))) denotes the 18th day of 
August 1912.")

(=>
   (instance (DayFn ?NUMBER ?MONTH) Day)
   (lessThanOrEqualTo ?NUMBER 31)) 

(instance HourFn TemporalRelation)
(instance HourFn BinaryFunction)
(domain HourFn 1 PositiveRealNumber)
(domain HourFn 2 Day)
(range HourFn Hour)
(documentation HourFn "A &%BinaryFunction that maps a number and a 
&%Day to the corresponding &%Hour of the &%Day.  For example,  
(&%HourFn 14 (&%DayFn 18 (&%MonthFn 8 (YearFn 1912)))) denotes the 
14th hour, i.e. 2 PM, on the 18th day of August 1912.")

(=>
   (instance (HourFn ?NUMBER ?DAY) Hour)
   (lessThan ?NUMBER 24)) 

(instance MinuteFn TemporalRelation)
(instance MinuteFn BinaryFunction)
(domain MinuteFn 1 PositiveRealNumber)
(domain MinuteFn 2 Hour)
(range MinuteFn Minute)
(documentation MinuteFn "A &%BinaryFunction that maps a number and an 
&%Hour to the corresponding &%Minute of the &%Hour.  For example, 
(&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn 8 (YearFn 1912))))) 
denotes 15 minutes after 2 PM on the 18th day of August 1912.")

(=>
   (instance (MinuteFn ?NUMBER ?HOUR) Minute)
   (lessThan ?NUMBER 60)) 

(instance SecondFn TemporalRelation)
(instance SecondFn BinaryFunction)
(domain SecondFn 1 PositiveRealNumber)
(domain SecondFn 2 Minute)
(range SecondFn Second)
(documentation SecondFn "A &%BinaryFunction that maps a number and a 
&%Minute to the corresponding &%Second of the &%Minute.  For example,
(&%SecondFn 9 (&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn 8 
(YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the 
18th day of August 1912.")  

(=>
   (instance (SecondFn ?NUMBER ?MINUTE) Second)
   (lessThan ?NUMBER 60)) 

(subclass Year TimeInterval)
(relatedInternalConcept Year YearFn)
(documentation Year "The &%Class of all calendar &%Years.")

(=>
   (instance ?YEAR Year)
   (duration ?YEAR YearDuration))

(subclass Month TimeInterval)
(relatedInternalConcept Month MonthFn)
(documentation Month "The &%Class of all calendar &%Months.")

(=>
   (instance ?MONTH Month)
   (duration ?MONTH MonthDuration))

(subclass Day TimeInterval)
(relatedInternalConcept Day DayFn)
(documentation Day "The &%Class of all calendar &%Days.")

(=>
   (instance ?DAY Day)
   (duration ?DAY DayDuration))

(subclass Hour TimeInterval)
(relatedInternalConcept Hour HourFn)
(documentation Hour "The &%Class of all clock &%Hours.")

(=>
   (instance ?HOUR Hour)
   (duration ?HOUR HourDuration))

(subclass Minute TimeInterval)
(relatedInternalConcept Minute MinuteFn)
(documentation Minute "The &%Class of all clock &%Minutes.")

(=>
   (instance ?MINUTE Minute)
   (duration ?MINUTE MinuteDuration))

(subclass Second TimeInterval)
(relatedInternalConcept Second SecondFn)
(documentation Second "The &%Class of all clock &%Seconds.")

(=>
   (instance ?SECOND Second)
   (duration ?SECOND SecondDuration))

;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MEREOTOPOLOGICAL DEFINITIONS/AXIOMS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Most of this content is taken from Barry Smith's and Nicola Guarino's 
;; papers on the subject.

(instance connected SpatialRelation)
(instance connected ReflexiveRelation)
(instance connected SymmetricRelation)
(domain connected 1 Object)
(domain connected 2 Object)
(documentation connected "(connected ?OBJ1 ?OBJ2) means that ?OBJ1 
&%meetsSpatially ?OBJ2 or that ?OBJ1 &%overlapsSpatially ?OBJ2.")

(=>
     (connected ?OBJ1 ?OBJ2)
     (or
          (meetsSpatially ?OBJ1 ?OBJ2)
          (overlapsSpatially ?OBJ1 ?OBJ2)))

(instance connects SpatialRelation)
(instance connects TernaryPredicate)
(domain connects 1 Object)
(domain connects 2 Object)
(domain connects 3 Object)
(documentation connects "The relationship between three things, when one of 
the three things connects the other two.  More formally, (&%connects ?OBJ1 
?OBJ2 ?OBJ3) means that (&%connected ?OBJ1 ?OBJ2) and (&%connected ?OBJ1 ?OBJ3) 
and not (&%connected ?OBJ2 ?OBJ3).")

(<=>
   (connects ?OBJ1 ?OBJ2 ?OBJ3)
   (and
      (connected ?OBJ1 ?OBJ2)
      (connected ?OBJ1 ?OBJ3)
      (not
         (connected ?OBJ2 ?OBJ3))))

(subrelation meetsSpatially connected)
(documentation meetsSpatially "(&%meetsSpatially ?OBJ1 ?OBJ2) means that 
?OBJ1 and ?OBJ2 are &%connected but that neither ?OBJ1 nor ?OBJ2 
&%overlapsSpatially the other.")

(=>
	(meetsSpatially ?OBJ1 ?OBJ2)
     	(not
        	(overlapsSpatially ?OBJ1 ?OBJ2)))

(subrelation overlapsSpatially connected)
(documentation overlapsSpatially "(&%overlapsSpatially ?OBJ1 ?OBJ2) means 
that the &%Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a 
reflexive and symmetric (but not transitive) relation.")

(<=>
	(overlapsSpatially ?OBJ1 ?OBJ2)
     	(exists (?OBJ3)
          	(and
               	(part ?OBJ3 ?OBJ1)
               	(part ?OBJ3 ?OBJ2))))

(=>
     (forall (?OBJ3)
          (=>
               (part ?OBJ3 ?OBJ1)
               (overlapsSpatially ?OBJ3 ?OBJ2)))
     (part ?OBJ1 ?OBJ2))

(subrelation overlapsPartially overlapsSpatially)
(documentation overlapsPartially "(&%overlapsPartially ?OBJ1 ?OBJ2) means 
that ?OBJ1 and ?OBJ2 have part(s) in common, but neither ?OBJ1 nor ?OBJ2 
is a &%part of the other.")

(=>
	(overlapsPartially ?OBJ1 ?OBJ2)
	(and
		(not
			(part ?OBJ1 ?OBJ2))
		(not
			(part ?OBJ2 ?OBJ1))))

(subrelation superficialPart part)
(documentation superficialPart "(&%superficialPart ?OBJ1 ?OBJ2) 
means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own 
(or, intuitively, that only overlaps those parts of ?OBJ2 that are 
externally connected with the geometric complement of ?OBJ2). This too 
is a transitive relation closed under &%MereologicalSumFn and 
&%MereologicalProductFn.")

(=> 
	(superficialPart ?OBJ1 ?OBJ2)
	(and
		(not
			(interiorPart ?OBJ1 ?OBJ2))
		(not
			(exists (?OBJ3)
				(interiorPart ?OBJ3 ?OBJ1)))))

(subrelation surface superficialPart)
(documentation surface "(&%surface ?OBJ1 ?OBJ2) means that ?OBJ1 
is a maximally connected &%superficialPart of ?OBJ2.")

(=> 
	(surface ?OBJ1 ?OBJ2)
	(and 
		(instance ?OBJ1 SelfConnectedObject)
		(forall (?OBJ3)
                  (=>
			     (superficialPart ?OBJ3 ?OBJ2)
			     (part ?OBJ3 ?OBJ1)))))

(subrelation interiorPart part)
(documentation interiorPart "(&%interiorPart ?OBJ1 ?OBJ2) means 
that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and 
any &%superficialPart ?OBJ2.")

(=>
	(interiorPart ?OBJ1 ?OBJ2)
     	(forall (?PART)
               	(=> 
                    	(superficialPart ?PART ?OBJ2)
                    	(not
                         	(overlapsSpatially ?OBJ1 ?PART)))))

(instance MereologicalSumFn SpatialRelation)
(instance MereologicalSumFn BinaryFunction)
(domain MereologicalSumFn 1 Object)
(domain MereologicalSumFn 2 Object)
(range MereologicalSumFn Object)
(relatedInternalConcept MereologicalSumFn MereologicalProductFn)
(relatedInternalConcept MereologicalSumFn MereologicalDifferenceFn)
(documentation MereologicalSumFn "(&%MereologicalSumFn ?OBJ1 ?OBJ2) 
denotes the &%Object consisting of the parts which belong to either 
?OBJ1 or ?OBJ2.") 

(=>
     (equal ?OBJ3 (MereologicalSumFn ?OBJ1 ?OBJ2))
     (forall (?PART)
	       (<=>
	            (part ?PART ?OBJ3)
		      (or
	  	           (part ?PART ?OBJ1)
			     (part ?PART ?OBJ2)))))

(instance MereologicalProductFn SpatialRelation)
(instance MereologicalProductFn BinaryFunction)
(domain MereologicalProductFn 1 Object)
(domain MereologicalProductFn 2 Object)
(range MereologicalProductFn Object)
(relatedInternalConcept MereologicalProductFn MereologicalDifferenceFn)
(documentation MereologicalProductFn "(&%MereologicalProductFn ?OBJ1 ?OBJ2) 
denotes the &%Object consisting of the parts which belong to both ?OBJ1 
and ?OBJ2.") 

(=>
     (equal ?OBJ3 (MereologicalProductFn ?OBJ1 ?OBJ2))
     (forall (?PART)
	       (<=>
	            (part ?PART ?OBJ3)
		      (and
	  	           (part ?PART ?OBJ1)
			     (part ?PART ?OBJ2)))))

(instance MereologicalDifferenceFn SpatialRelation)
(instance MereologicalDifferenceFn BinaryFunction)
(domain MereologicalDifferenceFn 1 Object)
(domain MereologicalDifferenceFn 2 Object)
(range MereologicalDifferenceFn Object)
(documentation MereologicalDifferenceFn "(&%MereologicalDifferenceFn ?OBJ1 
?OBJ2) denotes the &%Object consisting of the parts which belong to ?OBJ1 
and not to ?OBJ2.") 

(=>
     (equal ?OBJ3 (MereologicalDifferenceFn ?OBJ1 ?OBJ2))
     (forall (?PART)
	       (<=>
	            (part ?PART ?OBJ3)
		      (and
	  	           (part ?PART ?OBJ1)
                       (not
			          (part ?PART ?OBJ2))))))
	  
;; What follows is an alignment of Casati and Varzi's formal theory of 
;; holes with the SUMO.

(instance hole SpatialRelation)
(instance hole AsymmetricRelation)
(domain hole 1 Hole)
(domain hole 2 Object)
(documentation hole "(&%hole ?HOLE ?OBJ) means that ?HOLE is a 
&%Hole in ?OBJ.  A &%Hole is an fillable body located at the 
&%surface an &%Object.")

(subclass Hole Region)
(relatedInternalConcept Hole hole)
(documentation Hole "A hole is an immaterial body located at the surface 
of an &%Object.  Since every &%Hole is ontologically dependent on its host 
(i.e., the object in which it is a hole), being a &%Hole is defined as 
being a &%hole in something.  Note that two &%Holes may occupy the same 
region, or part of the same region, without sharing any parts.")

(<=> 
	(instance ?HOLE Hole)
	(exists (?OBJ)
		(hole ?HOLE ?OBJ)))

(=> 
	(hole ?HOLE ?OBJ)
      (not 
		(instance ?OBJ Hole)))

(=> 
	(hole ?HOLE ?OBJ)
          (not 
		 (overlapsSpatially ?HOLE ?OBJ)))

;; Any two hosts of a hole have a common proper part that entirely hosts 
;; the hole. 

(=> 
	(and 
		(hole ?HOLE ?OBJ1)
            (hole ?HOLE ?OBJ2))
      (exists (?OBJ3)
             (and 
			(properPart ?OBJ3 (MereologicalProductFn ?OBJ1 ?OBJ2))
                  (hole ?HOLE ?OBJ3))))

;; A common host of two holes hosts all parts of the sum of those holes.

(=> 
	(and 
		(hole ?HOLE1 ?OBJ)
      	(hole ?HOLE2 ?OBJ))
     	(forall (?HOLE3)
        	(=> 
			(part ?HOLE3 (MereologicalSumFn ?HOLE1 ?HOLE2))
                  (hole ?HOLE3 ?OBJ))))

;; Any object that includes the host of a hole is a host of that hole, 
;; unless its parts also include parts of that very hole.

(=> 
	(and 
		(hole ?HOLE ?OBJ1)
            (part ?OBJ1 ?OBJ2))
      (or
		(overlapsSpatially ?HOLE ?OBJ2)
            (hole ?HOLE ?OBJ2)))

;; Overlapping holes have overlapping hosts.

(=> 
	(and 
		(hole ?HOLE1 ?OBJ1)
            (hole ?HOLE2 ?OBJ2)
            (overlapsSpatially ?HOLE1 ?HOLE2))
      (overlapsSpatially ?OBJ1 ?OBJ2))

;; No hole is atomic 
            
(=> 
	(instance ?HOLE1 Hole)
      (exists (?HOLE2)
      	(properPart ?HOLE2 ?HOLE1)))

;; Topological Definitions

;; Definition of 'PrincipalHostFn'

(instance PrincipalHostFn SpatialRelation)
(instance PrincipalHostFn UnaryFunction)
(domain PrincipalHostFn 1 Hole)
(range PrincipalHostFn Object)
(documentation PrincipalHostFn "A &%UnaryFunction that maps a &%Hole to 
the &%Object which is its principal host.  The principle host of a &%Hole 
is its maximally connected host (a notion taken here to be defined only 
when the argument is a hole).")

(=>
     (equal ?OBJ1 (PrincipalHostFn ?HOLE))
     (forall (?OBJ2)
		(<=> 
			(overlapsSpatially ?OBJ2 ?OBJ1)
			(exists (?OBJ3)
				(and 
					(hole ?HOLE ?OBJ3)
				      (instance ?OBJ3 SelfConnectedObject)
				      (overlapsSpatially ?OBJ2 ?OBJ3))))))

;; Holes are self-connected; i.e., there are no scattered holes.

(=> 
	(instance ?HOLE Hole)
      (instance ?HOLE SelfConnectedObject))

;; Holes are connected with their hosts.

(=> 
	(hole ?HOLE ?OBJ)
      (connected ?HOLE ?OBJ))

;; Every hole has some self-connected host.

(=> 
	(instance ?HOLE Hole)
      (exists (?OBJ)
       	(and 
			(hole ?HOLE ?OBJ)
                  (instance ?OBJ SelfConnectedObject))))

;; No hole can have a proper part that is externally connected 
;; with exactly the same things as the hole itself.

(=> 
	(and 
		(instance ?HOLE1 Hole)
            (properPart ?HOLE2 ?HOLE1))
      (exists (?OBJ)
            (and 
			(meetsSpatially ?HOLE1 ?OBJ)
                  (not 
				(meetsSpatially ?HOLE2 ?OBJ)))))

(instance fills SpatialRelation)
(instance fills AsymmetricRelation)
(domain fills 1 Object)
(domain fills 2 Hole)
(relatedInternalConcept fills Fillable)
(documentation fills "Holes can be filled.  (&%fills ?OBJ ?HOLE) 
means that the &%Object ?OBJ fills the &%Hole ?HOLE.  Note that 
&%fills here means perfectly filled.")
 
(instance Fillable ShapeProperty)
(documentation Fillable "Something is &%Fillable if it can be filled by 
something else.  Note that 'filled' here means perfectly filled.")

(=>
     (holdsDuring ?TIME
          (fills ?OBJ ?HOLE))
     (attribute ?HOLE Fillable))

;; Something is fillable just in case it is part of a hole; i.e., 
;; fillability is an exclusive property of holes and their parts.

(<=> 
	(attribute ?HOLE1 Fillable)
       	(exists (?HOLE2)
        	(and 
			(instance ?HOLE2 Hole)
                  (part ?HOLE1 ?HOLE2))))

(subrelation completelyFills fills)
(documentation completelyFills "(&%completelyFills ?OBJ ?HOLE) 
means that the &%Hole ?HOLE &%fills some &%part of the &%Object 
?OBJ.  Note that if (&%completelyFills ?OBJ1 ?HOLE) and (&%part 
?OBJ1 ?OBJ2), then (&%completelyFills ?OBJ2 ?HOLE).")

(=> 
	(completelyFills ?OBJ1 ?HOLE)
	(exists (?OBJ2)
		(and 
			(part ?OBJ2 ?OBJ1)
			(fills ?OBJ2 ?HOLE))))

(instance partiallyFills SpatialRelation)
(instance partiallyFills AsymmetricRelation)
(domain partiallyFills 1 Object)
(domain partiallyFills 2 Hole)
(documentation partiallyFills "(&%partiallyFills ?OBJ ?HOLE) means that 
there is an &%Object ?OBJ that &%completelyFills some part of ?HOLE. Note 
that if (&%partiallyFills ?OBJ1 ?HOLE) and (&%part ?OBJ1 ?OBJ2), then 
(&%partiallyFills ?OBJ2 ?HOLE). Note too that a partial filler need not 
be wholly inside a hole (it may stick out), which means that every complete 
filler also qualifies as (is a limit case of) a partial one.")

(=> 
	(partiallyFills ?OBJ ?HOLE1)
	(exists (?HOLE2)
		(and 
			(part ?HOLE2 ?HOLE1)
			(completelyFills ?OBJ ?HOLE2))))

(instance properlyFills SpatialRelation)
(instance properlyFills AsymmetricRelation)
(domain properlyFills 1 Object)
(domain properlyFills 2 Hole)
(documentation properlyFills "(&%properlyFills ?OBJ ?HOLE) 
means that ?HOLE is properly (though perhaps incompletely) filled by 
?OBJ, i.e. some part of ?HOLE is perfectly filled by ?OBJ.  Note that 
&%properlyFills is the dual of &%completelyFills, and is so 
related to &%partiallyFills that ?OBJ &%properlyFills ?HOLE just in 
case ?OBJ &%partiallyFills every part of ?HOLE.  (Thus, every perfect 
filler is both complete and proper in this sense).")

(=> 
	(properlyFills ?OBJ ?HOLE1)
	(exists (?HOLE2)
		(and 
			(part ?HOLE2 ?HOLE1)
			(fills ?OBJ ?HOLE2))))

;; Perfect fillers and fillable entities have no parts in common (rather, 
;; they may occupy the same spatial region).

(=> 
	(and 
		(fills ?OBJ1 ?HOLE)
           	(attribute ?OBJ2 Fillable))
      (not 
		(overlapsSpatially ?OBJ1 ?OBJ2)))

;; A complete filler of (a part of) a hole is connected with everything 
;; with which (that part of) the hole itself is connected.

(=> 
   (completelyFills ?OBJ1 ?HOLE)
      (forall (?OBJ2)
   	   (=> 
	      (connected ?OBJ2 ?HOLE)
            (connected ?OBJ2 ?OBJ1))))

;; Every hole is connected with everything with which a proper filler 
;; of the hole is connected. 

(=> 
	(and 
		(properlyFills ?OBJ1 ?HOLE)
          	(connected ?OBJ2 ?OBJ1))
     	(connected ?HOLE ?OBJ2))

;; A perfect filler of (a part of) a hole completely fills every proper 
;; part of (that part of) that hole.

(=> 
	(and 
		(fills ?OBJ ?HOLE1)
            (properPart ?HOLE2 ?HOLE1))
     	(completelyFills ?OBJ ?HOLE2))

;; Every proper part of a perfect filler of (a part of) a hole properly 
;; fills (that part of) that hole.

(=> 
	(and 
		(fills ?OBJ1 ?HOLE)
            (properPart ?OBJ2 ?OBJ1))
     	(properlyFills ?OBJ2 ?HOLE))

(instance SkinFn SpatialRelation)
(instance SkinFn UnaryFunction)
(domain SkinFn 1 Hole)
(range SkinFn Object)
(documentation SkinFn "A &%UnaryFunction that maps a &%Hole to the skin 
of the &%Hole.  The skin of a &%Hole is the fusion of those superficial 
parts (see &%superficialPart) of the &%Hole's principal host (see 
&%PrincipalHostFn) with which the &%Hole is externally connected.")

(=>
     (equal ?OBJ1 (SkinFn ?HOLE))
     (forall (?OBJ2)
		(<=> 
			(overlapsSpatially ?OBJ2 ?OBJ1)
			(exists (?OBJ3)
				(and 
				      (superficialPart ?OBJ3 (PrincipalHostFn ?HOLE))
				      (meetsSpatially ?HOLE ?OBJ3)
				      (overlapsSpatially ?OBJ2 ?OBJ3))))))

;; END FILE

;; BEGIN FILE


;;;;;;;;;;;;;;;;;;;;;
;;    POSITIONS    ;;
;;;;;;;;;;;;;;;;;;;;;


;; This section aligns the content in the Positions ontology of 
;; ITBM-CNR.  This content is, for the most part, a set of instances 
;; of &%SpatialRelation.  

(instance position SpatialRelation)
(instance position BinaryPredicate)
(domain position 1 Object)
(domain position 2 Object)
(documentation position "(position ?OBJ1 ?OBJ2) means that ?OBJ1 is 
positioned with respect to ?OBJ2 in some way.  This is a very general 
predicate whose main function is to serve as an umbrella for specific 
&%Predicates.")

(instance orientation SpatialRelation)
(instance orientation TernaryPredicate)
(domain orientation 1 Object)
(domain orientation 2 Object)
(domain orientation 3 DirectionAttribute)
(documentation orientation "A general &%Predicate for indicating how two 
&%Objects are oriented with respect to one another.  For example, 
(orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and 
(orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned 
vertically with respect to ?OBJ2.")

(subrelation above position)
(instance above AsymmetricRelation)
(instance above TransitiveRelation)
(inverse above below)
(documentation above "This is a cognitive primitive, derived from the 
up/down schema and not involving contact.  (&%above ?OBJ1 ?OBJ2) means 
that ?OBJ1 is above ?OBJ2.")

(=>
   (above ?OBJ1 ?OBJ2)
   (not
      (connected ?OBJ1 ?OBJ2)))

(subrelation adjacent position)
(instance adjacent EquivalenceRelation)
(documentation adjacent "(&%adjacent ?OBJ1 ?OBJ2) means that ?OBJ1 is 
close to, near or abutting ?OBJ2 with no other structure of the same 
kind intervening.  This &%Predicate covers the following relations:  
adjoins, abuts, is contiguous to, is juxtaposed, and is close to.") 

(=>
   (adjacent ?OBJ1 ?OBJ2)
   (or
      (near ?OBJ1 ?OBJ2)
      (connected ?OBJ1 ?OBJ2)))

(subrelation along position)
(instance along EquivalenceRelation)
(relatedInternalConcept along traverses)
(documentation along "(along ?OBJ1 ?OBJ2) means that the &%Object ?OBJ1 
shares the area of ?OBJ2 at least as far the extension of one dimension 
is concerned.")

(=>
   (along ?OBJ1 ?OBJ2)
   (near ?OBJ1 ?OBJ2))

(=>
   (and
      (along ?OBJ1 ?OBJ2)
      (along ?OBJ3 ?OBJ2))
   (connects ?OBJ2 ?OBJ1 ?OBJ3))

(subrelation behind position)
(instance behind AsymmetricRelation)
(instance behind TransitiveRelation)
(documentation behind "This is a cognitive primitive, derived from the 
front/back schema.  (&%behind ?OBJ1 ?OBJ2) means that ?OBJ1 is behind 
?OBJ2.")

(subrelation below position)
(instance below AsymmetricRelation)
(instance below TransitiveRelation)
(documentation below "This is a cognitive primitive, derived from the 
up/down schema and not involving contact.  (&%below ?OBJ1 ?OBJ2) means 
that ?OBJ1 is below ?OBJ2.")

(=>
   (below ?OBJ1 ?OBJ2)
   (not
      (connected ?OBJ1 ?OBJ2)))

(instance between SpatialRelation)
(instance between TernaryPredicate)
(domain between 1 Object)
(domain between 2 Object)
(domain between 3 Object)
(documentation between "(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is 
spatially located between ?OBJ1 and ?OBJ3.")

(=>
  (between ?OBJ1 ?OBJ2 ?OBJ3)
  (and
    (left ?OBJ2 ?OBJ1)
    (left ?OBJ1 ?OBJ3)))

(subrelation contains position)
(subrelation contains connected)
(instance contains AsymmetricRelation)
(instance contains TransitiveRelation)
(documentation contains "Limits, bounds, confines, encloses or circumscribes 
- the surrounding relation for &%Objects.  (&%contains ?OBJ1 ?OBJ2) means 
that the interior of ?OBJ1 wholly surrounds ?OBJ2.")

(=>
   (contains ?OBJ1 ?OBJ2)
   (forall (?PART2)
      (=>
         (part ?PART2 ?OBJ2)
         (exists (?PART1)
            (and
               (interiorPart ?PART1 ?OBJ1)
               (exactlyLocated ?PART2 ?PART1))))))

(subrelation crosses traverses)
(instance crosses AsymmetricRelation)
(instance crosses TransitiveRelation)
(documentation crosses "(crosses ?OBJ1 ?OBJ2) means that 
&%Object ?OBJ1 &%traverses Object ?OBJ2, without being &%connected 
to it.")

(=>
   (crosses ?OBJ1 ?OBJ2) 
   (not
      (connected ?OBJ1 ?OBJ2)))

(subrelation penetrates traverses)
(subrelation penetrates connected)
(instance penetrates AsymmetricRelation)
(instance penetrates IntransitiveRelation)
(documentation penetrates "(penetrates ?OBJ1 ?OBJ2) means that 
?OBJ1 is &%connected to ?OBJ2 along at least one whole dimension (length, 
width or depth).") 

(subrelation front position)
(instance front AsymmetricRelation)
(instance front TransitiveRelation)
(inverse front behind)
(documentation front "This is a cognitive primitive, derived from 
the front/back schema.  (&%front ?OBJ1 ?OBJ2) means that ?OBJ1 is 
in &%front of ?OBJ2.")

(subrelation left position)
(instance left AsymmetricRelation)
(instance left TransitiveRelation)
(documentation left "This is a cognitive primitive, derived from the 
left/right schema.  (&%left ?OBJ1 ?OBJ2) means that ?OBJ1 is to the 
&%left ?OBJ2.")

(subrelation near position)
(instance near EquivalenceRelation)
(documentation near "The relation of common sense adjacency without 
contact.  (&%near ?OBJ1 ?OBJ2) means that ?OBJ1 is &%near ?OBJ2.")

(subrelation on position)
(subrelation on connected)
(instance on AsymmetricRelation)
(instance on IntransitiveRelation)
(documentation on "This is a cognitive primitive, derived from the up/down 
schema and involving contact.  (&%on ?OBJ1 ?OBJ2) means that ?OBJ1 is on 
top of ?OBJ2.")

(subrelation right position)
(instance right AsymmetricRelation)
(instance right TransitiveRelation)
(inverse right left)
(documentation right "This is a cognitive primitive, derived from the 
left/right schema.  (&%right ?OBJ1 ?OBJ2) means that ?OBJ1 is to the 
&%right ?OBJ2.")

(subrelation traverses position)
(documentation traverses "(&%traverses ?OBJ1 ?OBJ2) means that ?OBJ1 
crosses or extends across ?OBJ2.  Note that &%crosses and 
&%penetrates are subrelations of &%traverses.")

(=>
   (traverses ?OBJ1 ?OBJ2)
   (or
      (crosses ?OBJ1 ?OBJ2)
      (penetrates ?OBJ1 ?OBJ2)))

(subrelation under position)
(instance under AsymmetricRelation)
(instance under TransitiveRelation)
(documentation under "This is a cognitive primitive, derived from the 
up/down schema.  (&%under ?OBJ1 ?OBJ2) means that ?OBJ1 is &%under 
?OBJ2.")

(=>
  (under ?OBJ1 ?OBJ2)
  (or
    (on ?OBJ2 ?OBJ1)
    (above ?OBJ2 ?OBJ1)))

;; END FILE


;;;;;;;;;;;;;
;;  NOTES  ;;
;;;;;;;;;;;;;





