;; This file is a perliminary merge of the SUO ontology sources.  The basis for 
;; the merge is John Sowa's upper ontology (as described at 
;; http://www.bestweb.net/~sowa/ontology/toplevel.htm and in Chapter 2 of his 
;; book _Knowledge Representation_, Brooks/Cole, 2000).  The definitions and 
;; axioms of the other SUO sources have been aligned with this ontology.  In 
;; addition to Sowa's ontology, the merge incorporates Russell and Norvig's 
;; ontology, Casati and Varzi's theory of holes, Allen's temporal axioms, the 
;; relatively noncontroversial elements of Smith's and Guarino's respective 
;; mereotopologies, the KIF formalization of the CPR (Core Plan Representation), 
;; the ontologies available on the Ontolingua server maintained by Stanford 
;; University's Knowledge Systems Laboratory, and the ontologies developed by 
;; ITBM-CNR. 

;; This ontology uses a first-order modal language, i.e., a first-order language 
;; with the sentence operators "nec" (for "necessarily") and "poss" (for 
;; "possibly").  The ontology contains both primitive and defined constants.  
;; Among the primitive predicates are several (e.g., "exists-at") that are 
;; borrowed from other ontologies -- moreover, those predicates may be *defined* 
;; in those ontologies.  Eventually, of course, it will be important to have 
;; mechanisms for making such connections explicitly (via, e.g., something like 
;; Ontolingua packages).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                            ;;
;;                STRUCTURAL ONTOLOGY                         ;;
;;                                                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The Structural Ontology consists of definitions of certain syntactic 
;; abbreviations that can be both heuristically useful and computationally 
;; advantageous.

(instance-of instance-of BinaryRelation)
(nth-domain instance-of 1 Entity)
(nth-domain instance-of 2 Class)
(documentation instance-Of "An object is an instance-of a class if 
it is a member of the set denoted by that class.  Instance-of is 
useful for defining the second-order relations and classes that are 
about class/instance networks.
  An individual may be an instance of many classes, some of which may 
be subclasses of others.  Thus, there is no assumption in the meaning
of instance-of about specificity or uniqueness.  See 
'direct-instance-of'.")

(instance-of subclass-of TransitiveRelation)
(nth-domain subclass-of 1 Class)
(nth-domain subclass-of 2 Class)
(documentation subclass-of "Class C is a subclass of parent class P if and 
only if every instance of C is also an instance of P.  A class may 
have multiple superclasses and subclasses. Subclass-of is transitive: 
if (subclass-of C1 C2) and (subclass-of C2 C3) then (subclass-of C1 C3).")

(=> 
   (subclass-of ?subclass ?class)
   (forall (?x)
      (=> 
         (instance-of ?x ?subclass)
         (instance-of ?x ?class))))

(instance-of subrelation-of BinaryRelation)
(nth-domain subrelation-of 1 Predicate)
(nth-domain subrelation-of 2 Predicate)
(documentation subrelation-of "A relation R is a subrelation-of 
relation R' if, viewed as sets, R is a subset of R'.  In other words, 
every tuple of R is also a tuple of R'.  In some more words, if R 
holds for some arguments arg_1, arg_2, ... arg_n, then R' holds for 
the same arguments.  Thus, a relation and its subrelation must have the 
same arity, which could be undefined. In CycL, 'subrelation-of' is 
called #$genls."

(instance-of nth-domain TernaryRelation)
(nth-domain nth-domain 1 Predicate)
(nth-domain nth-domain 2 PositiveInteger)
(nth-domain nth-domain 3 Class)
(documentation nth-domain "Provides a computationally and heuristically
convenient mechanism for declaring the intended types of the argument places 
of a given relation.  The formula (nth-domain rel 3 type-class) says that 
the 3rd element of each tuple in the relation REL is an instance of type-class.  
Specifying the types of argument places is very helpful in maintaining ontologies.  
Representation systems can use these specifications to classify terms and check 
integrity constraints.  If the restriction on the range of the relation is not 
captured by a named class, one can specify the constraint with a predicate 
that defines the class implicitly, coerced into a class.  For example,
  (kappa (?x) (and (prime ?x) (< ?x 100)) 
denotes the class of prime numbers under 100.
It is important to note that'nth-domain' cannot be considered a
genuine predicate in a standard first-order language as it takes
first-order predicates as arguments.  Furthermore, it also takes
numerals as arguments, which are not part of first-order languages
generally.  However, it can be understood formally as an 
abbreviation as follows.
   Let REL be any n-place predicate, and let M be the numeral for the
positive integer m, where m is less than or equal to n.  Then we
let
  (nth-domain REL M CLASS)

serve as an abbreviation for

  (forall (VAR_1 ... VAR_n)
          (=> (REL VAR_1 ... VAR_n)
              (instance-of VAR_m CLASS)))

More generally, let M_1, ..., M_i be the numerals for positive
integers m_1, ..., m_i, ordered by size, all less than or equal to
n.  Then, in general, we let

  (nth-domain REL M_1 CLASS_1 ... M_i CLASS_i) 

abbreviate 
 
  (forall (VAR_1 ... VAR_n)
          (=> (REL VAR_1 ... VAR_n)
              (and (instance-of VAR_m_1 CLASS_1)
                   ...
                   (instance-of VAR_m_i CLASS_i))))    ")

(instance-of nth-domain-subclass TernaryRelation)
(nth-domain nth-domain-subclass 1 Predicate)
(nth-domain nth-domain-subclass 2 PositiveInteger)
(nth-domain nth-domain-subclass 3 Class)
(documentation nth-domain-subclass "Predicate used to specify selectional restrictions
of predicates.  The formula (nth-domain-subclass rel 3 type-class) says that the 3rd 
element of each tuple in the relation REL is a subclass of type-class.")

(instance-of range BinaryRelation)
(nth-domain range 1 Function)
(nth-domain range 2 Class)
(documentation range "range is short for 'range restriction.'  Specifying 
a range restriction of a function is a way to constrain the class of objects 
which participate as the result of the function.  Range restrictions are 
very helpful in maintaining ontologies.  One can think of a range restriction 
as a type constraint on the value of a function.  Representation systems can 
use these specifications to classify terms and check integrity constraints.  
If the restriction on the range of the relation is not captured by a named 
class, one can use specify the constraint with a predicate that defines the 
class implicitly, coerced into a class.  For example,
  (KappaFn ?x (and (instance-of ?x PrimeNumber) (lessThan ?x 100))) 
denotes the class of prime numbers under 100.")
  
(instance-of range-subclass BinaryRelation)
(nth-domain range-subclass 1 Function)
(nth-domain range-subclass 2 Class)
(documentation range-subclass "(range-subclass function class) means that 
the value returned by function is a subclass of class.")

(instance-of valence BinaryRelation)
(nth-domain valence 1 Relation)
(nth-domain valence 2 PositiveInteger)
(documentation valence "Specifies the number of arguments that a 
relation can take.  If a relation can take an arbitrary number of 
arguments, it does not have a valence and it is an instance of 
'VariableArityRelation' or 'VariableArityFunction'.  For example, 
'holds' is a VariableArityRelation.  The arity of a function is one 
more than the number of arguments it can take, in keeping with the 
unified treatment of functions and relations.  The arity of the empty 
relation (i.e., the one with no tuples) is undefined.")

(instance-of documentation BinaryRelation)
(nth-domain documentation 1 Entity)
(nth-domain documentation 2 String)
(documentation documentation "A relation between objects in the domain 
of discourse and strings of natural language text.  The domain of 
'documentation' is not constants (names), but the objects themselves.  
This means that one does not quote the names when associating them with 
their documentation.")

(instance-of disjoint BinaryRelation)
(nth-domain disjoint 1 SetOrClass)
(nth-domain disjoint 2 SetOrClass)
(documentation disjoint "Classes/Sets X and Y are disjoint iff they share no 
instances.")

(<=> 
	(disjoint ?class1 ?class2)
      	(forall (?X)
		(not
			(and 
				(instance-of ?X ?class1)
                        (instance-of ?X ?class2)))))

(instance-of exhaustiveDecomposition BinaryRelation)
(nth-domain exhaustiveDecomposition 1 Class)
(nth-domain exhaustiveDecomposition 2 Set)
(documentation exhaustiveDecomposition "An exhaustive decomposition of a 
class C is a set of subclasses of C such that every subclass of C either 
is a member of the set or is a subclass of a member of the set.  Note: 
this does not necessarily mean that the elements of the set are disjoint 
(see partition - a partition is a disjoint exhaustive decomposition.")

(instance-of disjointDecomposition BinaryRelation)
(nth-domain disjointDecomposition 1 Class)
(nth-domain disjointDecomposition 2 Set)
(documentation Disjoint-Decomposition "A disjoint-decomposition of a class 
C is a set of subclasses of C that are mutually disjoint.  (Used to be called 
Subclass-Partition).")

(subrelation-of partition exhaustiveDecomposition)
(subrelation-of partition disjointDecomposition)
(documentation Partition "A partition of a class C is a set of 
mutually-disjoint classes (a subclass partition) which covers C.  
Every instance of C is is an instance of exactly one of the subclasses 
in the partition.  (Used to be called Exhaustive-Subclass-Partition)")

(instance-of singleValued BinaryRelation)
(nth-domain singleValued 1 Predicate)
(nth-domain singleValued 2 Integer)
(documentation singleValued "(singleValued <PREDICATE> <INTEGER>) means 
that the argument position of <PREDICATE> corresponding to <INTEGER> is 
single-valued, i.e. an assignment of values to the other argument 
positions determines a unique value for the argument position corresponding 
to <INTEGER>.") 

(instance-of all-instances BinaryRelation)
(nth-domain all-instances 1 Class)
(nth-domain all-instances 2 Set)
(documentation all-instances "The instances of some classes may be 
specified extensionally.  That is, one can list all of the instances 
of the class by definition.  For this case we say (= (all-instances C) 
(setof V_1 V_2 ...  V_n)), where C is a class and the V_i are its 
instances.
  The predicate 'all-instances' imposes a monotonic constraint. Any 
subclass of C cannot have any instances outside of the set related to C 
by the 'all-instances' predicate.  Note that this is not indexical or 
modal: whether something is in all-instances is a property of the modeled 
world and does not depend on the facts currently stored in some knowledge 
base."

(instance-of KappaFn BinaryFunction)
(nth-domain KappaFn 1 Variable)
(nth-domain KappaFn 2 Formula)
(range KappaFn Class)
(documentation KappaFn "A class-forming operator that takes two arguments:  
a variable and a formula containing at least one unbound occurrence of the 
variable.  The result of applying KappaFn to a variable and a formula is the 
class of things that satisfy the formula.  For example, 
   (KappaFn ?x (and (instance-of ?x PrimeNumber) (lessThan ?x 100))) 
denotes the class of prime numbers under 100.")

(instance-of SetFn BinaryFunction)
(nth-domain SetFn 1 Variable)
(nth-domain SetFn 2 Formula)
(range SetFn Set)
(documentation SetFn "A set-forming operator that takes two arguments:  
a variable and a formula containing at least one unbound occurrence of the 
variable.  The result of applying SetFn to a variable and a formula is the 
set of things that satisfy the formula.  For example, we could define the 
set of primary colors using SetFn, as follows:  
   (SetFn ?X (or  (instance-of ?X Red) 
                  (instance-of ?X Green)
                  (instance-of ?X Blue))))).")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                   ;;
;;                         ONTOLOGY PROPER                           ;;
;;                                                                   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;
;;   GENERAL CLASSES   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; The following axioms (down to the next comment) represent a simplified 
;; version of the tip of Sowa's upper ontology.  Concepts in the ontology that 
;; were deemed to be of purely philosophical interest are not included here.

(subclass-of Individual Entity)
(documentation Individual "An Individual is something that isn't a set, 
but that can be a member of a set.  All classes of things that are not 
sets are subclasses of Individual.")
(subclass-of Relation Entity)
(subclass-of Physical Entity)
(subclass-of Abstract Entity)
(subclass-of ContinuantType Entity)
(subclass-of OccurrentType Entity)

(subclass-of Object Physical)
(instance-of Object ContinuantType)
(subclass-of ContentBearingObject Abstract)
(subclass-of ContentBearingObject Object)
(subclass-of Process Physical)
(instance-of Process OccurrentType)
(subclass-of SchemaObject ContentBearingObject)
(instance-of SchemaObject ContinuantType)
(subclass-of ScriptObject ContentBearingObject)
(instance-of ScriptObject OccurrentType)
(subclass-of Structure Abstract)
(instance-of Structure ContinuantType)
(subclass-of Situation Abstract)
(instance-of Situation OccurrentType)

;; The following (modified) axioms from Sowa were added to facilitate the 
;; merging of the SUO sources.

(subclass-of ContinuousProcess Process)
(subclass-of DiscreteProcess Process)
(subclass-of Act DiscreteProcess)
(subclass-of Sign ContentBearingObject)
(subclass-of Procedure ScriptObject)
(subclass-of ContinuousObject Object)
(subclass-of CorpuscularObject Object)
(subclass-of HomogeneousObject ContinuousObject)
(subclass-of VariableObject ContinuousObject)
(subclass-of OrganicObject CorpuscularObject)
(subclass-of Assembly CorpuscularObject)

;; The following formulas place 'ChemicalElement', 'Quantity', 'Number', 'Set', 
;; and 'Class' itself in the class hierarchy.  These concepts are needed to hook 
;; several of the Ontolingua ontologies into the upper ontology.

(subclass-of ChemicalElement HomogeneousObject)
(subclass-of TemporalObject HomogeneousObject)
(subclass-of Quantity Abstract)
(subclass-of Measure Quantity)
(subclass-of Unit-Of-Measure Measure)
(subclass-of Number Quantity)
(subclass-of SetOrClass Abstract)
(subclass-of Set SetOrClass)
(documentation Set "A set is a collection of objects, both individuals and sets of
various sorts.  It is a KIF primitive.")
(subclass-of FiniteSet Set)
(subclass-of Class SetOrClass)
(documentation Class "A class can be thought of as a collection of 
individuals.  Formally, a class is a unary relation, a set of tuples 
(lists) of length one.  Each tuple contains an object which is said 
to be an instance of the class.  An individual, or object, is any 
identifiable entity in the universe of discourse (anything that can be 
denoted by a object constant in KIF), including classes themselves.
  The notion of 'Class' is introduced in addition to the relation
vocabulary because of the importance of classes and types in knowledge
representation practice.  Classes serve the role of `sorts' and `types', 
but here is no first-order distinction between classes and unary
relations.  
  The fact that an object i is an instance of class C is denoted by
the sentence (C i) (instance-of i C).  This is not equivalent to 
(member i C).  An instance of a class is not a set-ontologetic
member of the class; rather, the tuple containing the instance is a
element of the set of tuples which is a relation.
  The definition of a class is a predicate over a single free
variable, such that the predicate holds for instances of the class.
In other words, classes are defined _intensionally_.  Two
separately-defined classes may have the same extension (in this case
they are = to each other).  It is possible to define a class by
enumerating its instances.  For example, 
(<=>
   (instance-of ?color Primary-Color)
   (member ?color (SetFn ?X (or  (instance-of ?X Red) 
                                 (instance-of ?X Green)
                                 (instance-of ?X Blue))))).")

(subclass-of Proposition Abstract)

;; The following axioms and definitions are taken from Russell & Norvig and from 
;; CPR.  They have been reformulated in such a way that their content is aligned 
;; with Sowa's upper ontology.

(subclass-of Sentence Sign)
(subclass-of Sentence Structure)
(subclass-of Solid Structure)
(subclass-of Liquid Structure)
(subclass-of Gas Structure)
(subclass-of TextObject Sign)
(subclass-of TextObject Structure)

(instance-of containsInformation BinaryRelation)
(nth-domain containsInformation 1 TextObject)
(nth-domain containsInformation 2 Proposition)

(instance-of constraintOfProcedure BinaryRelation)
(nth-domain constraintOfProcedure 1 Procedure)
(nth-domain constraintOfProcedure 2 Requirement)

(instance-of hasAnnotation BinaryRelation)
(nth-domain hasAnnotation 1 Object)
(nth-domain hasAnnotation 2 TextObject)

(instance-of implementsProcedure BinaryRelation)
(nth-domain implementsProcedure 1 Process)
(nth-domain implementsProcedure 2 Procedure)

(instance-of hasPurpose BinaryRelation)
(nth-domain hasPurpose 1 Process)
(nth-domain hasPurpose 2 Abstract)

(instance-of subProcedure BinaryRelation)
(nth-domain subProcedure 1 Procedure)
(nth-domain subProcedure 2 Procedure)

(instance-of subPurpose BinaryRelation)
(nth-domain subPurpose 1 Abstract)
(nth-domain subPurpose 2 Abstract)

(instance-of subProcess BinaryRelation)
(nth-domain subProcess 1 Process)
(nth-domain subProcess 2 Process)

(instance-of standardFor BinaryRelation)
(nth-domain standardFor 1 Standard)
(nth-domain standardFor 2 Object)

(subclass-of Standard Abstract)
(subclass-of Requirement Standard)
(subrelation-of consumableResource matter)

;; The following definitions of 'AbstractionFn' and 'ExtensionFn', which, 
;; respectively, convert classes into their corresponding attributes and vice 
;; versa, are suggested by some of Robert E. Kent's work.

(instance-of AbstractionFn UnaryFunction)
(nth-domain AbstractionFn 1 Class)
(range AbstractionFn Abstract)

(instance-of ExtensionFn UnaryFunction)
(nth-domain ExtensionFn 1 Abstract)
(range ExtensionFn Class)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   DOCUMENTATION OF GENERAL CLASSES   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(documentation Abstract "Properties or qualities as distinguished from any 
particular embodiment of the properties/qualities in a physical medium.  
Instances of Abstract can be said to exist in the same sense as mathematical 
objects such as sets and relations, but they cannot exist at a particular 
place and time without some physical encoding or embodiment.")

(documentation Assembly "A CorpuscularObject whose discrete parts are completely 
separable. Whether something is considered an unstructured collection or a 
structured assembly depends on some agent's intention.  A car in working order 
is a highly structured assembly.  But if the parts were disassembled and spread 
out on some surface, it would be called a collection.  Yet if the parts were 
arranged to spell the word 'CAR', they would again form an assembly, although 
not one that could be used for transportation. Conversely, if a car were towed 
to the junk yard, the junk dealer might consider it a collection, even though 
the parts were in the same order they had been in while it was running.")

(documentation CaseRole "The class of predicates relating the spatially 
distinguished parts of an occurrent. Case roles include the agent, patient or 
recipient of an action, the flammable substance in a burning process, or the 
water that falls in rain.")

(documentation ComponentRelation "An umbrella class for any binary relation that 
relates an Object to an aspect of that object.  The three elements of 
ComponentRelation are part-of, property-of, and stage-of.")

(documentation ContinuantType " Intuitively, an object-like thing as 
opposed to an event-like thing; something that endures rather than 
something that happens. A continuant is thought of as continuing 
through time, but at any particular time is all there is at that time, 
in contrast to something that is thought of as being divided into 
stages (contrast "OccurrentType"). Examples include normal physical 
objects, geographical regions, things like corporations or nations, 
and locations of occurrents. The formal definition is that all the 
parts of a continuant are present at the same time that the 
continuant is; in other words, a continuant cannot have 'parts' which 
are separated in time, such as the first and second halves of a 
football game.  Note that the parts of a continuant may change from time 
to time, and that every continuant occupies exactly the same space and 
time as an occurrent (its lifetime).  In a 4-d ontology, a continuant is 
something whose spatiotemporal extent is thought of as dividing into 
spatial parts roughly parallel to the time-axis.  See 
Occurrent/Continuant-contrast-note.  This documentation is due to Pat 
Hayes.")

(documentation ContinuousObject "An entity that is indefinitely divisible to the 
limits of perception by the available sense organs or measuring instruments.")

(documentation ContinuousProcess "A process in which incremental changes take 
place continuously.  This is the normal kind of physical process.")

(documentation CorpuscularObject "An Object that has separable parts.")

(documentation DiscreteProcess "In a discrete process, which is typical of 
computer programs or idealized approximations to physical processes, changes 
occur in discrete steps called events, which are interleaved with periods of 
inactivity called states.")

(documentation Entity "The universal class of individuals.  This is the root 
node of the ontology.")

(documentation HomogeneousObject "A ContinuousObject in which every part is 
similar to every other in every relevant respect, e.g., temperature, chemical 
constitution, density, etc.  An example would be a beaker of pure distilled 
water in a controlled environment.")

(documentation Individual "An entity that can be characterized independently of 
any relationships it may have to other entities.")

(documentation Object "A Physical Continuant which retains its identity over 
some interval of time. Although no physical entity is ever permanent, an object 
can have stable properties over its lifespan. The type Object corresponds roughtly
to the class of ordinary physical objects.")

(documentation OccurrentType "Intuitively, an event-like thing as opposed 
to an object-type thing; something that happens rather than something 
that endures. An occurrent is thought of as having temporal parts or 
stages, and so it cannot have all these parts together at one time 
(contrast "ContinuantType"). Examples include extended 'events' such as a 
football match or a race, processes of various kinds, states of 
motion and lifetimes of continuants, which occupy the same space 
and time but are thought of as having stages instead of parts. The 
formal definition is: anything that lasts for a time but is not a 
continuant.  Note that an occurrent may have participants 'inside' it which 
are continuants, such as the players in a football match.
In a 4-d ontology, a continuant is something whose spatiotemporal 
extent is thought of as dividing into temporal stages roughly 
perpendicular to the time-axis.  See 
Occurrent/Continuant-contrast-note.  This documentation is due to Pat Hayes.")

(documentation OrganicObject "A CorpuscularObject such as a tree or flower that 
has parts that are not completely separable, even though there are 
discontinuities.")

(documentation Physical "An entity that has a location in space-time.  Note that 
points of space and time are themselves understood to have a location in space-time")

(documentation Procedure "A sequence-dependent specification of actions and events.  
Some examples are computer programs, finite-state machines, cooking recipes, musical 
scores, conference schedules, driving directions, and the scripts of actions and 
dialog in plays and movies.")

(documentation Process "A Physical Occurrent during the interval of interest. 
Depending on the time scale and level of detail, the same actual entity may be 
viewed as a stable object or a dynamic process. Even an entity as stable as a 
diamond could be considered a process when viewed over a long time period or at 
the atomic level of vibrating particles.")

(documentation Proposition "A subclass of Assembly. In logic, the assertion of a 
proposition is a claim that the abstraction corresponds to some aspect or 
configuration of the entity or entities involved. As an example, the statement 
cat(Yojo) expresses a proposition that Cat characterizes the entity named 
Yojo.")

(documentation Relation "An entity in a relationship to some other entity.")

(documentation SchemaObject "An object that embodies an Abstract form that has 
the structure of a Continuant and, thus, does not specify time or timelike 
relationships. Examples include geometric forms, the syntactic structures of 
sentences in some language, or the encodings of pictures in a multimedia system.")

(documentation ScriptObject "An object that embodies an Abstract form that has the 
structure of an Occurrent and, thus, represents time sequences. Examples include 
computer programs, a recipe for baking a cake, a sheet of music to be played on 
a piano, or a differential equation that governs the evolution of a physical process. 
A movie can be described by several different kinds of scripts: the first is a 
specification of the actions and dialog to be acted out by humans; but the 
sequence of frames in a reel of film is also a script that determines a process 
carried out by a projector that generates flickering images on a screen.")

(documentation Sign "A Sign is something that is intended by one agent to represent 
something to another agent or agents.  Note that this definition excludes natural 
phenomena and their interpretation, e.g. a cloud formation that resembles a physical 
object.") 

(documentation Situation "An Abstract entity considered as an Occurrent. A 
situation relates the participants in some process, whose stages may involve 
different participants at different times.")

(documentation Structure "An Abstract entity considered as a Continuant. A 
structure relates multiple objects whose connections constitute the structure.")

(documentation VariableObject "A ContinuousObject whose physical properties may 
nonetheless vary.  That is, the temperature, chemical constitution, density, etc. 
may change from one part to another.  An example of a VariableObject would be a 
large body of water such as the ocean.")


;;;;;;;;;;;;;;;;;;;;;;;;;
;;     SET THEORY      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following part of the ontology covers set-theoretic predicates and 
;; functions.  Most of the content here is taken from the kif-sets ontology 
;; (available on the Ontolingua server).

(instance-of subset BinaryRelation)
(nth-domain subset 1 Set)
(nth-domain subset 2 Set)
(documentation subset "The formula (subset ?SET1 ?SET2) is true if
and only if ?SET1 and ?SET2 are sets and the objects in the set
denoted by ?SET1 are contained in the set denoted by ?SET2.")

(instance-of member BinaryRelation)
(nth-domain member 1 Entity)
(nth-domain member 2 Set)
(documentation member "The formula (member ?ENTITY ?SET) is true if and only if 
the object denoted by ?ENTITY is contained in the set denoted by ?SET."  An 
object can be a member of another object only if the latter is a set.")

(=>
   (forall (?X)
         (<=>
            (member ?X ?S1)
            (member ?Y ?S2)))
   (equal ?S1 ?S2))

(instance-of UnionFn BinaryFunction)
(nth-domain UnionFn 1 Set)
(nth-domain UnionFn 2 Set)
(range UnionFn Set)
(documentation UnionFn "A function whose arguments are two sets and whose result 
is the set-theoretic union of these sets, i.e. the set of all elements which are 
members of either the first or second set.")

(equal
   (UnionFn ?S1 ?S2)
   (SetFn ?X
      (or
         (member ?X ?S1)
         (member ?X ?S2))))

(instance-of IntersectionFn BinaryFunction)
(nth-domain IntersectionFn 1 Set)
(nth-domain IntersectionFn 2 Set)
(range IntersectionFn Set)
(documentation IntersectionFn "A function whose arguments are two sets and whose 
result is the set-theoretic intersection of these sets, i.e. the set of all 
elements which are members of both the first and the second sets.")

(equal
   (IntersectionFn ?S1 ?S2)
   (SetFn ?X
      (and
         (member ?X ?S1)
         (member ?X ?S2))))

(instance-of DifferenceFn BinaryFunction)
(nth-domain DifferenceFn 1 Set)
(nth-domain DifferenceFn 2 Set)
(range DifferenceFn Set)
(documentation DifferenceFn "A function whose arguments are two sets and whose 
result is the set-theoretic difference of these sets, i.e. the set of all 
elements which are members the first set and not of the second set.")

(equal
   (DifferenceFn ?S1 ?S2)
   (SetFn ?X
      (and
         (member ?X ?S1)
         (not
	      (member ?X ?S2)))))

(instance-of ComplementFn UnaryFunction)
(nth-domain ComplementFn 1 Set)
(range ComplementFn Set)
(documentation ComplementFn "The complement of a given set S is the set of all 
elements that are not members of S.")

(equal
   (ComplementFn ?S)
   (SetFn ?X
      (not (member ?X ?S))))

(instance-of GeneralizedUnionFn UnaryFunction)
(nth-domain-subclass GeneralizedUnionFn 1 Set)
(range GeneralizedUnionFn Set)
(documentation GeneralizedUnionFn "This function takes a set of sets as its single 
argument and returns a set which is the merge of all of the sets in the original 
set, i.e. the set containing just those elements which are members of an element 
of the original set.")

(equal 
   (GeneralizedUnionFn ?S)
   (SetFn ?X
      (exists (?Y)
         (and
            (member ?Y ?S)
            (member ?X ?Y)))))

(instance-of GeneralizedIntersectionFn UnaryFunction)
(nth-domain-subclass GeneralizedIntersectionFn 1 Set)
(range GeneralizedIntersectionFn Set)
(documentation GeneralizedIntersectionFn "This function takes a set of sets as 
its single argument and returns a set which contains just those elements which 
are members of all of the elements of the original set.")

(equal 
   (GeneralizedIntersectionFn ?S)
   (SetFn ?X
      (forall (?Y)
         (=>
            (member ?Y ?S)
            (member ?X ?Y)))))

(instance-of EmptySet Set)
(documentation EmptySet "The set that contains no members.")


(<=>
   (equal ?X EmptySet)
   (not
      (exists (?Y)
         (member ?Y ?X))))

(subclass-of PairwiseDisjointSet Set)
(documentation PairwiseDisjointSet "A set of sets is PairwiseDisjoint just in case 
every element of the set is either equal to or disjoint from every other element 
of the set.")

(=>
   (instance-of ?X PairwiseDisjointSet)
   (forall (?Y ?Z)
      (=>
         (and
            (member ?Y ?X)
            (member ?Z ?X))
         (or
            (equal ?Y ?Z)
            (disjoint ?Y ?Z)))))

(subclass-of MutuallyDisjointSet Set)
(documentation MutuallyDisjointSet "A set of sets is a MutuallyDisjointSet 
just in case there exists no element of an element of the original set which 
is an element of all of the elements of the original set.")

(=>
   (instance-of ?S MutuallyDisjoint)
   (equal
      (GeneralizedIntersectionFn ?S)
      EmptySet)))

(instance-of holds VariableArityRelation)
(nth-domain holds 1 Predicate)
(documentation holds "(holds P N1 ... NK) is true if and only if 
the ordered set of objects denoted by N1,..., NK is a member of 
the predicate P.")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     RELATION TYPES      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following part of the ontology covers the various classes under 
;; 'Relation'.  Most of the content here is taken from frame-ontology, 
;; abstract-algebra, kif-relations, and kif-extensions (ontologies available 
;; on the Ontolingua server).

(subclass-of Predicate Relation)
(documentation Predicate "A predicate is a set of tuples that represents 
a relationship among objects in the universe of discourse.  Each tuple 
is a finite, ordered sequence (i.e., list) of objects.  A relation is 
also an object itself, namely, the set of tuples.  
   Predicates are denoted by relation constants in KIF.  A fact that a 
particular tuple is a member of a predicate is denoted
by (<relation-name> arg_1 arg_2 .. arg_n), where the arg_i are the 
objects in the tuple.  In the case of binary relations, the fact can
be read as `arg_1 is <relation-name> arg_2' or `a <relation-name> of
arg_1 is arg_2.'  The relation constant is a term as well, which
denotes the set of tuples.")

(subclass-of Function Relation)
(documentation Function "A function is a mapping from a domain to a range 
that associates a domain element with exactly one range element.  The 
elements of the domain are tuples, as in relations.  The range is a class 
-- a set of singleton tuples -- and each element of the range is an 
instance of the class.  Functions are also first-class objects in the same 
sense that relations are objects: namely, functions can be viewed as sets of
tuples.")

(subclass-of UnaryFunction Function)
(subclass-of BinaryFunction Function)
(subclass-of TernaryFunction Function)
(subclass-of VariableArityFunction Function)
(subclass-of ComponentRelation Predicate)
(subclass-of BinaryRelation Predicate)
(documentation BinaryRelation "A binary relation is a non-empty relation 
in which all lists have exactly two items.  A binary relation maps 
instances of a class to instances of another class.  Its valence is 2.  
Binary relations are often shown as slots in frame systems.")

(subclass-of TernaryRelation Predicate)
(subclass-of VariableArityRelation Predicate)
(subclass-of CaseRole BinaryRelation)
(subclass-of IntentionalRelation BinaryRelation)
(subclass-of PropositionalAttitude IntentionalRelation)
(subclass-of ObjectAttitude IntentionalRelation)

(instance-of AssignmentFn VariableArityFunction)
(nth-domain AssignmentFn 1 Function)
(range AssignmentFn Entity)
(documentation AssignmentFn "If F denotes a function with a value 
for the objects denoted by N1,..., NK, then the term 
(AssignmentFn F N1 ... NK) denotes the value of applying that function 
to the objects denoted by N1,..., NK.  Otherwise, the value is undefined.")

(instance-of binary-operator-on BinaryRelation)
(nth-domain binary-operator-on 1 BinaryFunction)
(range binary-operator-on Class)
(documentation Binary-Operator-On "A function is a binary operator 
on a domain if it is closed on the domain, that is, it is defined 
for all pairs of objects that are instances of the domain and its 
value on all such pairs is an instance of the domain.")

(=>
   (binary-operator-on ?function ?domain)
   (forall ?x ?y)
      (=> 
         (and 
            (instance-of ?x ?domain) 
            (instance-of ?y ?domain))
         (instance-of (AssignmentFn ?function ?x ?y) ?domain))))

(subclass-of AssociativeFunction BinaryFunction)

(=>
   (instance-of ?OP AssociativeFunction)
   (forall (?X ?Y ?Z)
      (equal (AssignmentFn ?OP ?X (AssignmentFn ?OP ?Y ?Z))
             (AssignmentFn ?OP (AssignmentFn ?OP ?X ?Y) ?Z))))

(subclass-of CommutativeFunction BinaryFunction)

(=>
   (instance-of ?OP CommutativeFunction)
   (forall (?X ?Y)
      (equal (AssignmentFn ?OP ?X ?Y) 
             (AssignmentFn ?OP ?Y ?X))))

(instance-of distributes BinaryRelation)
(nth-domain distributes 1 BinaryFunction)
(nth-domain distributes 2 BinaryFunction)

(=>
   (distributes ?OP ?G)
   (forall (?X ?Y ?Z)
      (equal (AssignmentFn ?OP (AssignmentFn ?G ?X ?Y) ?Z)
             (AssignmentFn ?G (AssignmentFn ?OP ?X ?Z) (AssignmentFn ?OP ?Y ?Z)))))

(instance-of identity-element BinaryRelation)
(nth-domain identity-element 1 BinaryFunction)
(nth-domain identity-element 2 Entity)
(documentation identity-element "An object ?id is the identity element 
for binary operator ?o iff for every instance ?x of ?d, applying ?o
to ?x and ?id results in ?x.")

(=>
   (identity-element ?OP ?ID)
   (forall (?X)
      (equal (AssignmentFn ?OP ?ID ?X) ?X)))

(subclass-of ReflexiveRelation BinaryRelation)
(documentation ReflexiveRelation "Relation R is reflexive if R(x,x) 
for all x in the domain of R.")

(=>
   (instance-of ?R ReflexiveRelation)
   (forall (?X)
      (holds ?R ?X ?X)))

(subclass-of IrreflexiveRelation BinaryRelation)
(documentation Irreflexive-Relation "Relation R is irreflexive if 
R(a,a) never holds.")

(=>
   (instance-of ?R IrreflexiveRelation)
   (forall (?X)
      (not 
         (holds ?R ?X ?X))))

(subclass-of SymmetricRelation BinaryRelation)
(documentation SymmetricRelation "Relation R is symmetric if R(x,y) 
implies R(y,x).")

(=>
   (instance-of ?R SymmetricRelation)
   (forall (?X ?Y)
      (=>
         (holds ?R ?X ?Y)
         (holds ?R ?Y ?X))))

(subclass-of AsymmetricRelation IrreflexiveRelation)
(subclass-of AsymmetricRelation AntisymmetricRelation)
(documentation AsymmetricRelation "A binary relation is asymmetric if it 
is antisymmetric and irreflexive over its exact-domain.")

(=>
   (instance-of ?R AsymmetricRelation)
   (forall (?X ?Y)
      (=>
         (holds ?R ?X ?Y)
         (not
            (holds ?R ?Y ?X)))))

(subclass-of AntisymmetricRelation BinaryRelation)
(documentation AntisymmetricRelation "Relation R is an 
AntisymmetricRelation if for distinct x and y, R(x,y) implies 
not R(y,x).  In other words, for all x,y, R(x,y) and R(y,x) => x=y.  
R(x,x) is still possible.")

(=>
   (instance-of ?R AntisymmetricRelation)
   (forall (?X ?Y)
      (=>
         (and
            (holds ?R ?X ?Y)
            (holds ?R ?Y ?X))
         (equal ?X ?Y))))

(subclass-of TrichotomizingRelation BinaryRelation)

(=>
   (instance-of ?R TrichotomizingRelation)
   (forall (?X ?Y)
      (or
         (holds ?R ?X ?Y) 
         (equal ?X ?Y) 
         (holds ?R ?Y ?X))))

(subclass-of TransitiveRelation BinaryRelation)
(documentation TransitiveRelation "Relation R is transitive 
if R(x,y) and R(y,z) implies R(x,z).")

(=>
   (instance-of ?R TransitiveRelation)
   (forall (?X ?Y ?Z)
      (=>
         (and
            (holds ?R ?X ?Y)
            (holds ?R ?Y ?Z))
         (holds ?R ?X ?Z))))

(subclass-of PartialOrderingRelation TransitiveRelation)
(subclass-of PartialOrderingRelation AsymmetricRelation)
(subclass-of PartialOrderingRelation ReflexiveRelation)
(documentation PartialOrderingRelation "A relation is a partial ordering 
if it is reflexive, asymmetric, and transitive.")

(subclass-of TotalOrderingRelation PartialOrderingRelation)
(documentation TotalOrderingRelation  "A relation R is a 
TotalOrderingRelation if it is a PartialOrderingRelation 
for which either R(x,y) or R(y,x) for every x or y in its 
exact-domain.")

(=>
   (instance-of ?R TotalOrderingRelation)
   (forall (?X ?Y)
      (or
         (holds ?R ?X ?Y)
         (holds ?R ?Y ?X))))

(subclass-of LinearOrderingRelation PartialOrderingRelation)
(subclass-of LinearOrderingRelation TrichotomizingRelation)

(subclass-of EquivalenceRelation TransitiveRelation)
(subclass-of EquivalenceRelation SymmetricRelation)
(subclass-of EquivalenceRelation ReflexiveRelation)
(documentation EquivalenceRelation "A relation is an equivalence 
relation if it is reflexive, symmetric, and transitive.")

(instance-of inverse SymmetricRelation)
(nth-domain inverse 1 BinaryRelation)
(nth-domain inverse 2 BinaryRelation)
(documentation inverse "The inverse of a binary relation is a binary 
relation with all tuples reversed.  In other words, one binary relation 
is the inverse of another if they are equivalent when their arguments 
are swapped.")


(=>
   (inverse ?R ?P)
   (forall (?X ?Y)
      (<=>
         (holds ?P ?X ?Y)
         (holds ?R ?Y ?X))))

(instance-of cardinality BinaryRelation)
(nth-domain cardinality 1 Set)
(nth-domain cardinality 2 NonnegativeInteger)
(documentation cardinality "(cardinality ?SET ?NUMBER) means that 
there are ?NUMBER elements of ?SET.")  

(instance-of IdentityFn UnaryFunction)
(nth-domain IdentityFn 1 Entity)
(range IdentityFn Entity)
(documentation IdentityFn "The value of the identity function is 
just its argument.")

(equal (IdentityFn ?X) ?X)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   DEFINITIONS OF BASIC BINARY RELATIONS     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(instance-of agent CaseRole)
(nth-domain agent 1 Process)
(nth-domain agent 2 Agent)
(documentation agent "(agent ?ACTION ?AGENT) means that the active animate 
entity ?AGENT voluntarily initiates ?ACTION.  Example: Eve bit an apple.")

(subrelation-of attribute-of property-of)
(nth-domain attribute-of 1 Object)
(nth-domain attribute-of 2 Abstract)
(documentation attribute-of "(attribute-of ?OBJECT ?PROPERTY) means that 
?PROPERTY is a property of ?OBJECT. Properties include things like colors, 
shapes, sizes, and weights.")

(instance-of beneficiary CaseRole)
(nth-domain beneficiary 1 Process)
(nth-domain beneficiary 2 Agent)
(documentation beneficiary "(beneficiary ?EVENT ?RECIPIENT) means that 
?RECIPIENT derives a benefit from the successful completion of ?EVENT.  Example: 
Diamonds were given to Ruby.")

(instance-of completion CaseRole)
(nth-domain completion 1 Process)
(nth-domain completion 2 Entity)
(documentation completion "(completion ?EVENT ?GOAL) means that ?GOAL is the 
goal of the temporal process ?EVENT.  Example: Mary waited until noon. ")

(subrelation-of component-of part-of)
(documentation component-of "(component-of ?COMPONENT ?WHOLE) means that 
?COMPONENT is a piece of ?WHOLE. Examples of pieces include the doors and walls 
of a house, the states or provinces of a country, or the limbs and organs of an 
animal.")

(instance-of destination CaseRole)
(nth-domain destination 1 Process)
(nth-domain destination 2 Entity)
(documentation destination "(destination ?EVENT ?GOAL) means that ?GOAL is the 
goal of the spatial process ?EVENT.  Example: Bob went to Danbury.")

(instance-of duration CaseRole)
(nth-domain duration 1 Process)
(nth-domain duration TimeMeasure-Duration)
(documentation duration "(duration ?EVENT ?TIME) means that the TimeMeasure 
?Time is a resource of the temporal process ?EVENT.  Example: The truck was 
serviced for 5 hours.")

(instance-of effector-of CaseRole)
(nth-domain effector-of 1 Process)
(nth-domain effector-of 2 Object)
(documentation effector-of "(effector-of ?ACTION ?ENTITY) means that ?ENTITY is 
an active determinant source, either animate or inanimate, that initiates 
?ACTION, but without voluntary intention.  Example: The tree produced new 
leaves.")

(instance-of exists-at BinaryRelation)
(nth-domain exists-at 1 Physical)
(nth-domain exists-at 2 TimePoint)
(documentation exists-at "exists-at is defined in the PSL temporal ontology, 
which axiomatizes 'timepoint'.  This relation holds between an entity and a 
timepoint just in case the temporal lifespan of the former includes the latter.  
The constants located-at and exists-at are spatial and temporal predicates, 
respectively.")

(instance-of experiencer CaseRole)
(nth-domain experiencer 1 Process)
(nth-domain experiencer 2 Agent)
(documentation experiencer "(experiencer ?EVENT ?ENTITY) means that ?ENTITY is 
an active animate goal of the experience ?EVENT.  Example: Yojo sees the fish.")

(instance-of instrument CaseRole)
(nth-domain instrument 1 Process)
(nth-domain instrument 2 Object)
(documentation instrument "(instrument ?EVENT ?RESOURCE) means that ?RESOURCE is 
a resource that is not changed by ?EVENT.  Example: The key opened the door.")

(instance-of located-at BinaryRelation)
(nth-domain located-at 1 Physical)
(nth-domain located-at 2 Physical)
(documentation located-at "A very general predicate.  (located-at ?X ?Y) means 
that ?X is situated at ?Y, in some sense.  Example: Vehicles arrive at a 
station.  The constants located-at and exists-at are spatial and temporal 
predicates, respectively.")

(subrelation-of manner-of property-of)
(nth-domain manner-of 1 Process)
(nth-domain manner-of 2 Abstract)
(documentation manner-of "(manner-of ?PROCESS ?MANNER) means that the occurrent 
?PROCESS is qualified by the manner ?MANNER.  Manners are usually described by 
adverbs and include things like the speed of the wind, the style of a dance, or 
the intensity of a sports competition.")

(instance-of matter CaseRole)
(nth-domain matter 1 Process)
(nth-domain matter 2 Object)
(documentation matter "(matter ?EVENT ?RESOURCE) means that the resource 
?RESOURCE is changed by the event ?EVENT.  Example: The gun was carved out of 
soap.")

(instance-of medium CaseRole)
(nth-domain medium 1 Process)
(nth-domain medium 2 Process)
(documentation medium "(medium ?EVENT ?RESOURCE) means that ?RESOURCE is a 
physical resource for the information transfer event ?EVENT.  Two examples of 
such resources are the sound of speech and the electromagnetic signals that 
transmit data.  Example: Bill told Boris by phone.")

(instance-of origin CaseRole)
(nth-domain origin 1 Process)
(nth-domain origin 2 Physical)
(documentation origin "(origin ?EVENT ?SOURCE) means that ?SOURCE is a passive 
determinant source of the spatial or ambient nexus represented by ?EVENT.  
Example: The chapter begins on page 20.")

(instance-of part-of ComponentRelation)
(nth-domain part-of 1 CorpuscularObject)
(nth-domain part-of 2 CorpuscularObject)
(documentation part-of "The primitive mereological relation.  All other 
mereological relations are defined in terms of this.  (part-of ?PART ?WHOLE) 
implies that the existence of  ?PART is independent of the existence of 
?WHOLE.")

(instance-of path CaseRole)
(nth-domain path 1 Process)
(nth-domain path 2 Object)
(documentation path "(path ?EVENT ?RESOURCE) means that ?RESOURCE is a resource 
of the spatial nexus ?EVENT.  Example: The pizza was shipped via Albany and 
Buffalo.")

(instance-of patient CaseRole)
(nth-domain patient 1 Process)
(nth-domain patient 2 Object)
(documentation patient "(patient ?EVENT ?ENTITY) means that ?ENTITY is an 
essential participant that undergoes some structural change as a result of 
?EVENT.  Example: The cat swallowed the canary.")

(instance-of property-of ComponentRelation)
(nth-domain property-of 1 Physical)
(nth-domain property-of 2 Abstract)
(documentation property-of "The class ComponentRelation has two elements, viz. 
part-of and property-of.  The latter relation holds between an object and 
something which cannot exist without some substrate.  Two subpredicates of 
property-of are attribute-of and manner-of.")

(instance-of recipient CaseRole)
(nth-domain recipient 1 Process)
(nth-domain recipient 2 Agent)
(documentation recipient "(recipient ?ACTION ?ENTITY) means that ?ENTITY is an 
animate goal of ?ACTION.  Example: Sue sent the gift to Bob.")

(instance-of result CaseRole)
(nth-domain result 1 Process)
(nth-domain result 2 Object)
(documentation result "(result ?ACTION ?GOAL) means that ?GOAL is an inanimate 
goal of ?ACTION.  Example: Eric built a house.")

(instance-of source-of CaseRole)
(nth-domain source-of 1 Process)
(nth-domain source-of 2 Object) 
(documentation source-of "(source-of ?EVENT ?ENTITY) implies that ?ENTITY is 
present at the beginning of the process, but need not participate throughout the 
process.")

(instance-of stage-of ComponentRelation)
(nth-domain stage-of 1 Process)
(nth-domain stage-of 2 Process)
(documentation stage-of "The temporally distinguished parts of an occurrent are 
called stages. In the life of a human being, for example, the stages would 
include infancy, childhood, adolescence, and adulthood. Other possibly 
overlapping stages would include education, motherhood, business career, and 
retirement.")

(instance-of theme CaseRole)
(nth-domain theme 1 Process)
(nth-domain theme 2 Object)
(documentation theme "(theme ?EVENT ?ENTITY) means that ?ENTITY is an essential 
participant that may be moved, said, or experienced, but is not structurally 
changed.  Example: Billy likes the Beer.")


;;;;;;;;;;;;;;;;;;;;
;; GENERAL AXIOMS ;;
;;;;;;;;;;;;;;;;;;;;


;; Most of these axioms relate to constants comprising the tip of Sowa's upper 
;; ontology.

;; Everything is an entity (due to Robert E. Kent).

(forall (?X) (instance-of ?X Entity))

;; There are entities.  (In standard FOPC, this axiom is redundant, since it is 
;; implied by the one above.  However, it is included here in case a "free 
;; logic" or similar, nonstandard interpretation of the ontology is adopted).

(exists (?X) (instance-of ?X Entity))

;; Several variations of the same essential axiom have been proposed.  These 
;; variations include "Everything is either a class or an entity" (John Sowa) 
;; and "Everything is either an individual or a class" (Robert E. Kent).  This 
;; axiom has not been included here, because it seems very controversial.  Where 
;; are sets to be located, for example?


(=> 
	(instance-of ?x Entity)
      	(not 
			(and
				(instance-of ?x Class)
				(instance-of ?x Set))))

;; Only entities are instances of classes, and only classes have instances  
;; (This is due to both John Sowa and Robert E. Kent).

(=> 
	(instance-of ?instance ?class)
      	(and 
		(instance-of ?instance Entity)
              	(instance-of ?class Class)))

;; Every class is a subclass of Entity.

(=> 
	(instance-of ?c Class)
       	(subclass-of ?c Entity))

;; Abstract is a class.

(instance-of Abstract Class)

;; Something is Abstract just in case it has neither a spatial nor temporal 
;; location.

(<=> 
	(instance-of ?x Abstract)
      	(not 
			(exists (?y) 
                               (or 
						(located-at ?x ?y)
                                   	(exists-at ?x ?y)))))
                               
;; Something is Physical just in case it exists at some location at some time.

(<=> 
	(instance-of ?x Physical)
	(exists (?y)
     		(and 
			(located-at ?x ?y)
                  (exists-at ?x ?z))))

;; Abstract and Physical are disjoint. 

(disjoint Abstract Physical)

;; A continuant is an object that exists (and, hence, retains its identity) over 
;; time, i.e., an object that exists at every point over some interval of time.

(=> 
      (instance-of ?y ContinuantType)
	(instance-of ?x ?y)
      	(exists (?t1 ?t2)
        	(and 
			(instance-of ?t1 TimePoint) 
                	(instance-of ?t2 TimePoint) 
                      	(before ?t1 ?t2)
                       	(forall (?t)
                      		(=> 
					(and 
						(beforeEq ?t1 ?t) 
                                    (beforeEq ?t ?t2))
                              (exists-at ?x ?t))))))

;; Continuant and Occurrent are disjoint.

(disjoint ContinuantType OccurrentType)

;; Each temporal part of an occurrent exists at some timepoint.

;; ISSUE: Can stages (i.e., temporal parts of occurrents) exist at
;; more than one timepoint; in particular, can they they exist across
;; intervals of time?

(=> 
	(and 
            (instance-of ?y OccurrentType)
		(instance-of ?occ ?y) 
            (stage-of ?x ?occ))
     	(exists (?t)
      		(exists-at ?x ?t)))
        
;; Occurrents have temporal parts.

(=> 
      (and
           (instance-of ?y OccurrentType)
	     (instance-of ?occ ?y))
      (exists (?x)
        	(stage-of ?x ?occ)))
  
;; Occurrents have spatial parts.

(=> 
      (and
           (instance-of ?y OccurrentType)
	     (instance-of ?occ ?y))
      (exists (?x)
        	(spatial-part-of ?x ?occ)))

;; Individual and Relation are disjoint.

(disjoint Individual Relation)

;; part-of and stage-of cannot be satisfied by the same ordered pair.

(<=>
	(part-of ?X ?Y)
	(not
		(stage-of ?X ?Y)))

;; attribute-of and manner-of cannot be satisfied by the same ordered pair.

(<=>
	(attribute-of ?X ?Y)
	(not
		(manner-of ?X ?Y)))

;; The following axiom is from CPR.

(=>
     (subProcess ?Act1 ?Act2)
     (during ?Act1 ?Act2))


;;;;;;;;;;;;;;;;;;;;;;;;;
;;   AGENT HIERARCHY   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following ground facts incorporate the 'Agent' hierarchy from the 
;; corresponding ontology on the Ontolingua server.  It also includes predicates
;; defined in the ITBM-CNR ontology "Actors".

(subclass-of Agent Object)
(subclass-of Person Agent)
(subclass-of Organization Agent)
(subclass-of Publisher Organization)
(subclass-of University Organization)
(disjoint Person Organization)

(documentation Agent "An agent is something or someone that can act on its
own and produce changes in the world.")

(documentation Organization "An organization is a corporate or similar 
institution, distinguished from persons and other agents.")

(documentation University "A university is an institute of higher learning that 
offers a graduate research program.  Of importance here is the fact that
universities sponsor the publication of dissertations.  Any organization
that has been accredited to grant graduate degrees and is recognized
in libraries to be a publisher of dissertations can be called a
university.  Some places that call themselves colleges fall under this
category.")

(documentation Publisher "A publisher is an organization that publishes.  
The owner of a publishing company may be a person, 
and the name of the publisher may be the name of a person.")

;; Axiom defining the class 'Agent' in terms of the case role 'agent'

(<=>
	(instance-of ?X Agent)
	(exists (?Y)
		(agent ?Y ?X)))

;; The following definitions and axioms were extracted from the ITBM-CNR 
;; ontology "Actors".  They cover case roles and pseudo-case-roles, where 
;; the latter are understood as binary relations that allow us to compose
;; two case roles and suppress the event argument.

;; Definition of 'authors'

(instance-of authors BinaryRelation)
(nth-domain authors 1 TextObject)
(nth-domain authors 2 Agent)

(=>
     (authors ?X ?Y)
     (exists (?Z)
          (and
               (agent ?Z ?Y)
               (result ?Z ?X))))

;; Definition of 'exploits' 

(instance-of exploits BinaryRelation)
(nth-domain exploits 1 Object)
(nth-domain exploits 2 Agent)

(=>
     (exploits ?X ?Y)
     (exists (?Z)
          (and
               (agent ?Z ?Y)
               (matter ?Z ?X)))) 

;; Definition of 'method'

(instance-of method CaseRole)
(nth-domain method 1 Process)
(nth-domain method 2 Procedure)
(documentation method "The manner and sequence of events in performing an
act or procedure. The domain must be some abstract object, usually a text, which
specifies a set of instructions.")

;; Definition of 'uses'

(instance-of uses BinaryRelation)
(nth-domain uses 1 Object)
(nth-domain uses 2 Agent)

(=>
     (uses ?X ?Y)
     (exists (?Z)
          (and
               (agent ?Z ?Y)
               (instrument ?Z ?X))))
     


;;;;;;;;;;;;;;;;;;;;;;;;;
;;  NUMBER HIERARCHY   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following ground facts incorporate the Number hierarchy from the ontology 
;; 'kif-numbers' on the Ontolingua server.

(subclass-of RealNumber Number)
(subclass-of ImaginaryNumber Number)
(subclass-of RationalNumber RealNumber)
(subclass-of PositiveRealNumber RealNumber)
(subclass-of NegativeRealNumber RealNumber)
(subclass-of NonnegativeRealNumber RealNumber)
(subclass-of Integer RationalNumber)
(subclass-of EvenInteger Integer)
(subclass-of OddInteger Integer)
(subclass-of PrimeNumber Integer)
(subclass-of NonnegativeInteger Integer)
(subclass-of NonnegativeInteger NonnegativeRealNumber)
(documentation NonnegativeInteger "An integer greater than or equal to zero.")
(subclass-of NegativeInteger Integer)
(subclass-of NegativeInteger NegativeRealNumber)
(subclass-of PositiveInteger Integer)
(subclass-of PositiveInteger PositiveRealNumber)
(documentation PositiveInteger "An integer greater than zero, not including 
zero.  A less ambiguous name for KIF's NATURAL.")
(subclass-of BinaryNumber Number)
(subclass-of PositiveNumber Number)
(subclass-of NegativeNumber Number)
(subclass-of ComplexNumber Number)

(=>
   (instance-of ?X PositiveRealNumber)
   (greaterThan ?X 0))

(=>
   (instance-of ?X NegativeRealNumber)
   (lessThan ?X 0))

(=>
   (instance-of ?X NonnegativeRealNumber)
   (or
      (greaterThan ?X 0)
      (equal ?X 0)))

(=>
   (instance-of ?X EvenInteger)
   (exists (?Y)
      (and
         (instance-of ?Y Integer)
         (equal (DivisionFn ?X 2) ?Y))))

(=>
   (instance-of ?X OddInteger)
   (not 
      (exists (?Y)
         (and
            (instance-of ?Y Integer)
            (equal (DivisionFn ?X 2) ?Y)))))

(instance-of logBit BinaryRelation)
(nth-domain logBit 1 BinaryNumber) 
(nth-domain logBit 2 Integer) 
(documentation logBit "The formula (logbit ?X ?Y) is true if bit ?Y of ?X is 
1.")

(instance-of logTest BinaryRelation)
(nth-domain logTest 1 Integer)
(nth-domain logTest 2 Integer)
(documentation logTest "The formula (logtest ?X ?Y) is true if the logical and 
of the two's-complement representation of the integers ?X and ?Y is not zero.")

(instance-of MultiplicationFn VariableArityFunction)
(range MultiplicationFn RealNumber)
(documentation MultiplicationFn "If ?X, ?Y, ..., ?N denote numbers, then the 
term (MultiplicationFn ?X ?Y ... ?N) denotes the product of those numbers.")

(instance-of AdditionFn VariableArityFunction)
(range AdditionFn RealNumber)
(documentation AdditionFn "If ?X, ?Y, ..., ?N are numerical constants, then the 
term (AdditionFn ?X ?Y ... ?N) denotes the sum of the numbers corresponding to those 
constants.")
 
(instance-of SubtractionFn VariableArityFunction)
(range SubtractionFn RealNumber)
(documentation SubtractionFn "If ?X, ?Y, ..., ?N denote numbers, then the term 
(SubtractionFn ?X ?Y ... ?N) denotes the difference between the number denoted 
by ?X and the numbers denoted by ?Y through ?N.  An exception occurs when ?Y ... 
?N = 0, in which case the term denotes the negation of the number denoted by 
?X.")

(instance-of DivisionFn VariableArityFunction)
(range DivisionFn RealNumber)
(documentation DivisionFn "If ?X, ?Y, ..., ?N are numbers, then the term
(DivisionFn ?X ?Y ... ?N) denotes the result obtained by dividing the 
number denoted by ?X by the numbers denoted by ?Y through ?N.  An exception 
occurs when ?Y ... ?N = 1, in which case the term denotes the reciprocal 
?X of the number denoted by ?Y ... ?N.")

(instance-of AbsoluteValueFn UnaryFunction)
(nth-domain AbsoluteValueFn 1 RealNumber)
(range AbsoluteValueFn PositiveNumber)
(documentation AbsoluteValueFn "The term (AbsoluteValueFn ?X) denotes the 
absolute value of the object denoted by ?X.")

(instance-of ArcCosineFn UnaryFunction)
(nth-domain ArcCosineFn 1 RealNumber)
(range ArcCosine RealNumber)
(documentation ArcCosineFn "If ?X denotes a number, then the term (ArcCosineFn 
?X) denotes the arc cosine of that number (in radians).")

(instance-of ArithmeticalShiftFn BinaryFunction)
(nth-domain ArithmeticalShiftFn 1 RealNumber)
(nth-domain ArithmeticalShiftFn 2 PositiveInteger)
(range ArithmeticalShiftFn RealNumber)
(documentation ArithmeticalShiftFn "The term (ArithmeticalShiftFn ?X ?Y) denotes 
the result of arithmetically shifting the object denoted by ?X by the number of 
bits denoted by ?Y (left or right shifting depending on the sign of ?Y).")

(instance-of ArcSineFn UnaryFunction)
(nth-domain ArcSineFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range ArcSineFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation ArcSineFn "The term (ArcSineFn ?X) denotes the arc sine of the 
object denoted by ?X (in radians).")

(instance-of HyperbolicArcSineFn UnaryFunction)
(nth-domain HyperbolicArcSineFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range HyperbolicArcSineFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation HyperbolicArcSine "The term (HyperbolicArcSine ?X) denotes the 
hyperbolic arc sine of the object denoted by ?X (in radians).")

(instance-of ArcTangentFn UnaryFunction)
(nth-domain ArcTangentFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range ArcTangentFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation ArcTangentFn "The term (ArcTangentFn ?X) denotes the arc tangent 
of the object denoted by ?X (in radians).")

(instance-of HyperbolicArcTangentFn UnaryFunction)
(nth-domain HyperbolicArcTangentFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range HyperbolicArcTangentFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation HyperbolicArcTangentFn "The term (HyperbolicArcTangent ?X) 
denotes the hyperbolic arc tangent of the object denoted by ?X (in radians).")

(instance-of CeilingFn UnaryFunction)
(nth-domain CeilingFn 1 RealNumber)
(range CeilingFn Integer)
(documentation CeilingFn "If ?X denotes a real number, then the term (CeilingFn 
?X) denotes the smallest integer greater than or equal to the number denoted by 
?X.")

(instance-of CosineFn UnaryFunction)
(nth-domain CosineFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range CosineFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation CosineFn "The term (CosineFn ?X) denotes the cosine of the object
denoted by ?X (in radians).")

(instance-of HyperbolicCosineFn UnaryFunction)
(nth-domain HyperbolicCosineFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range HyperbolicCosineFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation HyperbolicCosineFn "The term (HyperbolicCosineFn ?X) denotes the 
hyperbolic cosine of the object denoted by ?X (in radians).")

(instance-of DenominatorFn UnaryFunction)
(nth-domain DenominatorFn 1 RealNumber)
(range DenominatorFn Integer)
(documentation DenominatorFn "The term (DenominatorFn ?X) denotes the 
denominator of the canonical reduced form of the object denoted by ?X.")

(instance-of ExponentiationFn BinaryFunction)
(nth-domain ExponentiationFn 1 RealNumber)
(nth-domain ExponentiationFn 2 Integer)
(range ExponentiationFn RealNumber)
(documentation ExponentiationFn "The term (Exponentiation ?X ?Y) denotes ?X 
raised to the power of the object denoted by ?Y.")

(instance-of FloatingCeilingFn UnaryFunction)
(nth-domain FloatingCeilingFn 1 RealNumber)
(range FloatingCeilingFn Integer)
(documentation FloatingCeilingFn "The term (FloatingCeilingFn ?X) denotes the 
smallest integer (as a floating point number) greater than the object denoted by 
?X.")

(instance-of FloatingFloorFn UnaryFunction)
(nth-domain FloatingFloorFn 1 RealNumber)
(range FloatingFloorFn Integer)
(documentation FloatingFloorFn "The term (FloatingFloorFn ?X) denotes the 
largest integer (as a floating point number) less than the object denoted by 
?X.")

(instance-of FloatingPointNumberFn UnaryFunction)
(nth-domain FloatingPointNumberFn 1 RealNumber)
(range FloatingPointNumberFn RealNumber)
(documentation FloatingPointNumberFn "The term (FloatingPointNumberFn ?X) 
denotes the floating point number equal to the object denoted by ?X.")

(instance-of FloatingDigitFn UnaryFunction)
(nth-domain FloatingDigitFn 1 RealNumber)
(range FloatingDigitFn NonnegativeInteger) 
(documentation FloatingDigitFn "The term (FloatingDigitFn ?X) denotes the number 
of digits used in the representation of a floating point number denoted by ?X.")

(instance-of FloatingPrecisionFn UnaryFunction)
(nth-domain FloatingPrecisionFn 1 RealNumber)
(range FloatingPrecisionFn NonnegativeInteger) 
(documentation FloatingPrecisionFn "The term (FloatingPrecisionFn ?X) denotes 
the number of significant digits in the floating point number denoted by ?X.")

(instance-of FloatingRadixFn UnaryFunction)
(nth-domain FloatingRadixFn 1 RealNumber)
(range FloatingRadixFn NaturalNumber)
(documentation FloatingRadixFn "The term (FloatingRadixFn ?X) denotes the radix 
of the floating point number denoted by ?X. The most common values are 2
and 16.")

(instance-of FloatingSignFn BinaryFunction)
(nth-domain FloatingSignFn 1 RealNumber)
(nth-domain FloatingSignFn 2 RealNumber)
(range FloatingSignFn RealNumber)
(documentation FloatingSignFn "The term (FloatingSignFn ?X ?Y) denotes a 
floating-point number with the same sign as the object denoted by ?X and
the same absolute value as the object denoted by ?Y.")

(instance-of FloorFn UnaryFunction)
(nth-domain FloorFn 1 RealNumber)
(range FloorFn Integer)
(documentation FloorFn "The term (FloorFn ?X) denotes the largest integer less
than the object denoted by ?X.")

(instance-of FloatingTruncateFn UnaryFunction)
(nth-domain FloatingTruncateFn 1 RealNumber)
(range FloatingTruncateFn Integer)
(documentation FloatingTruncateFn "The term (FloatingTruncateFn ?X) denotes 
the largest integer (as a floating point number) less than the object 
denoted by ?X.")

(instance-of GreatestCommonDivisorFn VariableArityFunction)
(range GreatestCommonDivisorFn Integer)
(documentation GreatestCommonDivisorFn "The term (GreatestCommonDivisorFn ?X ?Y 
... ?N) denotes the greatest common divisor of the objects denoted by ?X through 
?N.")

(instance-of ImaginaryPartFn UnaryFunction)
(nth-domain ImaginaryPartFn 1 ComplexNumber)
(range ImaginaryPartFn ImaginaryNumber)
(documentation ImaginaryPartFn "The term (ImaginaryPartFn ?X) denotes the 
imaginary part of the object denoted by ?X.")

(instance-of IntegerDecodeFloatFn UnaryFunction)
(nth-domain IntegerDecodeFloatFn 1 RealNumber)
(range IntegerDecodeFloatFn Integer)
(documentation IntegerDecodeFloatFn "The term (IntegerDecodeFloatFn ?X) denotes 
the significand of the object denoted by ?X.")

(instance-of IntegerLengthFn UnaryFunction)
(nth-domain IntegerLengthFn 1 RealNumber) 
(range IntegerLengthFn NonnegativeInteger)
(documentation IntegerLengthFn "The term (IntegerLengthFn ?X) denotes the 
number of bits required to store the absolute magnitude of the object denoted 
by ?X.")

(instance-of IntegerSquareRootFn UnaryFunction)
(nth-domain IntegerSquareRootFn 1 RealNumber)
(range IntegerSquareRootFn NonnegativeInteger)
(documentation IntegerSquareRootFn "The term (IntegerSquareRootFn ?X) denotes 
the integer square root of the object denoted by ?X.")
     
(instance-of LeastCommonMultipleFn VariableArityFunction)
(range LeastCommonMultipleFn Integer)
(documentation LeastCommonMultipleFn "The term (LeastCommonMultipleFn ?X ?Y ... 
?N) denotes the least common multiple of the objects denoted by ?X, ?Y, ... 
?N.")

(instance-of LogFn BinaryFunction)
(nth-domain LogFn 1 RealNumber)
(nth-domain LogFn 2 PositiveInteger)
(range LogFn RealNumber)
(documentation LogFn "The term (LogFn ?X ?Y) denotes the logarithm of the
object denoted by ?X in the base denoted by ?Y.")

(instance-of MaxFn VariableArityFunction)
(range MaxFn RealNumber)
(documentation MaxFn "The term (MaxFn ?X ?Y ... ?N) denotes the largest object
denoted by ?X, ?Y, ... , ?N.")

(instance-of MinFn VariableArityFunction)
(range MinFn RealNumber)
(documentation MinFn "The term (MinFn ?X ?Y ... ?N) denotes the smallest object
denoted by ?X, ?Y, ... , ?N.")

(instance-of ModuloFn BinaryFunction)
(nth-domain ModuloFn 1 RealNumber)
(nth-domain ModuloFn 2 RealNumber)
(range ModuloFn RealNumber)
(documentation ModuloFn "The term (ModuloFn ?X ?Y) denotes the root of the 
object denoted by ?X modulo the object denoted by ?Y.  The result will have the 
same sign as denoted by ?X.")

(instance-of NumeratorFn UnaryFunction)
(nth-domain NumeratorFn 1 RealNumber)
(range NumeratorFn Integer)
(documentation NumeratorFn "The term (NumeratorFn ?X) denotes the numerator of 
the canonical reduced form of the object denoted by ?X.")

(instance-of Pi-TheNumber RealNumber)
(documentation Pi-TheNumber "Pi-TheNumber is the real number that is the ratio 
of the perimeter of a circle to its diameter.  It is approximately equal to 
3.141592653589793.")

(instance-of RationalNumberFn UnaryFunction)
(nth-domain RationalNumberFn 1 Number)
(range RationalNumberFn RationalNumber)
(documentation RationalNumberFn "The term (RationalNumberFn ?X) denotes the 
rational representation of the object denoted by ?X.")

(instance-of RealNumberFn UnaryFunction)
(nth-domain RealNumberFn 1 Number)
(range RealNumberFn RealNumber)
(documentation RealNumberFn "The term (RealNumberFn ?X) denotes the real part of 
the object denoted by ?X.")

(instance-of RemainderFn BinaryFunction)
(nth-domain RemainderFn 1 RealNumber)
(nth-domain RemainderFn 2 RealNumber)
(range RemainderFn RealNumber)
(documentation RemainderFn "The term (RemainderFn ?NUMBER ?DIVISOR) denotes the 
remainder of the object denoted by ?NUMBER divided by the object denoted by 
?DIVISOR.  The result has the same sign as the object denoted by ?DIVISOR.")

(instance-of RoundFn UnaryFunction)
(nth-domain RoundFn 1 RealNumber)
(range RoundFn Integer)
(documentation RoundFn "The term (RoundFn ?X) denotes the integer nearest to 
the object denoted by ?X.  If the object denoted by ?X is halfway between two 
integers (for example 3.5), it denotes the nearest integer divisible by 2.")

(instance-of ScaleFloatFn BinaryFunction)
(nth-domain ScaleFloatFn 1 RealNumber)
(nth-domain ScaleFloatFn 2 Integer)
(range ScaleFloatFn RealNumber)
(documentation ScaleFloatFn "The term (ScaleFloatFn ?X ?Y) denotes a floating-
point number that is the representational radix of the object denoted by ?X 
raised to the integer denoted by ?Y.")

(instance-of SignumFn UnaryFunction)
(nth-domain SignumFn 1 RealNumber)
(range SignumFn Integer)
(documentation SignumFn "The term (SignumFn ?X) denotes the sign of the object
denoted by ?X.  This is one of -1, 1, or 0.")

(instance-of SineFn UnaryFunction)
(nth-domain SineFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range SineFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation SineFn "The term (SineFn ?X) denotes the sine of the object 
denoted by ?X (in radians).")

(instance-of HyperbolicSineFn UnaryFunction)
(nth-domain HyperbolicSineFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range HyperbolicSineFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation HyperbolicSineFn "The term (HyperbolicSineFn ?X) denotes the 
hyperbolic sine of the object denoted by ?X (in radians).")

(instance-of SquareRootFn UnaryFunction)
(nth-domain SquareRootFn 1 RealNumber)
(range SquareRootFn RealNumber)
(documentation SquareRootFn "The term (SquareRootFn ?X) denotes the principal 
square root of the object denoted by ?X.")

(instance-of TangentFn UnaryFunction)
(nth-domain TangentFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range TangentFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation TangentFn "The term (TangentFn ?X) denotes the tangent of the 
object denoted by ?X (in radians).")

(instance-of HyperbolicTangentFn UnaryFunction)
(nth-domain HyperbolicTangentFn 1 (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(range HyperbolicTangentFn (SetFn ?X (exists (?Y) (equal ?X (MeasureFn ?Y Radian)))))
(documentation HyperbolicTangentFn "The term (HyperbolicTangentFn ?X) denotes 
the hyperbolic tangent of the object denoted by ?X (in radians).")

(instance-of TruncateFn UnaryFunction)
(nth-domain TruncateFn 1 RealNumber)
(range TruncateFn Integer)
(documentation TruncateFn "The term (TruncateFn ?X) denotes the largest integer 
less than the object denoted by ?X.")

(instance-of lessThan BinaryRelation)
(nth-domain lessThan 1 RealNumber)
(nth-domain lessThan 2 RealNumber)
(documentation lessThan "The formula (lessThan ?X ?Y) is true if and only if
the number denoted by ?X is less than the number denoted by ?Y.")

(instance-of greaterThan BinaryRelation)
(nth-domain greaterThan 1 RealNumber)
(nth-domain greaterThan 2 RealNumber)
(documentation greaterThan "The formula (greaterThan ?X ?Y) is true if and only 
if the number denoted by ?X is greater than the number denoted by ?Y.")

(=>
	(instance-of ?X EvenInteger)
	(= (DivisionFn ?X 2) 0))

(=>
	(instance-of ?X OddInteger)
	(= (DivisionFn ?X 2) 1))

(<=>
	(instance-of ?X NaturalNumber)
	(and
		(greaterThan ?X 0)
		(instance-of ?X Integer)))

(=>
	(instance-of ?X NonnegativeInteger)
	(or
		(greaterThan ?X 0)
		(= ?X 0)))

(=>
	(instance-of ?X PositiveNumber)
	(greaterThan ?X 0))

(=>
	(instance-of ?X NegativeNumber)
	(greaterThan 0 ?X))

(<=>  
	(lessThan ?X ?Y)
	(greaterThan ?Y ?X))

(<=>
	(lessThanOrEqualTo ?X ?Y)
	(or
		(equal ?X ?Y)
		(lessThan ?X ?Y)))

(<=>
	(greaterThanOrEqualTo ?X ?Y)
	(or
		(equal ?X ?Y)
		(greaterThan ?X ?Y)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  QUANTITIES AND UNITS OF MEASURE   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following formulas incorporate the relations in the Quantities ontology 
;; (developed by ITBM-CNR) and the units of measure in the "Standard 
;; Units" and "Standard Dimensions" ontologies on the Ontolingua server.


(subclass-of SystemeInternationalUnit Unit-Of-Measure)
(documentation SystemeInternationalUnit "The class of Systeme International 
units.")

(subclass-of ElectricalCurrentMeasure Unit-Of-Measure)
(subclass-of MassMeasure Unit-Of-Measure)
(subclass-of LengthMeasure Unit-Of-Measure)
(subclass-of IdentityMeasure Unit-Of-Measure)
(subclass-of InformationMeasure Unit-Of-Measure)
(subclass-of EnergyMeasure Unit-Of-Measure)
(subclass-of LuminosityMeasure Unit-Of-Measure)
(subclass-of TimeMeasure Unit-Of-Measure)
(subclass-of TemperatureMeasure Unit-Of-Measure)
(subclass-of FrequencyMeasure Unit-Of-Measure)
(documentation FrequencyMeasure "A measure denoting how frequently something occurs.")
(subclass-of PowerMeasure Unit-Of-Measure)
(subclass-of ResistanceMeasure Unit-Of-Measure)
(subclass-of PressureMeasure Unit-Of-Measure)
(subclass-of ElectricalPotentialMeasure Unit-Of-Measure)
(subclass-of SubstanceMeasure Unit-Of-Measure)
(subclass-of ForceMeasure Unit-Of-Measure)
(subclass-of CurrencyMeasure Unit-Of-Measure)
(subclass-of AreaMeasure Unit-Of-Measure)
(subclass-of VolumeMeasure Unit-Of-Measure)
(subclass-of DensityMeasure Unit-Of-Measure)
(subclass-of HardnessMeasure Unit-Of-Measure)

(instance-of MeasureFn BinaryFunction)
(nth-domain MeasureFn 1 RealNumber)
(nth-domain MeasureFn 2 Unit-Of-Measure)
(range MeasureFn Measure)
(documentation MeasureFn "This function maps a real number and a unit of measure 
to that number of units.") 

(instance-of Ampere ElectricalCurrentMeasure)
(instance-of Ampere SystemeInternationalUnit)
(documentation Ampere "SI electrical current unit.  It is one of the base 
units.") 

(instance-of Amu MassMeasure)
(documentation Amu "Atomic mass unit, which is the mass of the twelfth part of a 
the Carbon 12 isotope. ")

(equal
	(MeasureFn ?X Amu)
	(MeasureFn (MultiplicationFn ?X 1.660434E-24) Gram)) 

(instance-of Angstrom LengthMeasure)

(equal
	(MeasureFn ?X Angstrom)
	(MeasureFn (MultiplicationFn ?X 1.0E-10) Meter))

(instance-of AngularDegree IdentityMeasure)
(documentation AngularDegree "Angular measurement unit.")

(equal
	(MeasureFn ?X AngularDegree)
	(MeasureFn (MultiplicationFn ?X (DivisionFn Pi-TheNumber 180)) Radian))

(instance-of AtomGram MassMeasure)
(documentation AtomGram "AKA gram-atom.  Defined as the mass in grams of a 1 
mole of pure substance.  For example, 1 atom-gram of Carbon 12 will be 12 grams 
of pure Carbon 12. 2 atom-grams of the same substance will be 24 grams of it.  
This is an unusual unit that it is essentially 1 mole of 'stuff' but measured in 
grams so that the actual value (i.e. mass) depends on the type of substance.")

(instance-of Bit InformationMeasure)
(documentation Bit "One bit of information.  A one or a zero.")

(instance-of BritishThermalUnit EnergyMeasure)
(documentation BritishThermalUnit "British thermal unit, a unit of energy.")

(equal
	(MeasureFn ?X BritishThermalUnit)
	(MeasureFn (MultiplicationFn ?X 1055.0) Joule))

(instance-of Byte InformationMeasure)
(documentation Byte "One byte of information.  A byte is eight bits.")

(equal
	(MeasureFn ?X Byte)
	(MeasureFn (MultiplicationFn ?X 8) Bit))

(instance-of Calorie EnergyMeasure)
(documentation Calorie "A calorie is 4.186 joule.")

(equal
	(MeasureFn ?X Calorie)
	(MeasureFn (MultiplicationFn ?X 4.186) Joule))

(instance-of Candela LuminosityMeasure)
(instance-of Candela SystemeInternationalUnit)
(documentation Candela "The CANDELA is the SI unit for luminous intensity.")

(instance-of Centimeter LengthMeasure)
(documentation Centimeter "It is the 100th part of a METER")

(equal
	(MeasureFn ?X Centimeter)
	(MeasureFn (MultiplicationFn ?X 0.01) Meter))

(instance-of Coulomb ElectricalCurrentMeasure)
(instance-of Coulomb SystemeInternationalUnit)
(documentation Coulomb "SI charge unit.")

(equal
	(MeasureFn ?X Coulomb)
	(PerFn (MeasureFn ?X Ampere) (MeasureFn 1 Second-Duration)))

(instance-of Day-Duration TimeMeasure-Duration)
(documentation Day-Duration "one day, ie 24 hours")

(equal
	(MeasureFn ?X Day-Duration)
	(MeasureFn (MultiplicationFn ?X 24) Hour-Duration))

(instance-of Degree-Celcius TemperatureMeasure)
(documentation Degree-Celcius "A unit for measuring temperature.
The degree-Kelvin differs from the Celcius scale that the triple point of water 
is defined to be 273.16 degrees Kelvin while it is 0 degrees Celcius.  The 
magnitudes of intervals in two scales are the same.")

(equal
	(MeasureFn ?X Degree-Celcius)
	(MeasureFn (SubtractionFn ?X 273.16) Degree-Kelvin))

(instance-of Degree-Kelvin TemperatureMeasure)
(instance-of Degree-Kelvin SystemeInternationalUnit)
(documentation Degree-Kelvin "A unit of thermodynamic temperature.  The degree-
Kelvin differs from the Celcius scale that the triple point of water is defined 
to be 273.16 degrees Kelvin while it is 0 degrees Celcius.  The magnitudes of 
intervals in two scales are the same.")

(instance-of Degree-Rankine TemperatureMeasure)
(documentation Degree-Rankine "0 degree Rankine is the same as the absolute zero 
(i.e. 0 degree Kelvin).  The magnitues of a degree Rankine is the same as that 
of a degree Fahrenheit.")

(equal
	(MeasureFn ?X Degree-Rankine)
	(MeasureFn (MultiplicationFn ?X 1.8) Degree-Rankine))

(instance-of ElectronVolt EnergyMeasure)
(documentation Electronvolt "The elecronvolt is an energy measure")

(equal
	(MeasureFn ?X ElectronVolt)
	(MeasureFn (MultiplicationFn ?X 1.6E-19) Joule))

(instance-of Foot LengthMeasure)
(documentation Foot "English length unit of feet.")

(equal
	(MeasureFn ?X Foot)
	(MeasureFn (MultiplicationFn ?X 0.3048) Meter))

(instance-of Giga-Hertz FrequencyMeasure)
(documentation Giga-Hertz "A unit of measure equal to one billion times per 
second.")

(equal 
	(MeasureFn ?X Giga-Hertz)
	(MeasureFn (MultiplicationFn ?X 1.0E9) Hertz))

(instance-of Gram MassMeasure)
(documentation Gram "1 kilogram = 1000 Grams")

(equal
	(MeasureFn ?X Gram)
	(MeasureFn (MultiplicationFn ?X 0.001) Kilogram))

(instance-of Hertz FrequencyMeasure)
(documentation Hertz "A unit of measure equal to a frequency of once per 
second.")

(equal
	(MeasureFn ?X Hertz)
	(PerFn (MeasureFn ?X Cycle) (MeasureFn 1 Second)))

(instance-of Hour-Duration TimeMeasure-Duration)
(documentation Hour-Duration "Time unit.")

(equal
	(MeasureFn ?X Hour-Duration)
	(MeasureFn (MultiplicationFn ?X 60) Minute-Duration))

(instance-of Inch LengthMeasure)
(documentation Inch "English length unit.")

(equal
	(MeasureFn ?X Inch)
	(MeasureFn (MultiplicationFn ?X 0.0254) Meter))

(instance-of Joule EnergyMeasure)
(instance-of Joule SystemeInternationalUnit)
(documentation Joule "SI energy unit.")

(instance-of Kilo-Byte InformationMeasure)
(documentation Kilo-Byte "One kilo byte (K) of information.  One K is 1024 
bytes.")

(equal
	(MeasureFn ?X Kilo-Byte)
	(MeasureFn (MultiplicationFn ?X 1024) Byte))

(instance-of Kilo-Hertz FrequencyMeasure)
(documentation Kilo-Hertz "A unit of measure equal to a frequency of one 
thousand times per second.")

(equal
	(MeasureFn ?X Kilo-Hertz)
	(MeasureFn (MultiplicationFn ?X 1000) Hertz))

(instance-of Kilo-Watt PowerMeasure)
(documentation Kilo-Watt "A unit that measures power, ie energy produced or 
expended per unit of time.")

(equal
	(MeasureFn ?X Kilo-Watt)
	(MeasureFn (MultiplicationFn ?X 1000) Watt))

(instance-of Kilogram MassMeasure)
(instance-of Kilogram SystemeInternationalUnit)
(documentation Kilogram "The basic unit of mass in the MKS system.")

(equal
	(MeasureFn ?X Kilogram)
	(MeasureFn (MultiplicationFn ?X 1000) Gram))

(instance-of Kilometer LengthMeasure)
(documentation Kilometer "1 kilometer = 1000 meters")

(equal
	(MeasureFn ?X Kilometer)
	(MeasureFn (MultiplicationFn ?X 1000) Meter))

(instance-of Mega-Byte InformationMeasure)
(documentation Mega-Byte "One mega byte (MB) of information.  One MB is 1024 
K.")

(equal
	(MeasureFn ?X Mega-Byte)
	(MeasureFn (MultiplicationFn ?X 1024) Kilo-Byte))

(instance-of Mega-Hertz FrequencyMeasure)
(documentation Mega-Hertz "A unit of measure equal to one million times per 
second.")

(equal
	(MeasureFn ?X Mega-Hertz)
	(MeasureFn (MultiplicationFn ?X 1000) Kilo-Hertz))

(instance-of Mega-Ohm ResistanceMeasure)
(documentation Mega-Ohm "One million ohms.")

(equal
	(MeasureFn ?X Mega-Ohm)
	(MeasureFn (MultiplicationFn ?X 1.0E6) Ohm))

(instance-of Mega-Pascal PressureMeasure) 
(documentation Mega-Pascal "1 megapascal = 10^6 pascal ")

(equal
	(MeasureFn ?X Mega-Pascal)
	(MeasureFn (MultiplicationFn ?X 1.0E6) Pascal))

(instance-of Meter LengthMeasure)
(instance-of Meter SystemeInternationalUnit)
(documentation Meter "SI length unit.  No conversion function is given because 
this is a standard.")

(instance-of Micro-Ohm ResistanceMeasure)
(documentation Micro-Ohm "10^(-6) Ohms")

(equal
	(MeasureFn ?X Micro-Ohm)
	(MeasureFn (MultiplicationFn ?X 0.000001) Ohm))

(instance-of Micro-Volt ElectricalPotentialMeasure)
(documentation Micro-Volt "A unit for measuring electrical potential.")

(equal
	(MeasureFn ?X Micro-VoltFn)
	(MeasureFn (MultiplicationFn ?X 0.000001) Volt))

(instance-of Mile LengthMeasure)
(documentation Mile "English length unit.")

(equal
	(MeasureFn ?X Mile)
	(MeasureFn (MultiplicationFn ?X 1609) Meter))

(instance-of Milli-Ampere ElectricalCurrentMeasure)
(documentation Milli-Ampere "A unit of electrical current equal to one 
thousandth of an ampere.")

(equal
	(MeasureFn ?X Milli-Ampere)
	(MeasureFn (MultiplicationFn ?X .001) Ampere))

(instance-of Milli-Volt ElectricalPotentialMeasure)
(documentation Milli-Volt "A unit of electrical potential equal to one 
thousandth of a volt.")

(equal
	(MeasureFn ?X Milli-Volt)
	(MeasureFn (MultiplicationFn ?X .001) Volt))

(instance-of Minute-Duration TimeMeasure-Duration)
(documentation Minute-Duration "Time unit.")

(instance-of Mole SubstanceMeasure)
(instance-of Mole SystemeInternationalUnit)
(documentation Mole "SI unit for amount of substance.  A mole of a substance is 
the amount of that substance that contains 6.02252 x 10^23 elementary
entities.  Those entities may be atoms, molecules, ions, electrons,
other particles, or specified groups of such particles.  One mole
of carbon atoms (the C^12 isotope) is exactly 12 grams [Halliday
and Resnick].  In this ontology we say that the specified unit
is the molecule, so that the MOLE stands by itself as a unit.")

(instance-of Nano-Ampere ElectricalCurrentMeasure)
(documentation Nano-Ampere "A unit of electrical current equal to one billionth 
of an ampere.")

(equal
	(MeasureFn ?X Nano-Ampere)
	(MeasureFn (MultiplicationFn ?X 1.0E-9) Ampere))

(instance-of Nano-Second TimeMeasure-Duration)
(documentation Nano-Second "A unit of measure equal to one trillionth of a 
second.")

(equal
	(MeasureFn ?X Nano-Second)
	(MeasureFn (MultiplicationFn ?X 1.0E-9) Second))

(instance-of Newton ForceMeasure)
(instance-of Newton SystemeInternationalUnit)
(documentation Newton "SI force unit.")

(instance-of Ohm ResistanceMeasure)
(documentation Ohm "A unit for measuring electrical resistance.")

(instance-of Pascal PressureMeasure)
(instance-of Pascal SystemeInternationalUnit)
(documentation Pascal "SI pressure unit.  Newton/meter^2.")

(instance-of Pico-Ampere ElectricalCurrentMeasure)
(documentation Pico-Ampere "A unit of electrical current equal to one trillionth 
of an ampere.")

(equal
	(MeasureFn ?X Pico-AmpereFn)
	(MeasureFn (MultiplicationFn ?X 1.0E-12) Ampere))

(instance-of Pico-Second TimeMeasure-Duration)

(equal
	(MeasureFn ?X Pico-Second)
	(MeasureFn (Multiplication ?X 1.0E-12) Second-Duration))

(instance-of Pound-Force ForceMeasure)
(documentation Pound-Force "English pound of force.")

(instance-of Pound-Mass MassMeasure)
(documentation Pound-Mass "English pound of mass.")

(equal
	(MeasureFn ?X Pound-Mass)
	(MeasureFn (MultiplicationFn ?X 0.4536) Kilogram))

(instance-of Radian IdentityMeasure)
(documentation Radian "Angular measurement unit.")

(instance-of Second-Duration TimeMeasure-Duration)
(instance-of Second-Duration SystemeInternationalUnit)
(documentation Second-Duration "The SI standard unit of time.")

(instance-of Slug MassMeasure)
(documentation Slug "English mass unit.")

(equal
	(MeasureFn ?X Slug)
	(MeasureFn (MultiplicationFn ?X 14.59) Kilogram))

(instance-of Dollar-UnitedStates CurrencyMeasure)
(documentation Dollar-UnitedStates "An example currency unit.")

(instance-of Cent-UnitedStates CurrencyMeasure)
(documentation Cent-UnitedStates "Currency measurement unit.")

(equal
	(MeasureFn ?X Cent-UnitedStates)
	(MeasureFn (MultiplicationFn ?X .01) Dollar-UnitedStates))

(instance-of Volt ElectricalPotentialMeasure)
(documentation Volt "A unit for measuring electrical potential.")

(instance-of Watt PowerMeasure)
(documentation Watt "A unit that measures power, ie energy produced or expended 
per unit of time.")

(instance-of Year-Duration TimeMeasure-Duration)
(documentation Year-Duration "one calendar year")

(equal
	(MeasureFn ?X Year-Duration)
	(MeasureFn (MultiplicationFn ?X 365) Day-Duration))

;; The following content was inspired by the Quantities ontology developed
;; by ITBM-CRN.

(instance-of measure QuantitativeRelation)
(instance-of measure BinaryRelation)
(nth-domain measure 1 Object)
(nth-domain measure 2 Quantity)
(documentation measure "A very general relation for asserting that a particular 
object is measured by a particular quantity.  In general, the second argument 
of this relation, and its subrelations, will be an instance of the schema 
(MeasureFn ?X ?Y).")

(subrelation-of age measure)

(=>
     (age ?X ?Y)
     (exists (?Z ?W)
          (and
               (instance-of ?Z TimeMeasure)
               (equal ?Y (MeasureFn ?W ?Z)))))

(instance-of degree TernaryRelation)
(nth-domain degree 1 Physical)
(nth-domain degree 2 Abstract)
(nth-domain degree 3 QualitativeValue)
(documentation degree "The relative intensity of an attribute of an object or process.")
 
(subrelation-of length measure)
(singleValued length 2)

(=>
     (length ?X ?Y)
     (exists (?Z ?W)
          (and
               (instance-of ?Z LengthMeasure)
               (equal ?Y (MeasureFn ?W ?Z)))))  

(subrelation-of diameter length)

(instance-of distance QuantitativeRelation)
(instance-of distance TernaryRelation)
(nth-domain distance 1 Object)
(nth-domain distance 2 Object)
(singleValued distance 3)
(documentation distance "(distance <OBJECT1> <OBJECT2> <LENGTH>) means that the distance between the two objects <OBJECT1> and <OBJECT2> is <LENGTH>.")

(=>
     (distance ?X ?Y ?Z)
     (exists (?V ?W)
          (and
               (instance-of ?V LengthMeasure)
               (equal ?Z (MeasureFn ?W ?V)))))  

(subrelation-of width length)

(instance-of larger QuantitativeRelation)
(instance-of larger BinaryRelation)
(nth-domain larger 1 Object)
(nth-domain larger 2 Object)

(instance-of smaller QuantitativeRelation)
(instance-of smaller BinaryRelation)
(nth-domain smaller 1 Object)
(nth-domain smaller 2 Object)

(=>
     (larger ?X ?Y)
     (smaller ?Y ?X))

(subrelation-of monetaryValue measure)
(singleValued monetaryValue 2)

(=>
     (monetaryValue ?X ?Y)
     (exists (?Z ?W)
          (and
               (instance-of ?Z CurrencyMeasure)
               (equal ?Y (MeasureFn ?W ?Z)))))  

(instance-of Few QualitativeAttribute)
(documentation Few "Usable for contextual assessment of numerosity; 
no numeric range can be done, eg compare 'few books on the table' (3?) and 
'few eritrocytes in your blood' (3 millions per part?).")

(instance-of Many QualitativeAttribute)
(documentation Many "Usable for contextual assessment of numerosity; 
no numeric range can be done, eg compare 'many books on the table' (12?) and 
'many eritrocytes in your blood' (8 millions per part?).")

(<=>
     (degree ?X ?Y Few)
     (not
          (degree ?X ?Y Many))) 

;; The following axioms are not taken from the Quantities ontology, but they are 
;; inspired by some of the content there.

(=>
     (forall (?X)
          (=>
               (measure ?A ?X)
               (measure ?B ?X)))
     (interchangeable ?A ?B))

(=>
     (exists (?X ?Y)
          (and
               (measure ?A ?X)
               (measure ?B ?Y)
               (not
                    (equal ?X ?Y))))
     (not
          (equal ?A ?B)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  ORGANISM HIERARCHY   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The following formulas incorporate the content in the Natural-Kinds ontology 
;; developed by the CNR-ITBM group.  This content is essentially a set of high-
;; level biological categories.

(subclass-of Organism OrganicObject)
(subclass-of Plant Organism)
(documentation Plant "An organism having cellulose cell walls, growing by 
synthesis of inorganic substances, generally distinguished by the presence of 
chlorophyll, and lacking the power of locomotion.  Plant parts are included here 
as well.")

(=>
	(instance-of ?X Plant)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y CellWall-Peptidoglycan))))

(=>
	(instance-of ?X Plant)
	(exists (?Y ?Z)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Pigment)
			(result ?Z ?Y)
			(instance-of ?Z Photosynthesis))))

(subclass-of Animal Organism)
(documentation Animal "An organism with eukaryotic cells, and lacking stiff cell 
walls, plastids and photosynthetic pigments. The children of this type in the 
network are 'Invertebrate', and 'Vertebrate'.")
(disjoint Plant Animal)

(=>
	(instance-of ?X Animal)
	(exists (?Y ?Z)
		(and
			(component-of ?X ?Y)
			(instance-of ?Y Cell)
			(part-of ?Y ?Z)
			(instance-of ?Z CellWall-NonRigid))))

(subclass-of Microorganism Organism)
(subclass-of Archaeon Microorganism)
(documentation Archaeon "A member of one of the three domains of life, formerly 
called Archaebacteria under the taxon Bacteria, but now considered separate and 
distinct. Archaea are characterized by:  1) the presence of characteristic tRNAs 
and ribosomal RNAs; 2) the absence of peptidoglycan cell walls; 3) the presence 
of ether-linked lipids built from branched-chain subunits; and 4) their 
occurrence in unusual habitats. While archaea resemble bacteria in morphology 
and genomic organization, they resemble eukarya in their method of genomic 
replication. Thermoproteales; Methanospirillum; Haloferax volcanii.")

(subclass-of Bacterium Microorganism)
(documentation Bacterium "A small, typically one-celled, prokaryotic micro-
organism.")

(=>
	(instance-of ?X Bacterium)
	(cardinality (setof ?Y (and (component-of ?Y ?X) (instance-of ?Y Cell))) 
1))

(=>
	(and
		(instance-of ?X Bacterium)
		(located-at ?X ?Y))
	(instance-of ?Y OrganicObject))

(subclass-of Virus Microorganism)
(documentation Virus "An organism consisting of a core of a single nucleic acid 
enclosed in a protective coat of protein. A virus may replicate only inside a 
host living cell. A virus exhibits some but not all of the usual characteristics 
of living things.")

(=>
	(instance-of ?X Virus)
	(cardinality (setof ?Y (and (component-of ?Y ?X) (instance-of ?Y 
Molecule))) 1))

(=>
	(instance-of ?X Virus)
	(and
		(instance-of ?X Nucleic-Acid)
		(exists (?Y ?Z)
			(and
				(superficial-part-of ?Y ?X)
				(part-of ?Z ?Y)
				(instance-of ?Z Protein)))))

(=>
	(and
		(instance-of ?X Virus)
		(instance-of ?Y Replication)
		(effector-of ?Y ?X))
	(exists (?Z)
		(and
			(located-at ?Y ?Z)
			(instance-of ?Z Cell))))

(=>
	(and
		(instance-of ?X Virus)
		(located-at ?X ?Y))
	(instance-of ?Y OrganicObject))
	
				 
(subclass-of Chlamydia Microorganism)
(documentation Chlamydia "An organism intermediate in size and complexity 
between a virus and a bacterium, and which is parasitic within the cells of 
insects and ticks. Included here are all the chlamydias, also called 'PLT' for 
psittacosis-lymphogranuloma venereum-trachoma.")

(=>
	(instance-of ?X Chlamydia)
	(exists (?Y ?Z)
		(and
			(lives-in ?X ?Y)
			(instance-of ?Y Cell)
			(component-of ?Y ?Z)
			(or
				(instance-of ?Z Insect)
				(instance-of ?Z Tick)))))

(=>
	(and
		(instance-of ?X Chlamydia)
		(located-at ?X ?Y))
	(instance-of ?Y OrganicObject))


(subclass-of Vertebrate Animal)
(documentation Vertebrate "An animal which has a spinal column.")

(=>
	(instance-of ?X Vertebrate)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Spinal-Column))))

(subclass-of Invertebrate Animal)
(disjoint Vertebrate Invertebrate)
(documentation Invertebrate "An animal which has no spinal column. This type has 
no children in the network and is assigned to all invertebrate animals.")

(subclass-of Arthropod Invertebrate)
(subclass-of Arachnid Arthropod)
(subclass-of Tick Arachnid)
(subclass-of Insect Arthropod)
(subclass-of Vertebrate-ColdBlooded Vertebrate)
(subclass-of Vertebrate-WarmBlooded Vertebrate)
(disjoint Vertebrate-WarmBlooded Vertebrate-ColdBlooded)
(subclass-of Mammal Vertebrate-WarmBlooded)

(subclass-of Alga Plant)
(documentation Alga "A chiefly aquatic plant that contains chlorophyll, but does 
not form embryos during development and lacks vascular tissue.")

(=>
	(instance-of ?X Alga)
	(exists (?Y)
		(and
			(lives-in ?X ?Y)
			(instance-of ?Y Water))))

(=>
	(instance-of ?X Alga)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Chlorophyll))))

(=>
	(instance-of ?X Alga)
	(has-developmental-form ?X Incoherent))

(subclass-of Amphibian Vertebrate-ColdBlooded)
(disjoint Amphibian Reptile)
(documentation Amphibian "A cold-blooded, smooth-skinned vertebrate which 
characteristically hatches as an aquatic larva, breathing by gills. When mature, 
the amphibian breathes with lungs.")

(=>
	(instance-of ?X Amphibian)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Lungs))))

(=>
	(instance-of ?X Amphibian)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Smooth-Skin))))

(=>
	(instance-of ?X Amphibian)
	(has-developmental-form ?X Aquatic-Larva))

(subclass-of Bird Vertebrate-WarmBlooded)
(disjoint Bird Mammal)
(documentation Bird "A vertebrate having a constant body temperature and 
characterized by the presence of feathers.")

(=>
	(instance-of ?X Bird)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Plumage)))) 

(subclass-of Fish Vertebrate-ColdBlooded)
(disjoint Fish Reptile)
(documentation Fish "A cold-blooded aquatic vertebrate characterized by fins and 
breathing by gills. Included here are fishes having either a bony skeleton, such 
as a perch, or a cartilaginous skeleton, such as a shark, or those lacking a 
jaw, such as a lamprey or hagfish.")

(=>
	(instance-of ?X Fish)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Gills)))) 

(=>
	(instance-of ?X Fish)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Fin)))) 

(=>
	(instance-of ?X Fish)
	(exists (?Y)
		(and
			(lives-in ?Y ?X)
			(instance-of ?Y Water))))

(subclass-of Fungus Plant)
(documentation Fungus "A eukaryotic organism characterized by the absence of 
chlorophyll and the presence of a rigid cell wall. Included here are both slime 
molds and true fungi such as yeasts, molds, mildews, and mushrooms.")

(=>
	(instance-of ?X Fungus)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Cell-Eurkaryotic))))

(=>
	(instance-of ?X Fungus)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y CellWall-Rigid))))

(=>
	(and
		(instance-of ?X Fungus)
		(located-at ?X ?Y))
	(instance-of ?Y OrganicObject))
	
(subclass-of Human Mammal)
(documentation Human "Modern man, the only remaining species of the Homo genus. 
If a term describes a human being from the point of view of occupational, 
family, social status, etc., then a type from the 'Group' hierarchy is assigned 
instead.")

(subclass-of Mammal Vertebrate-WarmBlooded)
(documentation Mammal "A vertebrate having a constant body temperature and 
characterized by the presence of hair, mammary glands and sweat glands.")

(=>
	(instance-of ?X Mammal)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Hair))))

(=>
	(instance-of ?X Mammal)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Mammary-Gland))))

(=>
	(instance-of ?X Mammal)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Sweat-Gland))))

(subclass-of Reptile Vertebrate-ColdBlooded)
(documentation Reptile "A cold-blooded vertebrate having an external covering of 
scales or horny plates.  Reptiles breathe by means of lungs and are generally 
egg-laying.")

(=>
	(instance-of ?X Reptile)
	(exists (?Y)
		(and
			(component-of ?Y ?X)
			(instance-of ?Y Lungs))))

(=>
	(instance-of ?X Reptile)
	(exists (?Y)
		(and
			(superficial-part-of ?Y ?X)
			(or
				(instance-of ?Y Scale)
				(instance-of ?Y Horny-Plate)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TEMPORAL DEFINITIONS/AXIOMS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; The first part of this section contains definitions and axioms for 'point in 
;; time', 'time interval', and relations between these temporal notions.  Most 
;; of these definitions and axioms were derived from Allen.  The second part of 
;; this section is an attempt to incorporate the Simple-Time ontology on the 
;; Ontolingua server into the merged ontology.

;; Necessary intermediate constants

(subclass-of TimeInterval TemporalObject)
(documentation TimeInterval "An interval of time.")

(subclass-of TimePoint TemporalObject)
(documentation TimePoint "A TimePoint is not a measurement of time, nor is it a 
specification of time.  It is the point in time. The TimePoints at which events 
occur can be known with various degrees of precision and approximation, but 
conceptually TimePoints are point-like and not interval-like.  That is, it 
doesn't make sense to talk about what happens during a TimePoint, or how long 
the TimePoint lasts.")

(subclass-of TimeMeasure Unit-Of-Measure)
(subclass-of TimeMeasure-Duration TimeMeasure)
(subclass-of TimeMeasure-Position TimeMeasure)

;; Definitions of basic temporal relations

(instance-of BeginFn UnaryFunction)
(nth-domain BeginFn 1 TimeInterval)
(range BeginFn TimePoint)
(documentation BeginFn "A function that maps a time interval to the point of 
time at which the interval begins")

(instance-of EndFn UnaryFunction)
(nth-domain EndFn 1 TimeInterval)
(range EndFn TimePoint)
(documentation EndFn "A function that maps a time interval to the point of time 
at which the interval ends")

(instance-of starts BinaryRelation)
(nth-domain starts 1 TimeInterval)
(nth-domain starts 2 TimeInterval)
(documentation starts "Relates one time interval to another time interval with 
which the first shares the same initial time point and of which the first is a 
proper part")

;; Axiom specifying the meaning of 'starts'

(<=> 
   (starts ?t1 ?t2)
   (and 
      (equal
         (BeginFn ?t1)
	   (BeginFn ?t2))
      (before
         (EndFn ?t1)
  	   (EndFn ?t2))))

;; Definition of 'finishes'

(instance-of finishes BinaryRelation)
(nth-domain finishes 1 TimeInterval)
(nth-domain finishes 2 TimeInterval)
(documentation finishes "Relates one time interval to another time interval with 
which the first shares the same terminal time point and of which the first is a 
proper part")

;; Axiom specifying the meaning of 'finishes'

(<=>
   (finishes ?t1 ?t2)
   (and
      (before
         (BeginFn ?t2)
         (BeginFn ?t1))
      (equal
         (EndFn ?t2)
         (EndFn ?t1))))

;; Note that the definition of 'before' below has been broadened from its 
;; statement in Allen.  The selectional restrictions for both arguments are now 
;; 'TemporalEntity' instead of 'TimeInterval'.

(instance-of before BinaryRelation)
(nth-domain before 1 TemporalEntity)
(nth-domain before 2 TemporalEntity)
(documentation before "Means that the first temporal quantity precedes the 
second, and there is no overlap between the two quantities")

(not
   (before ?t1 ?t1))

(=> 
   (and 
      (before ?t1 ?t2) 
      (before ?t2 ?t3))
   (before ?t1 ?t3))

;;  Definition of 'beforeEq', from Chris Menzel.  

(instance-of beforeEq BinaryRelation)
(nth-domain beforeEq 1 TimePoint)
(nth-domain beforeEq 2 TimePoint)
(documentation beforeEq "Means that the first timepoint either is identical with 
the second or occurs before it in time")

;;  Axiom specifying the full meaning of 'beforeEq'.

(<=> 
   (beforeEq ?t1 ?t2)
   (and 
      (instance-of ?t1 TimePoint) 
      (instance-of ?t2 TimePoint)
      (or 
         (before ?t1 ?t2) 
         (equal ?t1 ?t2))))

;; Definition of the relation 'overlaps-TimeInterval-proper'

(instance-of overlaps-TimeInterval-proper BinaryRelation)
(nth-domain overlaps-TimeInterval-proper 1 TimeInterval)
(nth-domain overlaps-TimeInterval-proper 2 TimeInterval)
(documentation overlaps "Means that the first time interval ends after the 
beginning and before the ending of the second interval") 

;; Axiom specifying the meaning of 'overlaps-TimeInterval-proper'
   
(<=> 
   (overlaps-TimeInterval-proper ?t1 ?t2)
   (and 
      (before
         (BeginFn ?t2)
         (BeginFn ?t1))
      (before
         (BeginFn ?t2)
         (EndFn ?t1))
      (before
         (EndFn ?t1)
         (EndFn ?t2))))

;; Definition and axiom for 'overlaps-TimeInterval-general'.  Note that this 
;; relation was extracted from Russell-Norvig's ontology.

(instance-of overlaps-TimeInterval-general BinaryRelation)
(nth-domain overlaps-TimeInterval-general 1 TimeInterval)
(nth-domain overlaps-TimeInterval-general 2 TimeInterval)
(documentation overlaps-TimeInterval-general "Means that the two time intervals 
have some time interval in common")

(<=>
   (overlaps-TimeInterval-general ?t1 ?t2)
   (and
      (exists ?t3
        (and
          (during ?t3 ?t1)
          (during ?t3 ?t2)))))

;; Definition of the relation 'meets'

(instance-of meets BinaryRelation)
(nth-domain meets 1 TimeInterval)
(nth-domain meets 2 TimeInterval)
(documentation meets "Means that the terminal point of the first interval is the 
initial point of the second interval")

;; Axiom specifying the meaning of 'meets'

(<=> 
   (meets ?t1 ?t2)
   (equal 
      (EndFn ?t1)
      (BeginFn ?t2)))

;; Extensionality Axiom for 'equal'

(=>
  (and
    (equal
      (BeginFn ?t1)
      (BeginFn ?t2))
    (equal
      (EndFn ?t1)
      (EndFn ?t2)))
    (equal ?t1 ?t2))

;; Definition of 'during'

(instance-of during BinaryRelation)
(nth-domain during 1 TimeInterval)
(nth-domain during 2 TimeInterval)
(documentation during "Means that the first time interval starts after and ends 
before the second time interval")

;; Axiom specifying the meaning of 'during'
   
(=> 
   (during ?t1 ?t2)
   (and 
      (endof ?t1 ?e1)
      (endof ?t2 ?e2)
      (lessThan ?e1 ?e2)
      (startof ?t1 ?s1)
      (startof ?t2 ?s2)
      (greaterThan ?s1 ?s2)))

;; Definition of 'in-TimeInterval'

(instance-of in-TimeInterval BinaryRelation)
(nth-domain in-TimeInterval 1 TimeInterval)
(nth-domain in-TimeInterval 2 TimeInterval)
(documentation in-TimeInterval "Means that the first time interval is a proper 
part of the second time interval")

(<=>
   (in-TimeInterval ?t1 ?t2)
   (or
      (during ?t1 ?t2)
      (starts ?t1 ?t2)
      (finishes ?t1 ?t2)))


;; Axiom concerning 'meets', 'during', and 'overlaps'

(=> 
  (and
    (meets ?t1 ?t2)
    (during ?t2 ?t3))
  (or
    (overlaps ?t1 ?t3)
    (during ?t1 ?t3)
    (meets ?t1 ?t3)))

;; The following definitions and axioms (down to the next section break) cover 
;; the content in the Simple-Time ontology on the Ontolingua server.

(instance-of time BinaryRelation)
(nth-domain time 1 DiscreteProcess)
(nth-domain time 2 TimeMeasure-Position)
(documentation time "A general relation that specifies, at any level of 
resolution, the time at which a particular event occurs.")

(instance-of date BinaryRelation)
(nth-domain date 1 DiscreteProcess)
(nth-domain date 2 Day)
(subrelation-of date time)
(documentation date "A binary relation that specifies a point in absolute 
calendar time, at the resolution of one day, for a particular event.")

(instance-of YearFn UnaryFunction)
(nth-domain YearFn 1 NaturalNumber)
(range YearFn Year)
(documentation YearFn "A unary function that maps a number to the corresponding 
calendar year.")

(instance-of MonthFn BinaryFunction)
(nth-domain MonthFn 1 NaturalNumber)
(nth-domain MonthFn 2 Year)
(range MonthFn Month)
(documentation MonthFn "A binary function that maps a number and a year to the 
corresponding month of the year.")

(instance-of DayFn BinaryFunction)
(nth-domain DayFn 1 NaturalNumber)
(nth-domain DayFn 2 Month)
(range DayFn Day)
(documentation DayFn "A binary function that maps a number and a month to the 
corresponding day of the month.")

(instance-of HourFn BinaryFunction)
(nth-domain HourFn 1 PositiveRealNumber)
(nth-domain HourFn 2 Day)
(range HourFn "A binary function that maps a number and a day to the 
corresponding hour of the day.")

(instance-of MinuteFn BinaryFunction)
(nth-domain MinuteFn 1 PositiveRealNumber)
(nth-domain MinuteFn 2 Hour)
(range MinuteFn Minute)
(documentation MinuteFn "A binary function that maps a number and a hour to the 
corresponding minute of the hour.")

(instance-of SecondFn BinaryFunction)
(nth-domain SecondFn 1 PositiveRealNumber)
(nth-domain SecondFn 2 Minute)
(range SecondFn Second)
(documentation SecondFn "A binary function that maps a number and a minute to 
the corresponding second of the minute.")

(subclass-of Year TimeMeasure-Position)
(subclass-of Month TimeMeasure-Position)

(=>
	(instance-of (MonthFn ?X ?Y) Month)
	(lessThanOrEqualTo ?X 12))

(subclass-of Day TimeMeasure-Position)

(=>
	(instance-of (DayFn ?X ?Y) Day)
	(lessThanOrEqualTo ?X 31))

(subclass-of Hour TimeMeasure-Position)

(=>
	(instance-of (HourFn ?X ?Y) Hour)
	(lessThanOrEqualTo ?X 24))

(subclass-of Minute TimeMeasure-Position)

(=>
	(instance-of (MinuteFn ?X ?Y) Minute)
	(lessThanOrEqualTo ?X 60))

(subclass-of Second TimeMeasure-Position)

(=>
	(instance-of (SecondFn ?X ?Y) Second)
	(lessThanOrEqualTo ?X 60))

(<=>
	(instance-of ?X BinaryRelation)
	(valence ?X 2))

(<=>
	(instance-of ?X TernaryRelation)
	(valence ?X 3))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MEREOTOPOLOGICAL DEFINITIONS/AXIOMS ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Most of this content is taken from Barry Smith's and Nicola Guarino's papers.

;;  Axiom about the extensionality of 'part-of' from Smith and Sowa

(=>
     (forall (?Z)
          (=>
               (part-of ?Z ?X)
               (overlaps ?Z ?Y)))
     (part-of ?X ?Y))

;;  Reflexivity, Antisymmetry, and Transitivity of 'part-of' from Smith

(part-of ?X ?X)

(=>
     (and
          (part-of ?X ?Y) 
          (part-of ?Y ?X))
     (= ?X ?Y))

(=>
     (and
          (part-of ?X ?Y)
          (part-of ?Y ?Z))
     (part-of ?X ?Z))

;; Axiom relating 'part-of' and 'equal'

(=>
   (and
      (part-of ?X ?Y)
      (part-of ?Y ?X))
   (equal ?X ?Y))

;; Definition of 'overlaps'

(instance-of overlaps BinaryRelation)
(nth-domain overlaps 1 CorpuscularObject)
(nth-domain overlaps 2 CorpuscularObject)
(documentation overlaps "?x overlaps ?y iff ?x and ?y have some parts in common. 
This is a reflexive and symmetric (but not transitive) relation.")

;;  Axiom specifying the meaning of 'overlaps' (from Guarino)

(<=>
	(overlaps ?X ?Y)
     	(exists (?Z)
          	(and
               	(part-of ?Z ?X)
               	(part-of ?Z ?Y))))

;; Definition of 'proper-part-of' 

(subrelation-of proper-part-of part-of)
(documentation proper-part-of "?x is a proper part of ?y iff ?x is a part of ?y 
other than ?y itself. This is a transitive and asymmetric (hence irreflexive) 
relation.")

;; Axiom specifying part of the meaning of 'proper-part-of' (from Smith)

(<=> 
	(proper-part-of ?X ?Y)
     	(and
		(part-of ?X ?Y)
		(not
			(part-of ?Y ?X))))

;; Definition of 'proper-overlaps' 

(subrelation-of proper-overlaps overlaps)

;; Axiom specifying part of the meaning of 'proper-overlaps' (from Guarino)

(=>
	(proper-overlaps ?X ?Y)
	(and
		(not
			(part-of ?X ?Y))
		(not
			(part-of ?Y ?X))))

;; Definition of 'interior-part-of' 

(subrelation-of interior-part-of part-of)

;; Axiom specifying part of the meaning of 'interior-part-of' (from Smith)

(=>
	(interior-part-of ?X ?Y)
     	(forall (?Z)
               	(=> 
                    	(boundary ?Z ?Y)
                    	(not
                         	(overlaps ?X ?Z)))))

;;  Definition of 'superficial-part-of' (from Casati and Varzi)

(subrelation-of superficial-part-of part-of)
(documentation superficial-part-of "?x is a superficial part of ?y iff ?x is a 
part of ?y that has no interior parts of its own (or, intuitively, that only 
overlaps those parts of y that are externally connected with the geometric 
complement of y). This too is a transitive relation closed under sum-of and 
prod-of.")

;; Axiom specifying part of the meaning of 'superficial-part-of' (from Casati 
;; and Varzi)

(=> 
	(superficial-part-of ?x ?y)
	(not
		(exists (?z)
			(interior-part-of ?z ?x))))

;; Definition of 'surface-of' (from Casati and Varzi)

(subrelation-of surface-of superficial-part-of)
(documentation surface-of "?x is a surface of ?y iff ?x is a maximally connected 
superficial part of y.")

;; Axiom specifying part of the meaning of 'surface-of' (from Casati and Varzi)

(=> 
	(surface-of ?x ?y)
	(and 
		(instance-of ?x SelfConnectedObject)
		(forall (?z)
			(=> 
				(and 
					(superficial-part-of ?z ?y)
					(instance-of ?z SelfConnectedObject))
					(=>
						(connected-to ?z ?x)
						(part-of ?z ?x))))))

;; Definitions and Axioms for the notions of mereological sum, product, and 
;; difference.

(instance-of MereologicalFn BinaryFunction)
(nth-domain MereologicalFn 1 CorpuscularObject)
(nth-domain MereologicalFn 2 CorpuscularObject)
(documentation MereologicalFn "This is an umbrella relation for 
MereologicalSumFn, MereologicalProductFn, and MereologicalDifferenceFn.") 

(subclass-of MereologicalSumFn MereologicalFn)

(<=>
     (equal ?Z (MereologicalSumFn ?X ?Y))
     (forall (?W)
	       (<=>
	            (overlaps ?W ?Z)
		    (or
	  	         (overlaps ?W ?X)
			 (overlaps ?W ?Y)))))

(subclass-of MereologicalProductFn MereologicalFn)

(<=>
     (equal ?Z (MereologicalProductFn ?X ?Y))
     (forall (?W)
	       (<=>
	            (part-of ?W ?Z)
		    (and
	  	         (part-of ?W ?X)
			 (part-of ?W ?Y)))))

(subclass-of MereologicalDifferenceFn MereologicalFn)

(<=>
     (equal ?Z (MereologicalDifferenceFn ?X ?Y))
     (forall (?W)
	       (<=>
	            (part-of ?W ?Z)
		    (and
	  	         (part-of ?W ?X)
                         (not
			      (overlaps ?W ?Y))))))
	  


;;  Definition of 'MaximalBoundaryFn'

(instance-of MaximalBoundaryFn UnaryFunction)
(nth-domain MaximalBoundaryFn 1 CorpuscularObject)
(range MaximalBoundaryFn CorpuscularObject)

(<=>
     (equal ?Z (MaximalBoundaryFn ?X))
     (forall (?W)
               (=>
	            (boundary ?W ?X)
		    (part-of ?W ?Z))))

;;  Definition of 'ClosureFn' (of an object)

(equal
	(ClosureFn ?X)
     	(MereologicalSumFn ?X (MaximalBoundaryFn ?X)))

;;  Basic axioms for a topology based on bona fide boundaries - these are the 
;;  result of mereologizing the standard Kuratowski axioms for closure 
;;  operators.

(part-of ?X (ClosureFn ?X))

(part-of (ClosureFn (ClosureFn ?X)) (ClosureFn ?X))

(equal
	(ClosureFn (MereologicalSumFn ?X ?Y)) 
	(MereologicalSumFn (ClosureFn ?X) (ClosureFn ?Y)))

;;  Definition of the relation of 'connected' from Smith

(instance-of connected BinaryRelation)
(nth-domain connected 1 CorpuscularObject)
(nth-domain connected 2 CorpuscularObject)

(<=>
	(connected ?X ?Y)
     	(overlaps (ClosureFn ?X) (ClosureFn ?Y)))

;;  Definition of 'externally-connected' (i.e. connection where the objects 
;; themselves do not overlap with one another).

(subrelation-of externally-connected connected)
(documentation externally-connected "Means that the arguments of the relation 
are "connected", but that they do not overlap.")

(=>
	(externally-connected ?X ?Y)
     	(not
        	(overlaps ?X ?Y)))

;;  Definition of the class 'SelfConnectedObject' (from Casati and Varzi):  ?x 
;;  is a SelfConnected just in case ?x does not consist of two or more 
;;  disconnected parts.

(subclass-of SelfConnectedObject CorpuscularObject)
(documentation SelfConnectedObject "Something is a SelfConnectedObject just in 
case it does not consist of two or more disconnected parts.")

(<=> 
	(instance-of ?X SelfConnectedObject)
	(forall (?Y ?Z)
		(=> 
			(equal ?X (MereologicalSumFn ?Y ?Z))
			(connected ?Y ?Z))))

;;  Definition of the class 'ClosedObject'

(subclass-of ClosedObject CorpuscularObject)

(<=>
	(instance-of ?X ClosedObject)
     	(equal ?X (ClosureFn ?X)))

;;  Definition of 'BoundaryClass' (the class of boundaries)

(subclass-of BoundaryClass CorpuscularObject)
(documentation BoundaryClass "This is just a convenient way of aggregating all 
of the boundaries of objects.")

(<=>
	(instance-of ?X BoundaryClass)
     	(exists (?Y)
          	(boundary ?X ?Y)))


;;;;;;;;;;;;;;;;;;;;;
;;    POSITIONS    ;;
;;;;;;;;;;;;;;;;;;;;;


;; This section aligns the content in the Positions ontology of the ITBM-CRN 
;; group.  This content is a set of predicates for describing spatial relations.  
;; At this point (01/12/01), very few axioms are given.  Eventually, the meaning 
;; of all of these predicates should be cashed out with the relations defined in 
;; the earlier section "Mereotopological Definitions/Axioms".

(instance-of position BinaryRelation)
(nth-domain position 1 Object)
(nth-domain position 2 Object)
(documentation position "(position ?X ?Y) means that ?X is positioned with 
respect to ?Y in some way.  This is a very general predicate whose main utility 
is to function as an umbrella for the more specific positional predicates.")

(subrelation-of above position)
(documentation above "This is a cognitive primitive, derived from the up/down 
schema and not involving contact.  A possible formalization of the medical 
meaning must take into account the conventional body directions; though, there 
is no unique direction hierarchy guiding the application of this relation to 
anatomical spaces.")

(=>
  (above ?X ?Y)
  (not
    (connected ?X ?Y)))

(subrelation-of adjacent position)
(documentation adjacent "Close to, near or abutting another physical unit with 
no other structure of the same kind intervening. This includes adjoins, abuts, 
is contiguous to, is juxtaposed, and is close to.") 

(=>
  (adjacent ?X ?Y)
  (or
    (near ?X ?Y)
    (connected ?X ?Y)))

(subrelation-of along position)
(documentation along "(along ?X ?Y) means that an object ?X shares the region of 
?Y at least as far the extension of one dimension is concerned.")

(subrelation-of behind position)
(documentation behind "This is a cognitive primitive, derived from the 
front/back schema; a possible formalization of the medical meaning must take 
into account the conventional body directions; though, there is no unique 
direction hierarchy guiding the application of this relation to anatomical 
spaces.")

(subrelation-of below position)

(<=>
  (below ?X ?Y)
  (above ?Y ?X))

(instance-of between TernaryRelation)
(nth-domain between 1 Object)
(nth-domain between 2 Object)
(nth-domain between 3 Object)

(=>
  (between ?X ?Y ?Z)
  (and
    (left-of ?Y ?X)
    (left-of ?X ?Z)))

(subrelation-of contains position)
(documentation contains "The surrounding relation for masses.")

(=>
  (contains ?X ?Y)
  (forall (?Z)
    (=>
      (part-of ?Z ?Y)
      (exists ?U
        (interior-part-of ?U ?X)
        (located-at ?Z ?U)))))

(subrelation-of crosses-over position)
(documentation crosses-over "(crosses-over ?X ?Y) means that X crosses-through 
the region of y, without overlapping y.")

(=>
  (crosses-over ?X ?Y) 
  (not
    (connected ?X ?Y)))

(subrelation-of crosses-through position)
(documentation crosses-through "Here: x crosses-through y equals to x overlaps y 
along at least one whole dimension (length, width or depth), say the interiors 
of x and y overlap.") 

(subrelation-of left-of position)
(documentation left-of "This is a cognitive primitive, derived from the 
left/right schema; a possible formalization of the medical meaning must take 
into account the conventional body directions; though, there is no unique 
direction hierarchy guiding the application of this relation to anatomical 
spaces.")

(subrelation-of near position)
(documentation near "Specialized common sense adjacency without contact; 
based on implicit scale and distance less than the diameter of the smaller 
object; alternatively, based on the smallest distance among the higher 
granularity objects.  Eg, in cell C near object P, P is the less distant object 
of a higher granularity than C.")

(=>
  (near ?A ?B) 
  (or (exists (?C ?D ?E)
           (and (the-smaller ?A ?B ?E)
                (diameter ?E ?D)
                (distance ?A ?B ?C)
                (lessThan ?C ?D)))
          (not (exists (?Z)
                (or (and (exists (?F)
                          (and (the-finer-granularity ?A ?Z ?F)
                               (equal ?F ?A)))
                         (same-granularity ?B ?Z)
                         (exists (?G ?H)
                          (and (distance ?B ?A ?H)
                               (distance ?Z ?A ?G)
                               (lessThan ?G ?H)))
                         (different ?B ?Z))
                    (and (exists (?I)
                          (and (the-finer-granularity ?B ?Z ?I)
                               (equal ?I ?B)))
                         (same-granularity ?A ?Z)
                         (exists (?J ?K)
                          (aND (distance ?A ?B ?K)
                               (distance ?Z ?B ?J)
                               (lessThan ?J ?K)))
                         (different ?A ?Z)))))))

(subrelation-of on position)
(documentation on "This is a cognitive primitive, derived from the up/down 
schema and involving contact.  A possible formalization of the medical meaning 
must take into account the conventional body directions; though, there is no 
unique direction hierarchy guiding the application of this relation to 
anatomical spaces.")

(=>
  (on ?X ?Y)
  (connected ?X ?Y))

(subrelation-of right-of position)

(<=>
  (right-of ?X ?Y)
  (left-of ?Y ?X))

(subrelation-of surrounds position)
(documentation surrounds "limits, bounds, confines, encloses or circumscribes, 
but excluding the containment of substances. Here it is defined by stating that 
x surrounds y iff the interior of x wholly contains y.")

(subrelation-of traverses position)
(documentation traverses "Crosses or extends across another physical structure 
or area. This includes crosses over and crosses through.")

(subrelation-of under position)

(=>
  (under ?X ?Y)
  (or
    (on ?Y ?X)
    (above ?Y ?X)))


;;;;;;;;;;;;;;;;;;;;;
;; THEORY OF HOLES ;;
;;;;;;;;;;;;;;;;;;;;;


;; What follows is essentially a SUO-KIF translation of Casati and Varzi's 
;; formal theory of holes that has been aligned with Sowa's upper ontology.

;;Definition of binary relation 'hole-in'

(instance-of hole-in BinaryRelation)
(nth-domain hole-in 1 Object)
(nth-domain hole-in 2 Hole)
(documentation hole-in "The main thesis is that a hole is an immaterial body 
located at the surface (or at some surface) of a material object. Since the 
notion of a surface is essentially a topological one, and since the property of 
being immaterial is reflected in the morphological property of being fillable, 
the ontological basis is concerned first and foremost with the general 
dependence of a hole on its host.")

;; Definition of class 'Hole'

(subclass-of Hole Property)
(documentation Hole "X is a hole iff it is a hole in something.  Since every 
hole is ontologically dependent on its host (i.e., the object in which it is a 
hole), being a hole is defined as being a hole in something.")

;; Axioms relating 'hole-in' to 'Hole'

(<=> 
	(instance-of ?x Hole)
	(exists (?Y)
		(hole-in ?x ?y)))

(=> 
	(hole-in ?x ?y)
        (not 
		(instance-of ?y Hole)))

;; Definitions of 'hole-part-of' and 'proper-hole-part-of'

(documentation hole-part-of "?x is a hole-part of ?y iff ?x is a hole that is a 
part of ?y.  This is a partial ordering, like `part-of'; it applies only when ?y 
is itself a (part of a) hole.")

(<=> 
	(hole-part-of ?x ?y)
	(and 
		(instance-of ?x Hole)
		(part-of ?x ?y)))

(documentation proper-hole-part-of "?x is a proper hole-part of ?y iff ?x is a 
hole that is a proper part of ?y.  This is transitive, asymmetric, and 
irreflexive relation.")

(<=> 
	(proper-hole-part-of ?x ?y)
	(and 
		(instance-of ?x Hole)
		(proper-part-of ?x ?y)))

;; Mereological Axioms

;; No hole overlaps its own host (though the sum of a hole and its host may be a 
;; legitimate host for different holes: e.g. the sum of a doughnut ?y and its 
;; hole ?x -- if such a sum exists -- will not be a host of ?x, but it will be a 
;; host of, say, a cavity that may be hidden inside ?y.

(=> 
	(hole-in ?x ?y)
        (not 
		(overlaps ?x ?y)))

;; Any two hosts of a hole have a common proper part that entirely hosts the 
;; hole.  (Of course, intuitively a hole has one host; but if we allow for 
;; mereological sums or splittings, then every hole has a virtually infinite 
;; class of hosts, partially ordered by proper-part-of.

(=> 
	(and 
		(hole-in ?x ?y)
              	(hole-in ?x ?z))
      	(exists (?w)
               	(and 
			(proper-part-of ?w (MereologicalProductFn ?x ?y))
                        (hole-in ?x ?w))))

;; A common host of two holes hosts all hole-parts of the sum of those holes.

(=> 
	(and 
		(hole-in ?x ?y)
      		(hole-in ?z ?y))
     	(forall (?w)
        	(=> 
			(hole-part-of ?w (MereologicalSumFn ?x ?z))
                        (hole-in ?w ?y))))

;; Any object that includes the host of a hole is a host of that hole, 
;; unless its parts also include parts of that very hole.

(=> 
	(and 
		(hole-in ?x ?y)
             	(part-of ?y ?z))
      	(or
		(overlaps ?x ?z)
                (hole-in ?x ?z)))

;; Overlapping holes have overlapping hosts. (However, two holes may occupy 
;; the same region, or part of the same region, without sharing any parts.  
;; Holes are immaterial, and can penetrate one another; mereological overlapping 
;; is not implied by spatial co-localization.)

(=> 
	(and 
		(hole-in ?x ?y)
             	(hole-in ?z ?w)
             	(overlaps ?x ?z))
      	(overlaps ?y ?w))

;; No hole is atomic (though holes need not have proper hole-parts; 
;; otherwise every hole would correspond to a pile of infinitely many, 
;; gradually smaller holes).
            
(=> 
	(instance-of ?x Hole)
       	(exists (?y)
       		(proper-part-of ?y ?x)))


;; Topological Definitions

;; Definition of 'principal-host-of'

(<=>
     (equal ?Y (principle-host-of ?x))
     (forall (?w)
		(<=> 
			(overlaps ?w ?y)
			(exists (?u)
				(and 
					(hole-in ?x ?u)
				       	(instance-of ?u SelfConnectedObject)
				       	(overlaps ?w ?u))))))

(documentation principal-host-of "The principle host of ?x is ?x's maximally 
connected host (a notion taken here to be defined only when ?x is a hole).  We 
may intuitively regard this as the host of the hole, every other host being 
either a topologically scattered mereological aggregate including the principal 
host or a potential part of this latter.")

;; Definition of 'cavity-in'

(<=> 
	(cavity-in ?x ?y)
	(and 
		(hole-in ?x ?y)
		(exists (?z)
			(and 
				(surface-of ?z ?y)
			      	(forall (?w)
					(=> 
						(part-of ?w ?z)
					   	(connected ?x ?w)))))))

(documentation cavity-in "?x is a cavity in ?y iff ?x is an internal hole 
enveloped by an entire host surface. A cavity is a topologically nonerasable 
discontinuity.")

;; Definition of 'tunnel-through'

(<=> 
	(tunnel-through ?x ?y)
	(and 
		(hole-in ?x ?y)
		(forall (?z)
			(=> 
				(and 
					(part-of ?z ?y)
				   	(instance-of ?z SelfConnectedObject)
				   	(hole-in ?x ?z))
			      (not 
			         (equal (genus-of ?x) 0))))))

(documentation tunnel-through "A tunnel (or a perforation) through a host is 
also a topologically non-erasable hole, characterized by the fact that its host 
has no connected part of genus 0 entirely hosting the hole. Note that a hole may 
at once be a tunnel and a cavity: it may be a cavity-tunnel, e.g.,. a 'toroidal' 
hole.")

(documentation genus-of "Intuitively, the genus of an object is the maximum 
number of simultaneous cuts that can be made without separating the object into 
two unconnected pieces (0 if it is a sphere, 1 if it is a torus, etc.). This 
notion could be defined in terms of connected-with, but that would lead us too 
far afield.")

;; Definition of 'hollow-in'

(<=> 
	(hollow-in ?x ?y)
	(and 
		(hole-in ?x ?y)
		(not 
			(tunnel-through ?x ?y))
		(not 
			(cavity-in ?x ?y))))

(documentation hollow-in "?x is a hollow (or a depression) in ?y iff ?x is a 
hole in ?y which is neither a tunnel through ?y nor a cavity in ?y. This is 
always an external, topologically erasable disturbance, characterized by the 
fact that the relevant host must have a part of genus 0 entirely hosting the 
hole.")

;; Topological Axioms

;; Holes are self-connected; i.e., there are no scattered holes.

(=> 
	(instance-of ?x Hole)
       	(instance-of ?x SelfConnectedObject))

;; Holes are connected with their hosts.

(=> 
	(hole-in ?x ?y)
       	(connected ?x ?y))

;; Every hole has some self-connected host.

(=> 
	(instance-of ?x Hole)
       	(exists (?y)
       		(and 
			(hole-in ?x ?y)
                      	(instance-of ?y SelfConnectedObject))))

;; No hole can have a proper hole-part that is externally connected with exactly 
;; the same things as the hole itself.

(=> 
	(and 
		(instance-of ?x Hole)
               	(proper-hole-part-of ?y ?x))
      	(exists (?z)
            	(and 
			(externally-connected ?x ?z)
                      	(not 
				(externally-connected ?y ?z)))))

;; Morphological Definitions

;; Definition of 'filled-by'

(instance-of filled-by BinaryRelation)
(nth-domain filled-by 1 Object)
(nth-domain filled-by 2 Object)
(documentation filled-by "Holes can be filled; 'filled' here mean PERFECTLY 
filled. Holes can be filled (without losing their status of holes) insofar as 
they determine a (partially) concave discontinuity in the surface of their 
host.")
 
;; Definition of 'fillable'

(<=> 
	(fillable ?x)
	(Poss 
		(exists (?y) 
			(filled-by ?x ?y))))

(documentation fillable "?x is fillable if it can be (perfectly) filled by 
something.")

;; Definition of 'completely-filled-by'

(<=> 
	(completely-filled-by ?x ?y)
	(exists (?z)
		(and 
			(part-of ?z ?y)
			(filled-by ?x ?z))))

(documentation completely-filled-by "?x is completely filled by ?y iff there is 
some part of ?y that perfectly fills ?x. This is a monotonic relation, in the 
sense that if ?x is completely filled by ?y and ?y is a part of ?z, then ?x is 
completely filled by ?z.")

;; Definition of 'partially-filled-by'

(<=> 
	(partially-filled-by ?x ?y)
	(exists (?z)
		(and 
			(part-of ?z ?x)
			(completely-filled-by ?z ?y))))

(documentation partially-filled-by "?x is partially filled by ?y iff there is 
some part of ?x that is completely filled by ?y. This too is a monotonic 
relation, in the sense that if ?x is partially filled by ?y and ?y is part of 
?z, then ?x is partially filled by ?z. Note that a partial filler need not be 
wholly inside a hole (it may  stick out), which means that every complete filler 
also qualifies as (a limit cases of) a partial one.")


;; Definition of 'properly-filled-by'

(<=> 
	(properly-filled-by ?x ?y)
	(exists (?z)
		(and 
			(part-of ?z ?x)
			(filled-by ?z ?y))))

(documentation properly-filled-by "?x is properly (though perhaps incompletely) 
filled by ?y iff some part of ?x is perfectly filled by ?y. properly-filled-by 
is the dual of completely-filled-by, and is so related to partially-filled-by 
that ?x is properly filled by ?y iff ?x is partially filled by every part of ?y. 
(Thus, every perfect filler is both complete and proper in this sense.)")

;; Definition of 'skin-of'

(<=>
     (equal ?Y (skin-of ?X))
     (forall (?z)
		(<=> 
			(overlaps ?z ?y)
			(exists (?w)
				(and 
				      (superficial-part-of ?w (principle-host-of ?x))
				      (externally-connected ?x ?w)
				      (overlaps ?z ?w))))))

(documentation skin-of "The skin of ?x is the fusion of those superficial parts 
of ?x's principal host with which ?x is externally connected (a notion that is 
meant to apply only when ?x is a hole).")

;; Definition of 'free-superficial-part-of'

(<=> 
	(free-superficial-part-of ?x ?y ?z)
	(and 
		(superficial-part-of ?x ?y)
	     	(not 
			(connected ?x (skin-of ?z)))))

(documentation free-superficial-part-of "?w is a free superficial part of ?z 
relative to ?x ; i.e., ?w is a superficial part of ?z that is not connected with 
?x's host(s). (This notion is meant to apply only when ?x is a hole and ?z a 
corresponding perfect filler.)")

;; Morphological Axioms

;; Something is fillable just in case it is part of a hole; i.e., fillability is 
;; an exclusive property of holes and their parts.

(<=> 
	(instance-of ?x Fillable)
       	(exists (?y)
        	(and 
			(instance-of ?y Hole)
                       	(part-of ?x ?y))))

;; Perfect fillers and fillable entities have no parts in common (rather, they 
;; may occupy the same spatial region).

(=> 
	(and 
		(filled-by ?x ?y)
           	(instance-of ?z fillable))
      (not (overlaps ?y ?z)))

;; A complete filler of (a part of) a hole is connected with everything 
;; with which (that part of) the hole itself is connected.

(=> 
	(completely-filled-by ?x ?y)
       	(forall (?z)
   		(=> 
			(connected ?z ?x)
                  (connected ?z ?y))))

;; Every hole is connected with everything with which a proper filler of 
;; the hole is connected. 

(=> 
	(and 
		(properly-filled-by ?x ?y)
          	(connected-with ?z ?y))
     	(connected ?z ?x))

;; A perfect filler of (a part of) a hole completely fills every proper 
;; part of (that part of) that hole.

(=> 
	(and 
		(filled-by ?x ?y)
              	(proper-part-of ?z ?x))
     	(completely-filled-by ?z ?y))

;; Every proper part of a perfect filler of (a part of) a hole properly 
;; fills (that part of) that hole.

(=> 
	(and 
		(filled-by ?x ?y)
              	(proper-part-of ?z ?y))
     	(properly-filled-by ?y ?z))


;;;;;;;;;;;
;; NOTES ;;
;;;;;;;;;;;

;; We need to be able to distinguish instances of Continuant which are stuffs 
;; (e.g. water, oxygen, sand) from instances of Continuant which are objects 
;; (e.g. table, jacket, notebook).  From what I can see, there is no provision 
;; for this distinction in Sowa's ontology.  Perhaps we could divide 
;; 'Continuant' into two disjoint classes, viz. Continuant-Stuff and Continuant-
;; Object.

;; The following is a possible means of axiomatizing the distinction between 
;; 'ContinuousObject' and 'CorpuscularObject' in the upper level ontology.  This 
;; is borrowed from the Morphology ontology developed by ITBM-CNR (in particular 
;; it is taken from the definitions of Heteromerous and Homeomerous in this 
;; ontology).  The axioms are commented out for the time being, because 
;; they are framed in terms of 'StuffType' which has not yet been included in 
;; the ontology.

;; (=>
;;    (instance-of ?X CorpuscularObject)
;;    (exists (?Y ?Z)
;;       (and
;;          (instance-of ?Y StuffType)
;;          (instance-of ?Z StuffType)
;;          (constituent-material-of ?Y ?X)
;;          (constituent-material-of ?Z ?X)
;;          (not (subclass-of ?Y ?Z))
;;          (not (subclass-of ?Z ?Y)))))

;; (=>
;;    (instance-of ?X ContinuousObject)
;;    (exists (?Y)
;;       (and
;;          (instance-of ?Y StuffType)
;;          (constituent-material-of ?Y ?X)
;;          (forall (?Z)
;;             (=>
;;                (and
;;                   (instance-of ?Z StuffType)
;;                   (constituent-material-of ?Z ?X)
;;                (equal ?Z ?Y))))))           

;; We may want to include something like the following axioms at some point.

;;(=>
;;     (playsRole ?Act ?Ent ?Role)
;;     (capableOfDoing ?Ent ?Act ?Role))

;;(=>
;;     (and
;;          (playsRole ?Act ?Res Resource)
;;          (ends ?Act ?Time)
;;          (holdsIn (STIB ?Time) (amountAvailable ?Res ?Amt1))
;;          (holdsIn (STIF ?Time) (amountAvailable ?Res ?Amt2)))
;;     (greaterThan ?Amt1 ?Amt2)) 

;; Formulate an axiom to the effect that a DiscreteProcess consists of 
;; interleaved events and states

;; The following is a provisional addition to the top level of the ontology.  
;; The purpose of this addition is to accommodate normative notions.  If this 
;; addition is embraced by the other SUO participants and if it is deemed 
;; acceptable in other respects it will be commented out.

;; (subclass-of Normative Entity)
;; (subclass-of NormativeProposition Normative)
;; (subclass-of NormativeProposition Proposition)
;; (subclass-of Obligation NormativeProposition)
;; (subclass-of Agreement NormativeProposition)
;; (subclass-of JudgementOfEtiquette NormativeProposition)
;; (subclass-of AestheticJudgement NormativeProposition)
;; (subclass-of InstitutionalObligation Obligation)
;; (subclass-of PersonalObligation Obligation)
;; (subclass-of ReligiousObligation InstitutionalObligation)
;; (subclass-of LegalObligation InstitutionalObligation)

;; The following is another provisional addition to the top level of the 
;; ontology.  This addition locates the crucial notions of 'WavePropagation', 
;; 'ElectronicWave', and 'ElectronicSignal' within the existing framework of 
;; concepts.

;; (subclass-of WavePropagation Process)
;; (subclass-of ElectronicWave WavePropagation)
;; (subclass-of ElectronicSignal ElectronicWave)
;; (subclass-of ElectronicSignal Sign)

;; We probably will need to add back some notion of 'Intention' or 
;; 'IntentionalEntity' at some point.
;;
;; (documentation IntentionalEntity "Examples of intentions include the hopes, 
;; fears, wishes, and purposes that mediate some agent's actions.")

;; The following is a nice comment due to Pat Hayes.  We'll probably want to 
;; figure out some way of incorporating its content into the official ontology.

;;(documentation Occurrent/Continuant-contrast-note " The question of 
;;deciding whether something is a continuant or an occurrent can be 
;;subtle. Notice it only arises for entities that are located in space 
;;and time: abstract things like sets and numbers are not classified in 
;;either of these ways. (Note in particular that a set of physical 
;;things is not itself physical.) The basic test is to ask whether the 
;;thing in question is best thought of as something that can be said to 
;;be 'happening' or whether one thinks of it as something that endures 
;;for a time and participates in happenings. As an alternative 
;;criterion, consider a time just before the thing in question exists. 
;;Do you think of it as just going to start (occurrent), or as just 
;;going to be created (continuant)?
;;Many physical things, however, can be thought of as being either a 
;;continuant or an occurrent. Examples include localized processes 
;;forming objects whose identity arises from dynamic equilibrium, such 
;;as a rainstorm, an ocean wave, a flame, a fountain plume, a river or 
;;even a human body. In such cases the ontologist may need to introduce 
;;two kinds of entities, one to express the continuant or enduring 
;;nature and the other the occurrent or process nature of the thing in 
;;question. For example, an ocean wave can be thought of as a moving 
;;continuant which at each moment is manifested by a local occurrent 
;;consisting of the motion of a part of the ocean surface. A 
;;thunderstorm viewed in a satellite image can be seen as a moving 
;;continuant, but seen from one position on the ground may be thought 
;;of as an occurrent (with stages of the sky darkening, rain beginning 
;;to fall, etc.). A similar duality is seen in the contrast between a 
;;motion and the thing moving, and the contrast between a continuant 
;;such as a person and that person's lifetime, which must be thought of 
;;as an occurrent. In general, if one is unsure how to classify some 
;;piece of a complex system, the safest strategy is to treat it as 
;;having both aspects and introduce them both into the ontology, so 
;;that enduring things always have lifetimes during which things happen 
;;to them, and happenings are always happening to something.
;;In a 4-d ontology there is no sharp contrast between occurrent and 
;;continuant, and the same thing may be spatiotemporally divided up in 
;;several different ways. In particular, a continuant can be identified 
;;with its lifetime. This makes for fewer entities, but requires that 
;;one specify carefully how properties are distributed with respect to 
;;spatiotemporal divisions. One way to view the continuant/occurrrent 
;;contrast is as a crude but useful system for making such 
;;specifications.")

